log2FC = 1
main = NULL
sub = NULL
labelSize = 7
labelColor = c("darkgreen", "red")
labelPos = 0
xlab = bquote(~Log[2]~ "FC")
ylab = (bquote(~-Log[10]~italic(P)))
axisLabelSize = 10
axisTextSize = 9
pointColor = c("darkgreen", "gray", "red")
legendTitle = FALSE
legendPos = "bottom"
degsLabelSize = 3
degsLabelNum=5
degsLabel = F
# Format DEG column
df <- df %>% mutate(DEG = "NS")
df <- df %>% mutate(DEG = ifelse(padj < pval & log2FoldChange > log2FC, "Upregulated", DEG))
df <- df %>% mutate(DEG = ifelse(padj < pval & log2FoldChange < -log2FC, "Downregulated", DEG))
df
# Format data frame.
df <- df %>%
# Mutate the data frame to convert NA in padj to 1
dplyr::mutate(padj = ifelse(test = is.na(padj), yes = 1, no = padj)) %>%
# Mutate the data frame to convert NA in log2FoldChange to 0
dplyr::mutate(log2FoldChange = ifelse(test = is.na(log2FoldChange), yes = 0, no = log2FoldChange)) %>%
# Mutate the dataframe to convert NA in DEG to "NS".
dplyr::mutate(DEG = ifelse(test = is.na(DEG), yes = "NS", no = DEG)) %>%
# Mutate the dataframe to include the shape of the points.
# Shape of al the points
dplyr::mutate(shape = "circle") %>%
# Change the shape of the point to triangle if the -log10(padj) is greater than the ylim variable
dplyr::mutate(shape = ifelse(test = -log10(padj) > ylim[2], yes = "triangle", no = shape)) %>%
# Change the shape of the points to triangle if the log2FoldChange is greater or lower than the xlim
dplyr::mutate(shape = ifelse(test = log2FoldChange > xlim[2], yes = "triangle", no = shape)) %>%
dplyr::mutate(shape = ifelse(test = log2FoldChange < xlim[1], yes = "triangle", no = shape)) %>%
# Change the padj to the value that plots the points at the top of the graph.
dplyr::mutate(padj  = ifelse(test = -log10(padj) > ylim[2], yes = 10^-ylim[2], no = padj)) %>%
# Change the log2FoldChange of the points with log2FoldChange than the limits, so they will be plotted in the limits of the graph
dplyr::mutate(log2FoldChange = ifelse(test = log2FoldChange > xlim[2], yes = xlim[2], no = log2FoldChange)) %>%
dplyr::mutate(log2FoldChange = ifelse(test = log2FoldChange < xlim[1], yes = xlim[1], no = log2FoldChange))
df
df %>% dplyr::count(DEG, name = "DEG_number") %>% dplyr::filter(DEG != "NS")
deg_number <- df %>% dplyr::count(DEG, name = "number") %>% dplyr::filter(DEG != "NS")
df %>% dplyr::left_join(deg_number)
df <- df %>% dplyr::left_join(deg_number)
p <- ggplot(data = na.omit(df), aes(x=log2FoldChange, y=-log10(padj), colour=DEG, shape=shape)) +
geom_point(alpha=0.7, size=1.7)
# Load packages
require(ggplot2)
require(dplyr)
# Count number of differentially expressed genes and join to the DE data frame
deg_number <- df %>% dplyr::count(DEG, name = "number") %>% dplyr::filter(DEG != "NS")
df <- df %>% dplyr::left_join(deg_number)
p <- ggplot(data = na.omit(df), aes(x=log2FoldChange, y=-log10(padj), colour=DEG, shape=shape)) +
geom_point(alpha=0.7, size=1.7)
p
# Count number of differentially expressed genes and join to the DE data frame
deg_number <- data.frame(DEG    = c("Upregulated", "Downregulated"),
number = c(sum(df$DEG == "Upregulated"),sum(df$DEG == "Downregulated")))
deg_number
df <- df %>% dplyr::left_join(deg_number, by = "DEG")
p <- ggplot(data = na.omit(df), aes(x=log2FoldChange, y=-log10(padj), colour=DEG, shape=shape)) +
geom_point(alpha=0.7, size=1.7) +
geom_text(aes(label(number)))
p
p <- ggplot(data = na.omit(df), aes(x=log2FoldChange, y=-log10(padj), colour=DEG, shape=shape)) +
geom_point(alpha=0.7, size=1.7) +
geom_text(aes(label = number))
p
df <- df %>% dplyr::left_join(deg_number, by = "DEG")
# Count number of differentially expressed genes and join to the DE data frame
deg_number <- data.frame(DEG    = c("Upregulated", "Downregulated",  "NS"),
number = c(sum(df$DEG == "Upregulated"),sum(df$DEG == "Downregulated"), ""))
df <- df %>% dplyr::left_join(deg_number, by = "DEG")
p <- ggplot(data = na.omit(df), aes(x=log2FoldChange, y=-log10(padj), colour=DEG, shape=shape)) +
geom_point(alpha=0.7, size=1.7) +
geom_text(aes(label = number))
p
na.omit(df)
# Count number of differentially expressed genes and join to the DE data frame
deg_number <- data.frame(DEG    = c("Upregulated", "Downregulated",  "NS"),
number = c(sum(df$DEG == "Upregulated"),sum(df$DEG == "Downregulated"), ""))
df <- df %>% dplyr::left_join(deg_number, by = "DEG")
df
df = deg_list[[1]]
# Format DEG column
df <- df %>% mutate(DEG = "NS")
df <- df %>% mutate(DEG = ifelse(padj < pval & log2FoldChange > log2FC, "Upregulated", DEG))
df <- df %>% mutate(DEG = ifelse(padj < pval & log2FoldChange < -log2FC, "Downregulated", DEG))
# Format data frame.
df <- df %>%
# Mutate the data frame to convert NA in padj to 1
dplyr::mutate(padj = ifelse(test = is.na(padj), yes = 1, no = padj)) %>%
# Mutate the data frame to convert NA in log2FoldChange to 0
dplyr::mutate(log2FoldChange = ifelse(test = is.na(log2FoldChange), yes = 0, no = log2FoldChange)) %>%
# Mutate the dataframe to convert NA in DEG to "NS".
dplyr::mutate(DEG = ifelse(test = is.na(DEG), yes = "NS", no = DEG)) %>%
# Mutate the dataframe to include the shape of the points.
# Shape of al the points
dplyr::mutate(shape = "circle") %>%
# Change the shape of the point to triangle if the -log10(padj) is greater than the ylim variable
dplyr::mutate(shape = ifelse(test = -log10(padj) > ylim[2], yes = "triangle", no = shape)) %>%
# Change the shape of the points to triangle if the log2FoldChange is greater or lower than the xlim
dplyr::mutate(shape = ifelse(test = log2FoldChange > xlim[2], yes = "triangle", no = shape)) %>%
dplyr::mutate(shape = ifelse(test = log2FoldChange < xlim[1], yes = "triangle", no = shape)) %>%
# Change the padj to the value that plots the points at the top of the graph.
dplyr::mutate(padj  = ifelse(test = -log10(padj) > ylim[2], yes = 10^-ylim[2], no = padj)) %>%
# Change the log2FoldChange of the points with log2FoldChange than the limits, so they will be plotted in the limits of the graph
dplyr::mutate(log2FoldChange = ifelse(test = log2FoldChange > xlim[2], yes = xlim[2], no = log2FoldChange)) %>%
dplyr::mutate(log2FoldChange = ifelse(test = log2FoldChange < xlim[1], yes = xlim[1], no = log2FoldChange))
# Count number of differentially expressed genes and join to the DE data frame
deg_number <- data.frame(DEG    = c("Upregulated", "Downregulated",  "NS"),
number = c(sum(df$DEG == "Upregulated"),sum(df$DEG == "Downregulated"), ""))
df <- df %>% dplyr::left_join(deg_number, by = "DEG")
df
p <- ggplot(data = na.omit(df), aes(x=log2FoldChange, y=-log10(padj), colour=DEG, shape=shape)) +
geom_point(alpha=0.7, size=1.7) +
geom_text(aes(label = number))
p
# Count number of differentially expressed genes and join to the DE data frame
deg_number <- data.frame(DEG    = c("Upregulated", "Downregulated",  "NS"),
number = c(sum(df$DEG == "Upregulated"),sum(df$DEG == "Downregulated"), ""),
x      = c(xlim[2], xlim[1], 0))
# Count number of differentially expressed genes and join to the DE data frame
deg_number <- data.frame(DEG    = c("Upregulated", "Downregulated",  "NS"),
number = c(sum(df$DEG == "Upregulated"),sum(df$DEG == "Downregulated"), ""),
xpos   = c(xlim[2], xlim[1], 0))
df <- df %>% dplyr::left_join(deg_number, by = "DEG")
p <- ggplot(data = na.omit(df), aes(x=log2FoldChange, y=-log10(padj), colour=DEG, shape=shape)) +
geom_point(alpha=0.7, size=1.7) +
geom_text(aes(label = number, y = ylim[1], x = ))
p
# Format data frame.
df <- df %>%
# Mutate the data frame to convert NA in padj to 1
dplyr::mutate(padj = ifelse(test = is.na(padj), yes = 1, no = padj)) %>%
# Mutate the data frame to convert NA in log2FoldChange to 0
dplyr::mutate(log2FoldChange = ifelse(test = is.na(log2FoldChange), yes = 0, no = log2FoldChange)) %>%
# Mutate the dataframe to convert NA in DEG to "NS".
dplyr::mutate(DEG = ifelse(test = is.na(DEG), yes = "NS", no = DEG)) %>%
# Mutate the dataframe to include the shape of the points.
# Shape of al the points
dplyr::mutate(shape = "circle") %>%
# Change the shape of the point to triangle if the -log10(padj) is greater than the ylim variable
dplyr::mutate(shape = ifelse(test = -log10(padj) > ylim[2], yes = "triangle", no = shape)) %>%
# Change the shape of the points to triangle if the log2FoldChange is greater or lower than the xlim
dplyr::mutate(shape = ifelse(test = log2FoldChange > xlim[2], yes = "triangle", no = shape)) %>%
dplyr::mutate(shape = ifelse(test = log2FoldChange < xlim[1], yes = "triangle", no = shape)) %>%
# Change the padj to the value that plots the points at the top of the graph.
dplyr::mutate(padj  = ifelse(test = -log10(padj) > ylim[2], yes = 10^-ylim[2], no = padj)) %>%
# Change the log2FoldChange of the points with log2FoldChange than the limits, so they will be plotted in the limits of the graph
dplyr::mutate(log2FoldChange = ifelse(test = log2FoldChange > xlim[2], yes = xlim[2], no = log2FoldChange)) %>%
dplyr::mutate(log2FoldChange = ifelse(test = log2FoldChange < xlim[1], yes = xlim[1], no = log2FoldChange))
# Count number of differentially expressed genes and join to the DE data frame
deg_number <- data.frame(DEG    = c("Upregulated", "Downregulated",  "NS"),
number = c(sum(df$DEG == "Upregulated"),sum(df$DEG == "Downregulated"), ""),
xpos   = c(xlim[2], xlim[1], 0))
df <- df %>% dplyr::left_join(deg_number, by = "DEG")
p <- ggplot(data = na.omit(df), aes(x=log2FoldChange, y=-log10(padj), colour=DEG, shape=shape)) +
geom_point(alpha=0.7, size=1.7) +
geom_text(aes(label = number, y = ylim[1], x = ))
p
df = deg_list[[1]]
# Format DEG column
df <- df %>% mutate(DEG = "NS")
df <- df %>% mutate(DEG = ifelse(padj < pval & log2FoldChange > log2FC, "Upregulated", DEG))
df <- df %>% mutate(DEG = ifelse(padj < pval & log2FoldChange < -log2FC, "Downregulated", DEG))
# Format data frame.
df <- df %>%
# Mutate the data frame to convert NA in padj to 1
dplyr::mutate(padj = ifelse(test = is.na(padj), yes = 1, no = padj)) %>%
# Mutate the data frame to convert NA in log2FoldChange to 0
dplyr::mutate(log2FoldChange = ifelse(test = is.na(log2FoldChange), yes = 0, no = log2FoldChange)) %>%
# Mutate the dataframe to convert NA in DEG to "NS".
dplyr::mutate(DEG = ifelse(test = is.na(DEG), yes = "NS", no = DEG)) %>%
# Mutate the dataframe to include the shape of the points.
# Shape of al the points
dplyr::mutate(shape = "circle") %>%
# Change the shape of the point to triangle if the -log10(padj) is greater than the ylim variable
dplyr::mutate(shape = ifelse(test = -log10(padj) > ylim[2], yes = "triangle", no = shape)) %>%
# Change the shape of the points to triangle if the log2FoldChange is greater or lower than the xlim
dplyr::mutate(shape = ifelse(test = log2FoldChange > xlim[2], yes = "triangle", no = shape)) %>%
dplyr::mutate(shape = ifelse(test = log2FoldChange < xlim[1], yes = "triangle", no = shape)) %>%
# Change the padj to the value that plots the points at the top of the graph.
dplyr::mutate(padj  = ifelse(test = -log10(padj) > ylim[2], yes = 10^-ylim[2], no = padj)) %>%
# Change the log2FoldChange of the points with log2FoldChange than the limits, so they will be plotted in the limits of the graph
dplyr::mutate(log2FoldChange = ifelse(test = log2FoldChange > xlim[2], yes = xlim[2], no = log2FoldChange)) %>%
dplyr::mutate(log2FoldChange = ifelse(test = log2FoldChange < xlim[1], yes = xlim[1], no = log2FoldChange))
# Count number of differentially expressed genes and join to the DE data frame
deg_number <- data.frame(DEG    = c("Upregulated", "Downregulated",  "NS"),
number = c(sum(df$DEG == "Upregulated"),sum(df$DEG == "Downregulated"), ""),
xpos   = c(xlim[2], xlim[1], 0))
df <- df %>% dplyr::left_join(deg_number, by = "DEG")
p <- ggplot(data = na.omit(df), aes(x=log2FoldChange, y=-log10(padj), colour=DEG, shape=shape)) +
geom_point(alpha=0.7, size=1.7) +
geom_text(aes(label = number, y = ylim[1], x = ))
p <- ggplot(data = na.omit(df), aes(x=log2FoldChange, y=-log10(padj), colour=DEG, shape=shape)) +
geom_point(alpha=0.7, size=1.7) +
geom_text(aes(label = number, y = ylim[1], x = xpos))
p
df
df <- df %>% dplyr::left_join(deg_number, by = "DEG") %>%
dplyr::group_by(number) %>% dplyr::mutate(row = row_number()) %>% dplyr::ungroup() %>%
dplyr::mutate(number = if_else(row != 1, "", number))
# Count number of differentially expressed genes and join to the DE data frame
deg_number <- data.frame(DEG    = c("Upregulated", "Downregulated",  "NS"),
number = c(sum(df$DEG == "Upregulated"),sum(df$DEG == "Downregulated"), ""),
xpos   = c(xlim[2], xlim[1], 0))
df <- df %>% dplyr::left_join(deg_number, by = "DEG") %>%
dplyr::group_by(number) %>% dplyr::mutate(row = row_number()) %>% dplyr::ungroup() %>%
dplyr::mutate(number = if_else(row != 1, "", number))
df %>% dplyr::left_join(deg_number, by = "DEG")
df = deg_list[[1]]
# Format DEG column
df <- df %>% mutate(DEG = "NS")
df <- df %>% mutate(DEG = ifelse(padj < pval & log2FoldChange > log2FC, "Upregulated", DEG))
df <- df %>% mutate(DEG = ifelse(padj < pval & log2FoldChange < -log2FC, "Downregulated", DEG))
# Format data frame.
df <- df %>%
# Mutate the data frame to convert NA in padj to 1
dplyr::mutate(padj = ifelse(test = is.na(padj), yes = 1, no = padj)) %>%
# Mutate the data frame to convert NA in log2FoldChange to 0
dplyr::mutate(log2FoldChange = ifelse(test = is.na(log2FoldChange), yes = 0, no = log2FoldChange)) %>%
# Mutate the dataframe to convert NA in DEG to "NS".
dplyr::mutate(DEG = ifelse(test = is.na(DEG), yes = "NS", no = DEG)) %>%
# Mutate the dataframe to include the shape of the points.
# Shape of al the points
dplyr::mutate(shape = "circle") %>%
# Change the shape of the point to triangle if the -log10(padj) is greater than the ylim variable
dplyr::mutate(shape = ifelse(test = -log10(padj) > ylim[2], yes = "triangle", no = shape)) %>%
# Change the shape of the points to triangle if the log2FoldChange is greater or lower than the xlim
dplyr::mutate(shape = ifelse(test = log2FoldChange > xlim[2], yes = "triangle", no = shape)) %>%
dplyr::mutate(shape = ifelse(test = log2FoldChange < xlim[1], yes = "triangle", no = shape)) %>%
# Change the padj to the value that plots the points at the top of the graph.
dplyr::mutate(padj  = ifelse(test = -log10(padj) > ylim[2], yes = 10^-ylim[2], no = padj)) %>%
# Change the log2FoldChange of the points with log2FoldChange than the limits, so they will be plotted in the limits of the graph
dplyr::mutate(log2FoldChange = ifelse(test = log2FoldChange > xlim[2], yes = xlim[2], no = log2FoldChange)) %>%
dplyr::mutate(log2FoldChange = ifelse(test = log2FoldChange < xlim[1], yes = xlim[1], no = log2FoldChange))
# Count number of differentially expressed genes and join to the DE data frame
deg_number <- data.frame(DEG    = c("Upregulated", "Downregulated",  "NS"),
number = c(sum(df$DEG == "Upregulated"),sum(df$DEG == "Downregulated"), ""),
xpos   = c(xlim[2], xlim[1], 0))
deg_number
df <- df %>% dplyr::left_join(deg_number, by = "DEG") %>%
dplyr::group_by(number) %>% dplyr::mutate(row = row_number()) %>% dplyr::ungroup() %>%
dplyr::mutate(number = if_else(row != 1, "", number))
df
p <- ggplot(data = na.omit(df), aes(x=log2FoldChange, y=-log10(padj), colour=DEG, shape=shape)) +
geom_point(alpha=0.7, size=1.7) +
geom_text(aes(label = number, y = ylim[1], x = xpos))
p
p <- ggplot(data = na.omit(df), aes(x=log2FoldChange, y=-log10(padj), colour=DEG, shape=shape)) +
geom_point(alpha=0.7, size=1.7) +
geom_text(aes(label = number, y = ylim[1], x = xpos), show.legend = F)
# Basic formatting
p <- p +
# Stablish a predefined theme
theme_classic() +
# Write and format the graph title, can be nothing.
ggtitle(label = main, subtitle = sub) +
theme(plot.title = element_text(face="bold", hjust = .5, size = mainSize),
plot.subtitle = element_text(face = "italic", hjust = .5, size = subSize)) +
# Stablish the x and y axes ranges.
coord_cartesian(xlim = xlim, ylim = ylim) +
# Put an horizontal line in the -log10(pval) value and two vertival lines in the -logFC and logFC values.
geom_hline(yintercept = -log10(pval), linetype = 2) +
geom_vline(xintercept = c(-log2FC, log2FC), linetype = 2) +
# Format the axis names and sizes
xlab(xlab) + ylab(ylab) + theme(axis.title = element_text(size = axisLabelSize, face = "bold")) +
# Format the color of the points
scale_colour_manual(values=c("Downregulated" = pointColor[1], "NS" = pointColor[2], "Upregulated" = pointColor[3]),
labels = c("Downregulated" = "Downregulated", "NS" = "NS", "Upregulated" = "Upregulated"),
drop = FALSE) +
# Remove the legend for shape
guides(shape="none") +
# Format the axis values
theme(axis.text = element_text(size = axisTextSize)) +
# Decide the position of the legend (default: "bottom")
theme(legend.position = legendPos)
subSize = 8
mainSize = 9
# Basic formatting
p <- p +
# Stablish a predefined theme
theme_classic() +
# Write and format the graph title, can be nothing.
ggtitle(label = main, subtitle = sub) +
theme(plot.title = element_text(face="bold", hjust = .5, size = mainSize),
plot.subtitle = element_text(face = "italic", hjust = .5, size = subSize)) +
# Stablish the x and y axes ranges.
coord_cartesian(xlim = xlim, ylim = ylim) +
# Put an horizontal line in the -log10(pval) value and two vertival lines in the -logFC and logFC values.
geom_hline(yintercept = -log10(pval), linetype = 2) +
geom_vline(xintercept = c(-log2FC, log2FC), linetype = 2) +
# Format the axis names and sizes
xlab(xlab) + ylab(ylab) + theme(axis.title = element_text(size = axisLabelSize, face = "bold")) +
# Format the color of the points
scale_colour_manual(values=c("Downregulated" = pointColor[1], "NS" = pointColor[2], "Upregulated" = pointColor[3]),
labels = c("Downregulated" = "Downregulated", "NS" = "NS", "Upregulated" = "Upregulated"),
drop = FALSE) +
# Remove the legend for shape
guides(shape="none") +
# Format the axis values
theme(axis.text = element_text(size = axisTextSize)) +
# Decide the position of the legend (default: "bottom")
theme(legend.position = legendPos)
# Decide if legend title is writen or not. Default: not writen.
if(!legendTitle){
p <- p + theme(legend.title = element_blank())
}
# Write names of the most DE genes in terms of lowest adjusted p-value
if(is.logical(degsLabel)){
#("'degsLabel' is logical. If TRUE, the most significant DEGs will be printed on thee plot.")
if(degsLabel){
# Load ggrepel
require(ggrepel)
# Organaize and retrieve lowest p-value genes
degs <- df %>%
# Filter non significant genes
dplyr::filter(DEG!="NS") %>%
# Arrange by ascendent order of padjusted
dplyr::arrange(padj)
# Create a dataframe with the labels of the DEGs with highest abs(log2FC).
degs <- head(na.omit(degs), degsLabelNum) %>% as.data.frame()
# Put labels in the plot
p <- p + geom_text_repel(data = degs, mapping = aes(x = log2FoldChange, y = -log10(padj), label = Geneid), size = degsLabelSize, color = "Black")
}
} else if(is.character(degsLabel)){
#("'degsLabel' is character, so the written genes will be printed on the plot")
# Load ggrepel
require(ggrepel)
# Organaize and retrieve lowest p-value genes
degs <- df %>%
# Filter for only the genes that are wanted
dplyr::filter(Geneid %in% degsLabel)
# Put labels in the plot
p <- p + geom_text_repel(data = degs, mapping = aes(x = log2FoldChange, y = -log10(padj), label = Geneid), size = degsLabelSize, color = "Black")
}
p
volcanoPlot
# Initialize ggplot with points and number of DEGs
p <- ggplot(data = na.omit(df), aes(x=log2FoldChange, y=-log10(padj), colour=DEG, shape=shape)) +
geom_point(alpha=0.7, size=1.7) +
geom_text(aes(label = number, y = ylim[1], x = xpos), size = labelSize, show.legend = F)
# Basic formatting
p <- p +
# Stablish a predefined theme
theme_classic() +
# Write and format the graph title, can be nothing.
ggtitle(label = main, subtitle = sub) +
theme(plot.title = element_text(face="bold", hjust = .5, size = mainSize),
plot.subtitle = element_text(face = "italic", hjust = .5, size = subSize)) +
# Stablish the x and y axes ranges.
coord_cartesian(xlim = xlim, ylim = ylim) +
# Put an horizontal line in the -log10(pval) value and two vertival lines in the -logFC and logFC values.
geom_hline(yintercept = -log10(pval), linetype = 2) +
geom_vline(xintercept = c(-log2FC, log2FC), linetype = 2) +
# Format the axis names and sizes
xlab(xlab) + ylab(ylab) + theme(axis.title = element_text(size = axisLabelSize, face = "bold")) +
# Format the color of the points
scale_colour_manual(values=c("Downregulated" = pointColor[1], "NS" = pointColor[2], "Upregulated" = pointColor[3]),
labels = c("Downregulated" = "Downregulated", "NS" = "NS", "Upregulated" = "Upregulated"),
drop = FALSE) +
# Remove the legend for shape
guides(shape="none") +
# Format the axis values
theme(axis.text = element_text(size = axisTextSize)) +
# Decide the position of the legend (default: "bottom")
theme(legend.position = legendPos)
# Decide if legend title is writen or not. Default: not writen.
if(!legendTitle){
p <- p + theme(legend.title = element_blank())
}
# Write names of the most DE genes in terms of lowest adjusted p-value
if(is.logical(degsLabel)){
#("'degsLabel' is logical. If TRUE, the most significant DEGs will be printed on thee plot.")
if(degsLabel){
# Load ggrepel
require(ggrepel)
# Organaize and retrieve lowest p-value genes
degs <- df %>%
# Filter non significant genes
dplyr::filter(DEG!="NS") %>%
# Arrange by ascendent order of padjusted
dplyr::arrange(padj)
# Create a dataframe with the labels of the DEGs with highest abs(log2FC).
degs <- head(na.omit(degs), degsLabelNum) %>% as.data.frame()
# Put labels in the plot
p <- p + geom_text_repel(data = degs, mapping = aes(x = log2FoldChange, y = -log10(padj), label = Geneid), size = degsLabelSize, color = "Black")
}
} else if(is.character(degsLabel)){
#("'degsLabel' is character, so the written genes will be printed on the plot")
# Load ggrepel
require(ggrepel)
# Organaize and retrieve lowest p-value genes
degs <- df %>%
# Filter for only the genes that are wanted
dplyr::filter(Geneid %in% degsLabel)
# Put labels in the plot
p <- p + geom_text_repel(data = degs, mapping = aes(x = log2FoldChange, y = -log10(padj), label = Geneid), size = degsLabelSize, color = "Black")
}
# Draw the graph.
return(p)
p
df = deg_list[[1]]
# Format DEG column
df <- df %>% mutate(DEG = "NS")
df <- df %>% mutate(DEG = ifelse(padj < pval & log2FoldChange > log2FC, "Upregulated", DEG))
df <- df %>% mutate(DEG = ifelse(padj < pval & log2FoldChange < -log2FC, "Downregulated", DEG))
# Format data frame.
df <- df %>%
# Mutate the data frame to convert NA in padj to 1
dplyr::mutate(padj = ifelse(test = is.na(padj), yes = 1, no = padj)) %>%
# Mutate the data frame to convert NA in log2FoldChange to 0
dplyr::mutate(log2FoldChange = ifelse(test = is.na(log2FoldChange), yes = 0, no = log2FoldChange)) %>%
# Mutate the dataframe to convert NA in DEG to "NS".
dplyr::mutate(DEG = ifelse(test = is.na(DEG), yes = "NS", no = DEG)) %>%
# Mutate the dataframe to include the shape of the points.
# Shape of al the points
dplyr::mutate(shape = "circle") %>%
# Change the shape of the point to triangle if the -log10(padj) is greater than the ylim variable
dplyr::mutate(shape = ifelse(test = -log10(padj) > ylim[2], yes = "triangle", no = shape)) %>%
# Change the shape of the points to triangle if the log2FoldChange is greater or lower than the xlim
dplyr::mutate(shape = ifelse(test = log2FoldChange > xlim[2], yes = "triangle", no = shape)) %>%
dplyr::mutate(shape = ifelse(test = log2FoldChange < xlim[1], yes = "triangle", no = shape)) %>%
# Change the padj to the value that plots the points at the top of the graph.
dplyr::mutate(padj  = ifelse(test = -log10(padj) > ylim[2], yes = 10^-ylim[2], no = padj)) %>%
# Change the log2FoldChange of the points with log2FoldChange than the limits, so they will be plotted in the limits of the graph
dplyr::mutate(log2FoldChange = ifelse(test = log2FoldChange > xlim[2], yes = xlim[2], no = log2FoldChange)) %>%
dplyr::mutate(log2FoldChange = ifelse(test = log2FoldChange < xlim[1], yes = xlim[1], no = log2FoldChange))
# Initialize ggplot with points and number of DEGs
p <- ggplot(data = df, aes(x=log2FoldChange, y=-log10(padj), colour=DEG, shape=shape)) +
geom_point(alpha=0.7, size=1.7) +
geom_text(data = na.omit(df), aes(label = number, y = ylim[1], x = xpos), size = labelSize, show.legend = F)
p
na.omit(df)
df
df <- df %>% dplyr::left_join(deg_number, by = "DEG") %>%
dplyr::group_by(number) %>% dplyr::mutate(row = row_number()) %>% dplyr::ungroup() %>%
dplyr::mutate(number = if_else(row != 1, NA, number))
df <- df %>% dplyr::left_join(deg_number, by = "DEG") %>%
dplyr::group_by(number) %>% dplyr::mutate(row = row_number()) %>% dplyr::ungroup() %>%
dplyr::mutate(number = ifelse(row != 1, NA, number))
# Initialize ggplot with points and number of DEGs
p <- ggplot(data = df, aes(x=log2FoldChange, y=-log10(padj), colour=DEG, shape=shape)) +
geom_point(alpha=0.7, size=1.7) +
geom_text(data = na.omit(df), aes(label = number, y = ylim[1], x = xpos), size = labelSize, show.legend = F)
p
# Basic formatting
p <- p +
# Stablish a predefined theme
theme_classic() +
# Write and format the graph title, can be nothing.
ggtitle(label = main, subtitle = sub) +
theme(plot.title = element_text(face="bold", hjust = .5, size = mainSize),
plot.subtitle = element_text(face = "italic", hjust = .5, size = subSize)) +
# Stablish the x and y axes ranges.
coord_cartesian(xlim = xlim, ylim = ylim) +
# Put an horizontal line in the -log10(pval) value and two vertival lines in the -logFC and logFC values.
geom_hline(yintercept = -log10(pval), linetype = 2) +
geom_vline(xintercept = c(-log2FC, log2FC), linetype = 2) +
# Format the axis names and sizes
xlab(xlab) + ylab(ylab) + theme(axis.title = element_text(size = axisLabelSize, face = "bold")) +
# Format the color of the points
scale_colour_manual(values=c("Downregulated" = pointColor[1], "NS" = pointColor[2], "Upregulated" = pointColor[3]),
labels = c("Downregulated" = "Downregulated", "NS" = "NS", "Upregulated" = "Upregulated"),
drop = FALSE) +
# Remove the legend for shape
guides(shape="none") +
# Format the axis values
theme(axis.text = element_text(size = axisTextSize)) +
# Decide the position of the legend (default: "bottom")
theme(legend.position = legendPos)
# Decide if legend title is writen or not. Default: not writen.
if(!legendTitle){
p <- p + theme(legend.title = element_blank())
}
# Write names of the most DE genes in terms of lowest adjusted p-value
if(is.logical(degsLabel)){
#("'degsLabel' is logical. If TRUE, the most significant DEGs will be printed on thee plot.")
if(degsLabel){
# Load ggrepel
require(ggrepel)
# Organaize and retrieve lowest p-value genes
degs <- df %>%
# Filter non significant genes
dplyr::filter(DEG!="NS") %>%
# Arrange by ascendent order of padjusted
dplyr::arrange(padj)
# Create a dataframe with the labels of the DEGs with highest abs(log2FC).
degs <- head(na.omit(degs), degsLabelNum) %>% as.data.frame()
# Put labels in the plot
p <- p + geom_text_repel(data = degs, mapping = aes(x = log2FoldChange, y = -log10(padj), label = Geneid), size = degsLabelSize, color = "Black")
}
} else if(is.character(degsLabel)){
#("'degsLabel' is character, so the written genes will be printed on the plot")
# Load ggrepel
require(ggrepel)
# Organaize and retrieve lowest p-value genes
degs <- df %>%
# Filter for only the genes that are wanted
dplyr::filter(Geneid %in% degsLabel)
# Put labels in the plot
p <- p + geom_text_repel(data = degs, mapping = aes(x = log2FoldChange, y = -log10(padj), label = Geneid), size = degsLabelSize, color = "Black")
}
p
devtools::document()
pkgdown::build_site()
remove.packages("plotmics", lib="~/R/x86_64-pc-linux-gnu-library/4.1")
devtools::install_github("amitjavilaventura/plotmics")
