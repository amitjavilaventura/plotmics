axis.text  = element_text(size = axis_text_size),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
panel.border = element_rect(size = 1.1)) +
xlab(xlab) + ylab(ylab)
# Write thee label of the expression values
if(write_label){ hm <- hm + geom_text(aes(label = round(Expr, label_digits)), size = label_size, color = label_color) }
# Remove row names
if(!show_gene_names){ hm <- hm + theme(axis.text.y = element_blank()) }
hm + facet_wrap(~extra)
hm + facet_wrap(~extra, scales = "free")
hm + coord_cartesianfacet_wrap(~extra, scales = "free")
hm + coord_cartesian() + facet_wrap(~extra, scales = "free")
# Remove row names
if(!show_gene_names){ hm <- hm + theme(axis.text.y = element_blank()) }
hm + coord_cartesian() + facet_wrap(~extra, scales = "free")
# Hierarchical clustering -----
if(clust_rows){
# Hierarchical clustering of rows alone
hclust_rows <- hclust( dist(expr[-1], method = dist_method), method = hclust_method )
# Position of the Y axis
if(show_dend_rows) { ytext_pos = "right" }
else { ytext_pos = "left" }
# Order rows
hm <- hm +
scale_y_discrete(limits=expr.m$Geneid[hclust_rows$order],
labels = expr.m$Geneid[hclust_rows$order], position = ytext_pos,
expand = c(0,0))
} else { hm <- hm + scale_y_discrete(expand = c(0,0)) }
hclust_rows <- hclust( dist(expr[-1], method = dist_method), method = hclust_method )
expr[-1]
dplyr::select(expr, where(is.numeric))
# Hierarchical clustering of rows alone
hclust_rows <- hclust( dist(dplyr::select(expr, where(is.numeric)), method = dist_method), method = hclust_method )
# Position of the Y axis
if(show_dend_rows) { ytext_pos = "right" }
else { ytext_pos = "left" }
# Order rows
hm <- hm +
scale_y_discrete(limits=expr.m$Geneid[hclust_rows$order],
labels = expr.m$Geneid[hclust_rows$order], position = ytext_pos,
expand = c(0,0))
# Look if there are extra columns
extra_cols <- expr %>% dplyr::select(!where(is.numeric), -Geneid) %>% ncol()
if(extra_cols>0){
# Separate extra columns from numeric values and Geneid
extra <- expr %>% dplyr::select(!where(is.numeric))
expr  <- expr %>% dplyr::select(Geneid, where(is.numeric))
}
# Don't allow extra cols if dendograms are shown
if(show_dend_cols | show_dend_rows) { extra_cols = 0}
# Readd the extra cols
if(extra_cols > 0){ expr <- dplyr::inner_join(expr, extra, by = "Geneid") }
## Melt data frame
expr.m <- expr %>%
reshape2::melt(value.name = "Expr", variable.name = "Condition")
# Get the legend breaks.
if(is.null(legend_scale)){
lower    <- min(expr.m$Expr)
higher   <- max(expr.m$Expr)
midpoint <- (higher+(lower))/2
breaks   <- round(seq(from = lower, to = higher, by = (higher-lower)/legend_breaks_num))
} else {
lower    <- legend_scale[1]
higher   <- legend_scale[2]
midpoint <- legend_midpoint
breaks   <- round(seq(from = lower, to = higher, by = legend_breaks_by))
}
# Initialize the heatmap with ggplot
hm <- ggplot(expr.m, aes(Condition, Geneid) ) +
geom_tile(aes(fill = Expr), color = border_color) +
ggh4x::force_panelsizes(rows = unit(hm_height, "mm"),  # force height of the heatmap
cols = unit(hm_width, "mm")) + # force width of the heatmap
coord_fixed() +  # fix the coordinates
scale_fill_gradient2(limits = c(lower, higher), midpoint = midpoint, # setup the legend
breaks = breaks, na.value = na_color,
oob = scales::squish, ## to put out of bound values into scale
low = hm_colors[1], high = hm_colors[3], mid = hm_colors[2],
guide = guide_colorbar(title = legend_title,
title.position = "right",
title.theme = element_text(angle = 270,
hjust = .5, vjust = .5,
size = legend_title_size),
frame.colour = "black", frame.linewidth = 1.5,
ticks.colour = NA,
barheight = unit(legend_height, "mm"))) +
theme_pubr(border = T, legend = "right", margin = T) + # format the plot
theme(plot.title = element_text(face = "bold", size = title_size, hjust = title_hjust),
plot.subtitle = element_text(face = "italic", size = subtitle_size, hjust = title_hjust),
plot.caption = element_text(size = caption_size),
axis.title = element_text(face = "bold", size = axis_title_size),
axis.ticks.y = element_blank(),
axis.text  = element_text(size = axis_text_size),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
panel.border = element_rect(size = 1.1)) +
xlab(xlab) + ylab(ylab)
# Write thee label of the expression values
if(write_label){ hm <- hm + geom_text(aes(label = round(Expr, label_digits)), size = label_size, color = label_color) }
# Remove row names
if(!show_gene_names){ hm <- hm + theme(axis.text.y = element_blank()) }
hm
# Format data frame -----
## Filter dataframe to get only desired genes
expr <- expr_df %>%
dplyr::relocate(Geneid) %>%
dplyr::filter(Geneid %in% genes)
# Look if there are extra columns
extra_cols <- expr %>% dplyr::select(!where(is.numeric), -Geneid) %>% ncol()
if(extra_cols>0){
# Separate extra columns from numeric values and Geneid
extra <- expr %>% dplyr::select(!where(is.numeric))
expr  <- expr %>% dplyr::select(Geneid, where(is.numeric))
}
# Don't allow extra cols if dendograms are shown
if(show_dend_cols | show_dend_rows) { extra_cols = 0}
## Scale
if(!is.null(scale)){
if("rows" %in% scale) { expr[,2:length(expr)] <- expr[,2:length(expr)] %>% t() %>% scale() %>% t() }
if("cols" %in% scale) { expr[,2:length(expr)] <- expr[,2:length(expr)] %>% scale() }
}
scale = NULL
# Format data frame -----
## Filter dataframe to get only desired genes
expr <- expr_df %>%
dplyr::relocate(Geneid) %>%
dplyr::filter(Geneid %in% genes)
# Look if there are extra columns
extra_cols <- expr %>% dplyr::select(!where(is.numeric), -Geneid) %>% ncol()
if(extra_cols>0){
# Separate extra columns from numeric values and Geneid
extra <- expr %>% dplyr::select(!where(is.numeric))
expr  <- expr %>% dplyr::select(Geneid, where(is.numeric))
}
# Don't allow extra cols if dendograms are shown
if(show_dend_cols | show_dend_rows) { extra_cols = 0}
## Scale
if(!is.null(scale)){
if("rows" %in% scale) { expr[,2:length(expr)] <- expr[,2:length(expr)] %>% t() %>% scale() %>% t() }
if("cols" %in% scale) { expr[,2:length(expr)] <- expr[,2:length(expr)] %>% scale() }
}
# Readd the extra cols
if(extra_cols > 0){ expr <- dplyr::inner_join(expr, extra, by = "Geneid") }
## Melt data frame
expr.m <- expr %>%
reshape2::melt(value.name = "Expr", variable.name = "Condition")
# Get the legend breaks.
if(is.null(legend_scale)){
lower    <- min(expr.m$Expr)
higher   <- max(expr.m$Expr)
midpoint <- (higher+(lower))/2
breaks   <- round(seq(from = lower, to = higher, by = (higher-lower)/legend_breaks_num))
} else {
lower    <- legend_scale[1]
higher   <- legend_scale[2]
midpoint <- legend_midpoint
breaks   <- round(seq(from = lower, to = higher, by = legend_breaks_by))
}
# Initialize the heatmap with ggplot
hm <- ggplot(expr.m, aes(Condition, Geneid) ) +
geom_tile(aes(fill = Expr), color = border_color) +
ggh4x::force_panelsizes(rows = unit(hm_height, "mm"),  # force height of the heatmap
cols = unit(hm_width, "mm")) + # force width of the heatmap
coord_fixed() +  # fix the coordinates
scale_fill_gradient2(limits = c(lower, higher), midpoint = midpoint, # setup the legend
breaks = breaks, na.value = na_color,
oob = scales::squish, ## to put out of bound values into scale
low = hm_colors[1], high = hm_colors[3], mid = hm_colors[2],
guide = guide_colorbar(title = legend_title,
title.position = "right",
title.theme = element_text(angle = 270,
hjust = .5, vjust = .5,
size = legend_title_size),
frame.colour = "black", frame.linewidth = 1.5,
ticks.colour = NA,
barheight = unit(legend_height, "mm"))) +
theme_pubr(border = T, legend = "right", margin = T) + # format the plot
theme(plot.title = element_text(face = "bold", size = title_size, hjust = title_hjust),
plot.subtitle = element_text(face = "italic", size = subtitle_size, hjust = title_hjust),
plot.caption = element_text(size = caption_size),
axis.title = element_text(face = "bold", size = axis_title_size),
axis.ticks.y = element_blank(),
axis.text  = element_text(size = axis_text_size),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
panel.border = element_rect(size = 1.1)) +
xlab(xlab) + ylab(ylab)
# Write thee label of the expression values
if(write_label){ hm <- hm + geom_text(aes(label = round(Expr, label_digits)), size = label_size, color = label_color) }
# Remove row names
if(!show_gene_names){ hm <- hm + theme(axis.text.y = element_blank()) }
hm
hm + coord_cartesian() + facet_wrap(~extra)
hm + coord_cartesian() + facet_wrap(~extra, scales = "free")
# Hierarchical clustering of rows alone
hclust_rows <- hclust( dist(dplyr::select(expr, where(is.numeric)), method = dist_method), method = hclust_method )
# Position of the Y axis
if(show_dend_rows) { ytext_pos = "right" }
else { ytext_pos = "left" }
ytext_pos = "left"
# Order rows
hm <- hm +
scale_y_discrete(limits=expr.m$Geneid[hclust_rows$order],
labels = expr.m$Geneid[hclust_rows$order], position = ytext_pos,
expand = c(0,0))
hm + coord_cartesian() + facet_wrap(~extra, scales = "free")
hm
# Look if there are extra columns
extra_cols <- expr %>% dplyr::select(!where(is.numeric), -Geneid) %>% ncol()
if(extra_cols>0){
# Separate extra columns from numeric values and Geneid
extra <- expr %>% dplyr::select(!where(is.numeric))
expr  <- expr %>% dplyr::select(Geneid, where(is.numeric))
}
# Don't allow extra cols if dendograms are shown
if(clust_cols | clust_rows) { extra_cols = 0}
## Scale
if(!is.null(scale)){
if("rows" %in% scale) { expr[,2:length(expr)] <- expr[,2:length(expr)] %>% t() %>% scale() %>% t() }
if("cols" %in% scale) { expr[,2:length(expr)] <- expr[,2:length(expr)] %>% scale() }
}
# Readd the extra cols
if(extra_cols > 0){ expr <- dplyr::inner_join(expr, extra, by = "Geneid") }
## Melt data frame
expr.m <- expr %>%
reshape2::melt(value.name = "Expr", variable.name = "Condition")
# Get the legend breaks.
if(is.null(legend_scale)){
lower    <- min(expr.m$Expr)
higher   <- max(expr.m$Expr)
midpoint <- (higher+(lower))/2
breaks   <- round(seq(from = lower, to = higher, by = (higher-lower)/legend_breaks_num))
} else {
lower    <- legend_scale[1]
higher   <- legend_scale[2]
midpoint <- legend_midpoint
breaks   <- round(seq(from = lower, to = higher, by = legend_breaks_by))
}
# Initialize the heatmap with ggplot
hm <- ggplot(expr.m, aes(Condition, Geneid) ) +
geom_tile(aes(fill = Expr), color = border_color) +
ggh4x::force_panelsizes(rows = unit(hm_height, "mm"),  # force height of the heatmap
cols = unit(hm_width, "mm")) + # force width of the heatmap
coord_fixed() +  # fix the coordinates
scale_fill_gradient2(limits = c(lower, higher), midpoint = midpoint, # setup the legend
breaks = breaks, na.value = na_color,
oob = scales::squish, ## to put out of bound values into scale
low = hm_colors[1], high = hm_colors[3], mid = hm_colors[2],
guide = guide_colorbar(title = legend_title,
title.position = "right",
title.theme = element_text(angle = 270,
hjust = .5, vjust = .5,
size = legend_title_size),
frame.colour = "black", frame.linewidth = 1.5,
ticks.colour = NA,
barheight = unit(legend_height, "mm"))) +
theme_pubr(border = T, legend = "right", margin = T) + # format the plot
theme(plot.title = element_text(face = "bold", size = title_size, hjust = title_hjust),
plot.subtitle = element_text(face = "italic", size = subtitle_size, hjust = title_hjust),
plot.caption = element_text(size = caption_size),
axis.title = element_text(face = "bold", size = axis_title_size),
axis.ticks.y = element_blank(),
axis.text  = element_text(size = axis_text_size),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
panel.border = element_rect(size = 1.1)) +
xlab(xlab) + ylab(ylab)
# Write thee label of the expression values
if(write_label){ hm <- hm + geom_text(aes(label = round(Expr, label_digits)), size = label_size, color = label_color) }
# Remove row names
if(!show_gene_names){ hm <- hm + theme(axis.text.y = element_blank()) }
# Hierarchical clustering -----
if(clust_rows){
# Hierarchical clustering of rows alone
hclust_rows <- hclust( dist(dplyr::select(expr, where(is.numeric)), method = dist_method), method = hclust_method )
# Position of the Y axis
if(show_dend_rows) { ytext_pos = "right" }
else { ytext_pos = "left" }
# Order rows
hm <- hm +
scale_y_discrete(limits=expr.m$Geneid[hclust_rows$order],
labels = expr.m$Geneid[hclust_rows$order], position = ytext_pos,
expand = c(0,0))
} else { hm <- hm + scale_y_discrete(expand = c(0,0)) }
if(clust_cols){
# Hierarchical clustering of columns alone
hclust_cols <- hclust( dist(t(expr[-1]), method = dist_method), method = hclust_method )
# Order columns
hm <- hm +
scale_x_discrete(limits = colnames(expr[,-1])[hclust_cols$order],
labels = colnames(expr[,-1])[hclust_cols$order],
expand = c(0,0))
} else { hm <- hm + scale_x_discrete(expand = c(0,0)) }
### Plot dendograms
if(clust_rows & clust_cols & show_dend_rows & show_dend_cols){
dend_rows <- plotDendogram(hclust_rows, axis = "rows")
dend_cols <- plotDendogram(hclust_cols, axis = "cols")
# Plot heatmap and dendogram(s) together with patchwork and the created layout
heatmap <- hm +
inset_element(dend_cols, left = 0, bottom = 1, right = 1, top = 1+dend_cols_prop) +
inset_element(dend_rows, left = -dend_rows_prop, bottom = 0, right = 0, top = 1) +
plot_annotation(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
} else if(clust_cols & show_dend_cols) {
dend_cols <- plotDendogram(hclust_cols, axis = "cols")
# Plot heatmap and dendogram(s) together with patchwork and the created layout
heatmap <- hm +
inset_element(dend_cols, left = -0.1, bottom = 1, right = 1.1, top = 1+dend_cols_prop) +
plot_annotation(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
} else if(clust_rows & show_dend_rows) {
dend_rows <- plotDendogram(hclust_rows, axis = "rows")
# Plot heatmap and dendogram(s) together with patchwork and the created layout
heatmap <- hm +
inset_element(dend_rows, left = -dend_rows_prop, bottom = 0, right = 0, top = 1) +
plot_annotation(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
} else {
heatmap <- hm +
labs(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
}
# Return heatmap
return(heatmap)
expressionHeatmap <- function(expr_df,
genes,
clust_rows = F,
clust_cols = F,
show_dend_rows = F,
show_dend_cols = F,
dist_method = "euclidean",
hclust_method = "ward.D",
write_label = T,
label_size = 3,
label_color = "black",
label_digits = 2,
hm_height = length(genes)*10,
hm_width = (ncol(expr_df)-1)*10,
hm_colors = c("cornflowerblue", "white", "gold3"),
na_color = "gray",
border_color = NA,
legend_scale = NULL,
legend_breaks_num = 5,
legend_breaks_by = .5,
legend_midpoint = 0,
legend_height = hm_height,
legend_title = NULL,
legend_title_size = 9,
dend_cols_prop = .1,
dend_rows_prop = .2,
title = "",
subtitle = "",
caption = NULL,
xlab = "",
ylab = NULL,
title_size = 13,
subtitle_size = 12,
caption_size = 7,
axis_text_size = 10,
axis_title_size = 11,
title_hjust = 0,
scale = NULL,
show_gene_names = T){
# Load requireed packages
require(dplyr)
require(reshape2)
require(ggplot2)
require(ggh4x)
require(ggpubr)
require(patchwork)
# Check that inputs are OK -----
if(!is.data.frame(expr_df)){ stop("'df' must be a data frame with 'Geneid' in the first column and the other columns with the expression values to plot.") }
if(!("Geneid" %in% colnames(expr_df))){ stop("'df' must have a character first column named 'Geneid'") }
if(show_dend_rows & !clust_rows){ stop("To plot the rows dendogram (`show_dend_rows = T`), `clust_rows` must be TRUE") }
if(show_dend_cols & !clust_cols){ stop("To plot the columns dendogram (`show_dend_cols = T`), `clust_cols` must be TRUE") }
# Format data frame -----
## Filter dataframe to get only desired genes
expr <- expr_df %>%
dplyr::relocate(Geneid) %>%
dplyr::filter(Geneid %in% genes)
# Look if there are extra columns
extra_cols <- expr %>% dplyr::select(!where(is.numeric), -Geneid) %>% ncol()
if(extra_cols>0){
# Separate extra columns from numeric values and Geneid
extra <- expr %>% dplyr::select(!where(is.numeric))
expr  <- expr %>% dplyr::select(Geneid, where(is.numeric))
}
# Don't allow extra cols if dendograms are shown
if(clust_cols | clust_rows) { extra_cols = 0}
## Scale
if(!is.null(scale)){
if("rows" %in% scale) { expr[,2:length(expr)] <- expr[,2:length(expr)] %>% t() %>% scale() %>% t() }
if("cols" %in% scale) { expr[,2:length(expr)] <- expr[,2:length(expr)] %>% scale() }
}
# Readd the extra cols
if(extra_cols > 0){ expr <- dplyr::inner_join(expr, extra, by = "Geneid") }
## Melt data frame
expr.m <- expr %>%
reshape2::melt(value.name = "Expr", variable.name = "Condition")
# Get the legend breaks.
if(is.null(legend_scale)){
lower    <- min(expr.m$Expr)
higher   <- max(expr.m$Expr)
midpoint <- (higher+(lower))/2
breaks   <- round(seq(from = lower, to = higher, by = (higher-lower)/legend_breaks_num))
} else {
lower    <- legend_scale[1]
higher   <- legend_scale[2]
midpoint <- legend_midpoint
breaks   <- round(seq(from = lower, to = higher, by = legend_breaks_by))
}
# Initialize the heatmap with ggplot
hm <- ggplot(expr.m, aes(Condition, Geneid) ) +
geom_tile(aes(fill = Expr), color = border_color) +
ggh4x::force_panelsizes(rows = unit(hm_height, "mm"),  # force height of the heatmap
cols = unit(hm_width, "mm")) + # force width of the heatmap
coord_fixed() +  # fix the coordinates
scale_fill_gradient2(limits = c(lower, higher), midpoint = midpoint, # setup the legend
breaks = breaks, na.value = na_color,
oob = scales::squish, ## to put out of bound values into scale
low = hm_colors[1], high = hm_colors[3], mid = hm_colors[2],
guide = guide_colorbar(title = legend_title,
title.position = "right",
title.theme = element_text(angle = 270,
hjust = .5, vjust = .5,
size = legend_title_size),
frame.colour = "black", frame.linewidth = 1.5,
ticks.colour = NA,
barheight = unit(legend_height, "mm"))) +
theme_pubr(border = T, legend = "right", margin = T) + # format the plot
theme(plot.title = element_text(face = "bold", size = title_size, hjust = title_hjust),
plot.subtitle = element_text(face = "italic", size = subtitle_size, hjust = title_hjust),
plot.caption = element_text(size = caption_size),
axis.title = element_text(face = "bold", size = axis_title_size),
axis.ticks.y = element_blank(),
axis.text  = element_text(size = axis_text_size),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
panel.border = element_rect(size = 1.1)) +
xlab(xlab) + ylab(ylab)
# Write thee label of the expression values
if(write_label){ hm <- hm + geom_text(aes(label = round(Expr, label_digits)), size = label_size, color = label_color) }
# Remove row names
if(!show_gene_names){ hm <- hm + theme(axis.text.y = element_blank()) }
# Hierarchical clustering -----
if(clust_rows){
# Hierarchical clustering of rows alone
hclust_rows <- hclust( dist(dplyr::select(expr, where(is.numeric)), method = dist_method), method = hclust_method )
# Position of the Y axis
if(show_dend_rows) { ytext_pos = "right" }
else { ytext_pos = "left" }
# Order rows
hm <- hm +
scale_y_discrete(limits=expr.m$Geneid[hclust_rows$order],
labels = expr.m$Geneid[hclust_rows$order], position = ytext_pos,
expand = c(0,0))
} else { hm <- hm + scale_y_discrete(expand = c(0,0)) }
if(clust_cols){
# Hierarchical clustering of columns alone
hclust_cols <- hclust( dist(t(expr[-1]), method = dist_method), method = hclust_method )
# Order columns
hm <- hm +
scale_x_discrete(limits = colnames(expr[,-1])[hclust_cols$order],
labels = colnames(expr[,-1])[hclust_cols$order],
expand = c(0,0))
} else { hm <- hm + scale_x_discrete(expand = c(0,0)) }
### Plot dendograms
if(clust_rows & clust_cols & show_dend_rows & show_dend_cols){
dend_rows <- plotDendogram(hclust_rows, axis = "rows")
dend_cols <- plotDendogram(hclust_cols, axis = "cols")
# Plot heatmap and dendogram(s) together with patchwork and the created layout
heatmap <- hm +
inset_element(dend_cols, left = 0, bottom = 1, right = 1, top = 1+dend_cols_prop) +
inset_element(dend_rows, left = -dend_rows_prop, bottom = 0, right = 0, top = 1) +
plot_annotation(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
} else if(clust_cols & show_dend_cols) {
dend_cols <- plotDendogram(hclust_cols, axis = "cols")
# Plot heatmap and dendogram(s) together with patchwork and the created layout
heatmap <- hm +
inset_element(dend_cols, left = -0.1, bottom = 1, right = 1.1, top = 1+dend_cols_prop) +
plot_annotation(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
} else if(clust_rows & show_dend_rows) {
dend_rows <- plotDendogram(hclust_rows, axis = "rows")
# Plot heatmap and dendogram(s) together with patchwork and the created layout
heatmap <- hm +
inset_element(dend_rows, left = -dend_rows_prop, bottom = 0, right = 0, top = 1) +
plot_annotation(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
} else {
heatmap <- hm +
labs(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
}
# Return heatmap
return(heatmap)
}
devtools::document()
mean_tpm <- tibble(Geneid = tpm$Geneid,
Cond1  = rowMeans(tpm[2:3]),
Cond2  = rowMeans(tpm[4:5]),
Cond3  = rowMeans(tpm[6:7]))
tpm <- read.delim("../testdata/tpm.tsv")
mean_tpm <- tibble(Geneid = tpm$Geneid,
Cond1  = rowMeans(tpm[2:3]),
Cond2  = rowMeans(tpm[4:5]),
Cond3  = rowMeans(tpm[6:7]))
mean_tpm <- tibble(Geneid = tpm$Geneid,
Cond1  = rowMeans(tpm[2:3]),
Cond2  = rowMeans(tpm[4:5]),
Cond3  = rowMeans(tpm[6:7]))
nr=nrow(mean_tpm)
mean_tpm2 <- mean_tpm %>%
dplyr::mutate(extra = c(rep(c("Group1", "Group2"), (nr/2)), "Group1"))
expr_df = mean_tpm2
genes = mean_tpm2$Geneid[1:20]
