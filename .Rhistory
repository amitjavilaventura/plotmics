xlab = "Mapped reads", ylab = "Chromosome", axis.size = 9,
percent.label = T, percent.size = 3){
# Load required packages
require(Rsamtools)
require(ggplot2)
require(dplyr)
require(stringr)
# Calculate the number of reads mapping to each chromosome with Rsamtools::idxstatsBam()
chromReads <- idxstatsBam(bamfile)
# Remove names of strange chromosomes
chromReads <- chromReads[grep("chr", chromReads$seqnames),]
# Calculate the total number of mapped reads in "good" chromosomes
totalReads <- sum(chromReads$mapped)
# Calculate percentage of mapped reads in each chromosome against all mapped reads
chromReads$percentage <- chromReads$mapped/totalReads*100
# Filter strange chromosomees (i.e. "chrUn...")
for(i in chr.filt){
chromReads <- chromReads[(str_detect(chromReads$seqnames, pattern = i, negate = T)),]
}
# Draw a bar graph
b <- ggplot(data = chromReads, mapping = aes(mapped, seqnames, fill = seqnames)) +
geom_bar(stat = "identity", show.legend = legend, colour = "Gray15") +
ylab(label = ylab) + xlab(label = xlab) +
ggtitle(main, subtitle) +
# General formatting
theme_chromReads(main.size = main.size, sub.size = sub.size, axis.size = axis.size)
# Annotate labels (percentages)
if(percent.label == T){
b <- b + geom_text(aes(label = round(percentage, 2), x = mapped+max(mapped)*0.05), size = percent.size, hjust = 0) +
xlim(0, max(chromReads$mapped*1.20))
}
# Return bar graph
return(b)
}
chromReads(bam)
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4)
devtools::load_all("..")
# install devtools if not installed
if(!require(devtools)){ install.packages("devtools") }
# install plotmics if not installed
if(!require(plotmics)){ devtools::install_github("amitjavilaventura/plotmics") }
# load plotmics
library(plotmics)
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4)
devtools::load_all("..")
chromReads(bamfile = "../testdata/sampleX.bam")
chromReads(bamfile = "../testdata/sampleX.bam")
chromReads(bamfile = "../testdata/sampleX.bam")
require(ggpubr)
# install devtools if not installed
if(!require(devtools)){ install.packages("devtools") }
# install plotmics if not installed
if(!require(plotmics)){ devtools::install_github("amitjavilaventura/plotmics") }
# load plotmics
library(plotmics)
chromReads(bamfile = "../testdata/sampleX.bam")
chromReads(bamfile = "../testdata/sampleX.bam")
chromReads(bamfile = "../testdata/sampleX.bam", chr.filt = "chr2")
chromReads(bamfile = "../testdata/sampleX.bam", chr.filt = c("X", "Y"))
chromReads(bamfile = "../testdata/sampleX.bam", main = "This is a title",
subtitle = "This is a subtitle", xlab = "This the label of the X axis",
ylab = "This is the label of the Y axis",
main.size = 16, sub.size = 10, axis.size = 14, percent.size = 9)
chromReads(bamfile = "../testdata/sampleX.bam", percent.label = F)
devtools::load_all()
chromReads(bamfile = "../testdata/sampleX.bam")
chromReads(bamfile = "../testdata/sampleX.bam")
pkgdown::build_articles()
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4)
devtools::load_all("..")
library(dplyr)
library(purrr)
deg_list <- list.files("../testdata", "diff_exp", full.names = T, recursive = T) %>%
purrr::set_names(paste("cond", 1:3, sep = "")) %>%
purrr::map(~read.delim(.x))
deg_list
deg_list[[1]]
deg_list[[1]] %>% head()
barDEGs(deg_list = deg_list)
barDEGs(deg_list = deg_list, deg_names = c("Condition 1", "Condition 2", "Condition 3"))
barDEGs(deg_list = deg_list, name_pos = "left")
barDEGs(deg_list = deg_list, name_pos = "right")
barDEGs(deg_list = deg_list, name_pos = "right")
barDEGs(deg_list = deg_list, name_pos = "left")
barDEGs(deg_list = deg_list, name_pos = "left", deg_names = c("Condition 1", "Condition 2", "Condition 3"))
barDEGs(deg_list = deg_list, xlim = c(-1000, 1000))
barDEGs(deg_list = deg_list, xaxis = T)
barDEGs(deg_list = deg_list, xaxis = T, yaxis = T)
barDEGs(deg_list = deg_list, name_pos = "none")
barDEGs(deg_list = deg_list, name_pos = "none", yaxis = T)
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_articles()
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4)
devtools::load_all("..")
library(dplyr)
library(purrr)
# read the dataframes into a list
deg_list <- list.files("../testdata", "diff_exp", full.names = T, recursive = T) %>%
purrr::set_names(paste("cond", 1:3, sep = "")) %>%
purrr::map(~read.delim(.x))
deg_list[[1]] %>% head()
volcanoPlot(deg_list = deg_list)
# read the dataframes into a list
deg_list <- list.files("../testdata", "diff_exp", full.names = T, recursive = T) %>%
purrr::set_names(paste("cond", 1:3, sep = "")) %>%
purrr::map(~read.delim(.x))
deg_list[[1]] %>% head()
volcanoPlot(df =  = deg_list)
volcanoPlot(df = deg_list)
volcanoPlot(df = deg_list[1])
volcanoPlot(df = deg_list[[1]])
volcanoPlot(df = deg_list[[1]])
volcanoPlot(df = deg_list[[1]], log2FC = 1, pval = 0.1)
df = deg_list[[1]]
log2FC = 1.5
pval = 0.05
df %>% dplyr::mutate(DEG = if_else(log2FoldChange >= log2FC & padj <= pval, "Upregulated",
if_else(log2FoldChange <= -log2FC & padj <= pval, "Downregulated", "NS"))
df <- df %>%
# Mutate the data frame to convert NA in padj to 1
dplyr::mutate(padj = ifelse(test = is.na(padj), yes = 1, no = padj)) %>%
# Mutate the data frame to convert NA in log2FoldChange to 0
dplyr::mutate(log2FoldChange = ifelse(test = is.na(log2FoldChange), yes = 0, no = log2FoldChange)) %>%
# Mutate the dataframe to convert NA in DEG to "NS".
dplyr::mutate(DEG = ifelse(test = is.na(DEG), yes = "NS", no = DEG)) %>%
# Mutate the dataframe to include the shape of the points.
# Shape of al the points
dplyr::mutate(shape = "circle") %>%
# Change the shape of the point to triangle if the -log10(padj) is greater than the ylim variable
dplyr::mutate(shape = ifelse(test = -log10(padj) > ylim[2], yes = "triangle", no = shape)) %>%
# Change the shape of the points to triangle if the log2FoldChange is greater or lower than the xlim
dplyr::mutate(shape = ifelse(test = log2FoldChange > xlim[2], yes = "triangle", no = shape)) %>%
dplyr::mutate(shape = ifelse(test = log2FoldChange < xlim[1], yes = "triangle", no = shape)) %>%
# Change the padj to the value that plots the points at the top of the graph.
dplyr::mutate(padj  = ifelse(test = -log10(padj) > ylim[2], yes = 10^-ylim[2], no = padj)) %>%
# Change the log2FoldChange of the points with log2FoldChange than the limits, so they will be plotted in the limits of the graph
dplyr::mutate(log2FoldChange = ifelse(test = log2FoldChange > xlim[2], yes = xlim[2], no = log2FoldChange)) %>%
dplyr::mutate(log2FoldChange = ifelse(test = log2FoldChange < xlim[1], yes = xlim[1], no = log2FoldChange))
p <- ggplot(data = na.omit(df), aes(x=log2FoldChange, y=-log10(padj), colour=DEG, shape=shape)) +
geom_point(alpha=0.7, size=1.7)
# Annotate the number of up and downregulated DEGs
p <- p +
annotate("text", label = sum(df$DEG == "Upregulated"), color = labelColor[2], y = labelPos, x = xlim[2],
vjust=0.3,hjust="inward", size = labelSize) +
annotate("text", label = sum(df$DEG == "Downregulated"), color = labelColor[1], y = labelPos, x = xlim[1],
vjust=0.3,hjust="inward", size = labelSize)
# Basic formatting
p <- p +
# Stablish a predefined theme
theme_classic() +
# Write and format the graph title, can be nothing.
ggtitle(label = main, subtitle = sub) +
theme(plot.title = element_text(face="bold", hjust = .5, size = mainSize),
plot.subtitle = element_text(face = "italic", hjust = .5, size = subSize)) +
# Stablish the x and y axes ranges.
coord_cartesian(xlim = xlim, ylim = ylim) +
# Put an horizontal line in the -log10(pval) value and two vertival lines in the -logFC and logFC values.
geom_hline(yintercept = -log10(pval), linetype = 2) +
geom_vline(xintercept = c(-log2FC, log2FC), linetype = 2) +
# Format the axis names and sizes
xlab(xlab) + ylab(ylab) + theme(axis.title = element_text(size = axisLabelSize, face = "bold")) +
# Format the color of the points
scale_colour_manual(values=c("Downregulated" = pointColor[1], "NS" = pointColor[2], "Upregulated" = pointColor[3]),
labels = c("Downregulated" = "Downregulated", "NS" = "NS", "Upregulated" = "Upregulated"),
drop = FALSE) +
# Remove the legend for shape
guides(shape=FALSE) +
# Format the axis values
theme(axis.text = element_text(size = axisTextSize)) +
# Decide the position of the legend (default: "bottom")
theme(legend.position = legendPos)
# Decide if legend title is writen or not. Default: not writen.
if(!legendTitle){
p <- p + theme(legend.title = element_blank())
}
# Write names of the most DE genes in terms of lowest adjusted p-value
if(is.logical(degsLabel)){
#("'degsLabel' is logical. If TRUE, the most significant DEGs will be printed on thee plot.")
if(degsLabel){
# Load ggrepel
require(ggrepel)
# Organaize and retrieve lowest p-value genes
degs <- df %>%
# Filter non significant genes
dplyr::filter(DEG!="NS") %>%
# Arrange by ascendent order of padjusted
dplyr::arrange(padj)
# Create a dataframe with the labels of the DEGs with highest abs(log2FC).
degs <- head(na.omit(degs), degsLabelNum) %>% as.data.frame()
# Put labels in the plot
p <- p + geom_text_repel(data = degs, mapping = aes(x = log2FoldChange, y = -log10(padj), label = Geneid), size = degsLabelSize, color = "Black")
}
} else if(is.character(degsLabel)){
#("'degsLabel' is character, so the written genes will be printed on the plot")
# Load ggrepel
require(ggrepel)
# Organaize and retrieve lowest p-value genes
degs <- df %>%
# Filter for only the genes that are wanted
dplyr::filter(Geneid %in% degsLabel)
# Put labels in the plot
p <- p + geom_text_repel(data = degs, mapping = aes(x = log2FoldChange, y = -log10(padj), label = Geneid), size = degsLabelSize, color = "Black")
}
# Draw the graph.
return(p)
}
df %>% dplyr::mutate(DEG = if_else(log2FoldChange >= log2FC & padj <= pval, "Upregulated",
if_else(log2FoldChange <= -log2FC & padj <= pval, "Downregulated", "NS")))
deg_list
deg_list %>% purrr::map(~dplyr::mutate(.x, DEG = if_else(log2FoldChange >= log2FC & padj <= pval, "Upregulated",
if_else(log2FoldChange <= -log2FC & padj <= pval, "Downregulated", "NS"))))
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4)
devtools::load_all("..")
library(dplyr)
library(purrr)
barDEGs(deg_list = deg_list, pval = 0.1, log2FC = 1)
barDEGs(deg_list = deg_list)
volcanoPlot(df = deg_list[[1]], log2FC = 1, pval = 0.1)
# Do the plot
updown_bar <- deg_numbers %>%
ggplot(aes(number, contrast, fill = DEG)) +
geom_col(color = "black", width = 0.5, alpha = alpha) +
# Add the number of DEGs to each bar
geom_text(mapping = aes(label = n, x = pos_num, hjust = hjust_num), size = 3) +
# Add the name of the contrast
geom_text(mapping = aes(label = contrast_name, x = contrast_pos, hjust = hjust_num), size = 3)  +
# Change default colors
scale_fill_manual(values = c(colors[1], colors[2])) +
# Add vertical line at 0
geom_vline(aes(xintercept = 0), size = 0.5) +
# Custom theme
theme_pubr(border = F, margin = T, legend = "bottom") +
theme(axis.title = element_blank(),
legend.title = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank()) %>% suppressMessages() %>% suppressWarnings()
barDEGs <- function(deg_list, deg_names = names(deg_list),
name_pos = "min", xlim = NULL, position_num = 10,
xaxis = F, yaxis = F,
colors = c("green", "red"), alpha = 0.5,
log2FC = 1, pval = 0.05){
# Load packages
require(dplyr)
require(purrr)
require(ggplot2)
require(ggpubr)
# Check that inputs are OK
if(!is.list(deg_list)){ stop("'deg_list' must be a named list of data frames.") }
else if(!is.character(deg_names)){ stop("'deg_names' must be a character vector.") }
else if(length(deg_list) != length(deg_names)){ stop("'deg_list' and 'deg_names' must have the same lenght.") }
else if(!name_pos %in% c('min', 'left', 'right', 'none')){ stop("'name_pos' must be one of c('min', 'left', 'right', 'none').") }
else if(!is.null(xlim) & !is.numeric(xlim)){ stop("'xlim' must be NULL or a numeric vector of length 2.") }
else if(!is.logical(xaxis) | !is.logical(yaxis)){ stop("Both 'xaxis' and 'yaxis' must be a logical vector of length 1.") }
else if(!is.character(colors) | length(colors) != 2){ stop("'colors' must be a character vector of length 2 with valid color names/codes.") }
else if(!is.numeric(alpha) | alpha < 0 | alpha > 1){ stop("'alpha' must be a numeric vector of length 1 with a value between 0 and 1")}
# Mutate deg_list to be able to change the log2FC and pvalue thresholds for defining the DEGs
deg_list <- deg_list %>% purrr::map(~dplyr::mutate(.x, DEG = if_else(log2FoldChange >= log2FC & padj <= pval, "Upregulated",
if_else(log2FoldChange <= -log2FC & padj <= pval, "Downregulated", "NS"))))
# Named list of DEGs
deg_numbers <- deg_list %>%
# Add names to each element in the list
purrr::set_names(deg_names) %>%
# Count number of upregulated and downregulated genes in each contrast
purrr::map(~dplyr::count(.x, DEG)) %>%
purrr::map(~dplyr::filter(.x, DEG != "NS")) %>%
# Add a contrast variable using the name of each element in the list
purrr::imap(~dplyr::mutate(.x, contrast = .y)) %>%
# Bind all dataframes in one
bind_rows() %>%
# Change the number of downregulated genes to negative
mutate(number = if_else(DEG == "Downregulated", -n, n)) %>%
# Add a variable for the position of the number of DEGs and the hjust
mutate(pos_num   = if_else(DEG == "Downregulated", -position_num, position_num)) %>%
mutate(hjust_num = if_else(DEG == "Downregulated", 1, 0)) %>%
# Add a variable for the position of the name of the contrast
mutate(contrast_pos = if_else(DEG == "Downregulated", number-position_num, number+position_num))
# Set at which site will the contrast name be written
if(name_pos == "min"){
deg_numbers <- deg_numbers %>%
group_by(contrast) %>%
mutate(contrast_name = if_else(n == min(n), contrast, NULL)) %>%
ungroup()
} else if(name_pos == "left"){
deg_numbers <- deg_numbers %>%
mutate(contrast_name = if_else(n == -number, contrast, NULL))
} else if(name_pos == "right"){
deg_numbers <- deg_numbers %>%
mutate(contrast_name = if_else(n == number, contrast, NULL))
} else if(name_pos == "none"){
deg_numbers <- deg_numbers %>%
mutate(contrast_name = "")
}
# Do the plot
updown_bar <- deg_numbers %>%
ggplot(aes(number, contrast, fill = DEG)) +
geom_col(color = "black", width = 0.5, alpha = alpha) +
# Add the number of DEGs to each bar
geom_text(mapping = aes(label = n, x = pos_num, hjust = hjust_num), size = 3) +
# Add the name of the contrast
geom_text(mapping = aes(label = contrast_name, x = contrast_pos, hjust = hjust_num), size = 3)  +
# Change default colors
scale_fill_manual(values = c(colors[1], colors[2])) +
# Add vertical line at 0
geom_vline(aes(xintercept = 0), size = 0.5) +
# Custom theme
theme_pubr(border = F, margin = T, legend = "bottom") +
theme(axis.title = element_blank(),
legend.title = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank()) %>% suppressMessages() %>% suppressWarnings()
if(!xaxis){ updown_bar <- updown_bar + theme(axis.text.x = element_blank()) }
if(!yaxis){ updown_bar <- updown_bar + theme(axis.text.y = element_blank()) }
# Change limits of xaxis
if(!is.null(xlim)){updown_bar <- updown_bar + coord_cartesian(xlim = c(xlim[1], xlim[2]))}
# Return plot
return(updown_bar)
}
barDEGs(deg_list = deg_list, pval = 0.1, log2FC = 1)
barDEGs <- function(deg_list, deg_names = names(deg_list),
name_pos = "min", xlim = NULL, position_num = 10,
xaxis = F, yaxis = F,
colors = c("green", "red"), alpha = 0.5,
log2FC = 1, pval = 0.05){
# Load packages
require(dplyr)
require(purrr)
require(ggplot2)
require(ggpubr)
# Check that inputs are OK
if(!is.list(deg_list)){ stop("'deg_list' must be a named list of data frames.") }
else if(!is.character(deg_names)){ stop("'deg_names' must be a character vector.") }
else if(length(deg_list) != length(deg_names)){ stop("'deg_list' and 'deg_names' must have the same lenght.") }
else if(!name_pos %in% c('min', 'left', 'right', 'none')){ stop("'name_pos' must be one of c('min', 'left', 'right', 'none').") }
else if(!is.null(xlim) & !is.numeric(xlim)){ stop("'xlim' must be NULL or a numeric vector of length 2.") }
else if(!is.logical(xaxis) | !is.logical(yaxis)){ stop("Both 'xaxis' and 'yaxis' must be a logical vector of length 1.") }
else if(!is.character(colors) | length(colors) != 2){ stop("'colors' must be a character vector of length 2 with valid color names/codes.") }
else if(!is.numeric(alpha) | alpha < 0 | alpha > 1){ stop("'alpha' must be a numeric vector of length 1 with a value between 0 and 1")}
# Mutate deg_list to be able to change the log2FC and pvalue thresholds for defining the DEGs
deg_list <- deg_list %>% purrr::map(~dplyr::mutate(.x, DEG = if_else(log2FoldChange >= log2FC & padj <= pval, "Upregulated",
if_else(log2FoldChange <= -log2FC & padj <= pval, "Downregulated", "NS"))))
# Named list of DEGs
deg_numbers <- deg_list %>%
# Add names to each element in the list
purrr::set_names(deg_names) %>%
# Count number of upregulated and downregulated genes in each contrast
purrr::map(~dplyr::count(.x, DEG)) %>%
purrr::map(~dplyr::filter(.x, DEG != "NS")) %>%
# Add a contrast variable using the name of each element in the list
purrr::imap(~dplyr::mutate(.x, contrast = .y)) %>%
# Bind all dataframes in one
bind_rows() %>%
# Change the number of downregulated genes to negative
mutate(number = if_else(DEG == "Downregulated", -n, n)) %>%
# Add a variable for the position of the number of DEGs and the hjust
mutate(pos_num   = if_else(DEG == "Downregulated", -position_num, position_num)) %>%
mutate(hjust_num = if_else(DEG == "Downregulated", 1, 0)) %>%
# Add a variable for the position of the name of the contrast
mutate(contrast_pos = if_else(DEG == "Downregulated", number-position_num, number+position_num))
# Set at which site will the contrast name be written
if(name_pos == "min"){
deg_numbers <- deg_numbers %>%
group_by(contrast) %>%
mutate(contrast_name = if_else(n == min(n), contrast, NULL)) %>%
ungroup()
} else if(name_pos == "left"){
deg_numbers <- deg_numbers %>%
mutate(contrast_name = if_else(n == -number, contrast, NULL))
} else if(name_pos == "right"){
deg_numbers <- deg_numbers %>%
mutate(contrast_name = if_else(n == number, contrast, NULL))
} else if(name_pos == "none"){
deg_numbers <- deg_numbers %>%
mutate(contrast_name = "")
}
# Do the plot
updown_bar <- deg_numbers %>%
ggplot(aes(number, contrast, fill = DEG)) +
geom_col(color = "black", width = 0.5, alpha = alpha) +
# Add the number of DEGs to each bar
geom_text(mapping = aes(label = n, x = pos_num, hjust = hjust_num), size = 3, na.rm=TRUE) +
# Add the name of the contrast
geom_text(mapping = aes(label = contrast_name, x = contrast_pos, hjust = hjust_num), size = 3)  +
# Change default colors
scale_fill_manual(values = c(colors[1], colors[2])) +
# Add vertical line at 0
geom_vline(aes(xintercept = 0), size = 0.5) +
# Custom theme
theme_pubr(border = F, margin = T, legend = "bottom") +
theme(axis.title = element_blank(),
legend.title = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank())
if(!xaxis){ updown_bar <- updown_bar + theme(axis.text.x = element_blank()) }
if(!yaxis){ updown_bar <- updown_bar + theme(axis.text.y = element_blank()) }
# Change limits of xaxis
if(!is.null(xlim)){updown_bar <- updown_bar + coord_cartesian(xlim = c(xlim[1], xlim[2]))}
# Return plot
return(updown_bar)
}
barDEGs(deg_list = deg_list, pval = 0.1, log2FC = 1)
barDEGs <- function(deg_list, deg_names = names(deg_list),
name_pos = "min", xlim = NULL, position_num = 10,
xaxis = F, yaxis = F,
colors = c("green", "red"), alpha = 0.5,
log2FC = 1, pval = 0.05){
# Load packages
require(dplyr)
require(purrr)
require(ggplot2)
require(ggpubr)
# Check that inputs are OK
if(!is.list(deg_list)){ stop("'deg_list' must be a named list of data frames.") }
else if(!is.character(deg_names)){ stop("'deg_names' must be a character vector.") }
else if(length(deg_list) != length(deg_names)){ stop("'deg_list' and 'deg_names' must have the same lenght.") }
else if(!name_pos %in% c('min', 'left', 'right', 'none')){ stop("'name_pos' must be one of c('min', 'left', 'right', 'none').") }
else if(!is.null(xlim) & !is.numeric(xlim)){ stop("'xlim' must be NULL or a numeric vector of length 2.") }
else if(!is.logical(xaxis) | !is.logical(yaxis)){ stop("Both 'xaxis' and 'yaxis' must be a logical vector of length 1.") }
else if(!is.character(colors) | length(colors) != 2){ stop("'colors' must be a character vector of length 2 with valid color names/codes.") }
else if(!is.numeric(alpha) | alpha < 0 | alpha > 1){ stop("'alpha' must be a numeric vector of length 1 with a value between 0 and 1")}
# Mutate deg_list to be able to change the log2FC and pvalue thresholds for defining the DEGs
deg_list <- deg_list %>% purrr::map(~dplyr::mutate(.x, DEG = if_else(log2FoldChange >= log2FC & padj <= pval, "Upregulated",
if_else(log2FoldChange <= -log2FC & padj <= pval, "Downregulated", "NS"))))
# Named list of DEGs
deg_numbers <- deg_list %>%
# Add names to each element in the list
purrr::set_names(deg_names) %>%
# Count number of upregulated and downregulated genes in each contrast
purrr::map(~dplyr::count(.x, DEG)) %>%
purrr::map(~dplyr::filter(.x, DEG != "NS")) %>%
# Add a contrast variable using the name of each element in the list
purrr::imap(~dplyr::mutate(.x, contrast = .y)) %>%
# Bind all dataframes in one
bind_rows() %>%
# Change the number of downregulated genes to negative
mutate(number = if_else(DEG == "Downregulated", -n, n)) %>%
# Add a variable for the position of the number of DEGs and the hjust
mutate(pos_num   = if_else(DEG == "Downregulated", -position_num, position_num)) %>%
mutate(hjust_num = if_else(DEG == "Downregulated", 1, 0)) %>%
# Add a variable for the position of the name of the contrast
mutate(contrast_pos = if_else(DEG == "Downregulated", number-position_num, number+position_num))
# Set at which site will the contrast name be written
if(name_pos == "min"){
deg_numbers <- deg_numbers %>%
group_by(contrast) %>%
mutate(contrast_name = if_else(n == min(n), contrast, NULL)) %>%
ungroup()
} else if(name_pos == "left"){
deg_numbers <- deg_numbers %>%
mutate(contrast_name = if_else(n == -number, contrast, NULL))
} else if(name_pos == "right"){
deg_numbers <- deg_numbers %>%
mutate(contrast_name = if_else(n == number, contrast, NULL))
} else if(name_pos == "none"){
deg_numbers <- deg_numbers %>%
mutate(contrast_name = "")
}
# Do the plot
updown_bar <- deg_numbers %>%
ggplot(aes(number, contrast, fill = DEG)) +
geom_col(color = "black", width = 0.5, alpha = alpha) +
# Add the number of DEGs to each bar
geom_text(mapping = aes(label = n, x = pos_num, hjust = hjust_num), size = 3, na.rm = TRUE) +
# Add the name of the contrast
geom_text(mapping = aes(label = contrast_name, x = contrast_pos, hjust = hjust_num), size = 3, na.rm = TRUE)  +
# Change default colors
scale_fill_manual(values = c(colors[1], colors[2])) +
# Add vertical line at 0
geom_vline(aes(xintercept = 0), size = 0.5) +
# Custom theme
theme_pubr(border = F, margin = T, legend = "bottom") +
theme(axis.title = element_blank(),
legend.title = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank())
if(!xaxis){ updown_bar <- updown_bar + theme(axis.text.x = element_blank()) }
if(!yaxis){ updown_bar <- updown_bar + theme(axis.text.y = element_blank()) }
# Change limits of xaxis
if(!is.null(xlim)){updown_bar <- updown_bar + coord_cartesian(xlim = c(xlim[1], xlim[2]))}
# Return plot
return(updown_bar)
}
barDEGs(deg_list = deg_list, pval = 0.1, log2FC = 1)
volcanoPlot(df = deg_list[[1]], main = "This is a title", sub = "This is a subtitle",
xlab = "This is the X-axis label", ylab = "This is the Y-axis label",
mainSize = 19, subSize = 15, axisLabelSize = 14, axisTextSize = 10)
volcanoPlot(df = deg_list[[1]], main = "This is a title", sub = "This is a subtitle",
xlab = "This is the X-axis label", ylab = "This is the Y-axis label",
mainSize = 19, subSize = 15, axisLabelSize = 14, axisTextSize = 15)
volcanoPlot(df = deg_list[[1]], labelPos = 30)
volcanoPlot(df = deg_list[[1]], labelSize = 12)
volcanoPlot(df = deg_list[[1]], pointColor = c("cornflowerblue", "gray", "gold3"))
volcanoPlot(df = deg_list[[1]], degsLabel = T)
volcanoPlot(df = deg_list[[1]], degsLabel = T, degsLabelNum = 20)
volcanoPlot(df = deg_list[[1]], degsLabel = T, degsLabelSize = 10)
genes_to_show <- c("Lef1", "Tp53", "Mtor", "Ctnna1")
volcanoPlot(df = deg_list[[1]], degsLabel = T, degsLabelSize = 5, degsLabelNum = genes_to_show)
volcanoPlot(df = deg_list[[1]], degsLabel = genes_to_show, degsLabelSize = 5)
pkgdown::build_articles()
pkgdown::build_site()
devtools::load_all()
pkgdown::build_site()
pkgdown::build_reference()
devtools::document()
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4)
devtools::load_all("..")
# install devtools if not installed
if(!require(devtools)){ install.packages("devtools") }
# install plotmics if not installed
if(!require(plotmics)){ devtools::install_github("amitjavilaventura/plotmics") }
library(plotmics)
pkgdown::build_site()
