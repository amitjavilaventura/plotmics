if(draw_lines) {
if(plot_type %in% c("dot", "dotplot")) { g + geom_line(aes(color = Geneid), show.legend = F, size = 0.1) }
else { g + geom_line(show.legend = F, size = 0.1) }
}
else { g + geom_line(show.legend = F, size = 0.25) }
if(plot_type %in% c("dot", "dotplot")) { g + geom_line(aes(color = Geneid), show.legend = F, size = 0.25) }
# Set color_var
color_var <- ifelse(plot_type == "dot", "Geneid", "variable")
# Set color_var depending on plot type
color_var <- ifelse(plot_type == "dot", "Geneid", "variable")
# If genes are more than 10, set to plot to box
if(genes > 10) {
gene_labels <- FALSE; draw_lines = FALSE; plot_type = "box"; color_var = "variable"
if(plot_type == "dot"){ plot_type = "box" }
}
d <- df %>% dplyr::filter(Geneid %in% genes) %>% reshape2::melt() %>% dplyr::group_by(Geneid) %>% dplyr::mutate(label = ifelse(value == max(value), Geneid, NA))
g <- ggplot(d, aes(variable, value, color = sym(color_var), group = Geneid))
if(plot_type %in% c("dot", "dotplot")) { g <- g + geom_point(show.legend = show_legend) }
color_var = "variable"
g <- ggplot(d, aes(variable, value, color = sym(color_var), group = Geneid))
if(plot_type %in% c("dot", "dotplot")) { g <- g + geom_point(show.legend = show_legend) }
sym(color_var)
g <- ggplot(d, aes(variable, value, color = sym(color_var), group = Geneid))
if(plot_type %in% c("dot", "dotplot")) { g <- g + geom_point(show.legend = show_legend) }
g <- ggplot(d, aes(variable, value, color = sym(color_var), group = Geneid))
g + geom_boxplot(show.legend = show_legend) + geom_point(color = NA, show.legend = F)
d <- df %>% dplyr::filter(Geneid %in% genes) %>% reshape2::melt() %>% dplyr::group_by(Geneid) %>% dplyr::mutate(label = ifelse(value == max(value), Geneid, NA))
g <- ggplot(d, aes(variable, value, color = sym(color_var), group = Geneid))
g + geom_point(show.legend = show_legend)
g <- ggplot(d, aes(variable, value, color = !!sym(color_var), group = Geneid))
g + geom_point(show.legend = show_legend)
# Set color_var depending on plot type
color_var <- ifelse(plot_type == "dot", "Geneid", "variable")
# If genes are more than 10, set to plot to box
if(genes > 10) {
gene_labels <- FALSE; draw_lines = FALSE; plot_type = "box"; color_var = "variable"
if(plot_type == "dot"){ plot_type = "box" }
}
d <- df %>% dplyr::filter(Geneid %in% genes) %>% reshape2::melt() %>% dplyr::group_by(Geneid) %>% dplyr::mutate(label = ifelse(value == max(value), Geneid, NA))
g <- ggplot(d, aes(variable, value, color = !!sym(color_var), group = Geneid))
if(plot_type %in% c("dot", "dotplot")) { g <- g + geom_point(show.legend = show_legend) }
if(plot_type %in% c("dot", "dotplot")) { g + geom_text(show.legend = F, size = 0.25) }
if(gene_labels){
if(plot_type %in% c("dot", "dotplot")) { g + geom_text(show.legend = F, size = 0.25) }
else { g + geom_line(show.legend = F, size = 0.25) }
}
geom_text(aes(label = Geneid))
g + geom_text(aes(label = Geneid))
g <- ggplot(d, aes(variable, value, color = !!sym(color_var), group = Geneid))
if(plot_type %in% c("dot", "dotplot")) { g <- g + geom_point(show.legend = show_legend) }
geom_text(aes(label = Geneid))
if(plot_type %in% c("dot", "dotplot")) { g <- g + geom_point(show.legend = show_legend) }
if(plot_type %in% c("dot", "dotplot")) { g + geom_text(aes(label = Geneid)) }
g
g <- ggplot(d, aes(variable, value, color = !!sym(color_var), group = Geneid))
if(plot_type %in% c("dot", "dotplot")) { g <- g + geom_point(show.legend = show_legend) }
g
# Set color_var depending on plot type
color_var <- ifelse(plot_type == "dot", "Geneid", "variable")
# Set color_var depending on plot type
color_var <- ifelse(plot_type %in% c("dot", "dotplot"), "Geneid", "variable")
# If genes are more than 10, set to plot to box
if(genes > 10) {
gene_labels <- FALSE; draw_lines = FALSE; plot_type = "box"; color_var = "variable"
if(plot_type == "dot"){ plot_type = "box" }
}
d <- df %>% dplyr::filter(Geneid %in% genes) %>% reshape2::melt() %>% dplyr::group_by(Geneid) %>% dplyr::mutate(label = ifelse(value == max(value), Geneid, NA))
g <- ggplot(d, aes(variable, value, color = !!sym(color_var), group = Geneid))
g
g <- g + geom_point(show.legend = show_legend)
g
color_var
plot_type
plot_type   = "dot"
# Set color_var depending on plot type
color_var <- ifelse(plot_type %in% c("dot", "dotplot"), "Geneid", "variable")
# If genes are more than 10, set to plot to box
if(genes > 10) {
gene_labels <- FALSE; draw_lines = FALSE; plot_type = "box"; color_var = "variable"
if(plot_type == "dot"){ plot_type = "box" }
}
d <- df %>% dplyr::filter(Geneid %in% genes) %>% reshape2::melt() %>% dplyr::group_by(Geneid) %>% dplyr::mutate(label = ifelse(value == max(value), Geneid, NA))
g <- ggplot(d, aes(variable, value, color = !!sym(color_var), group = Geneid))
if(plot_type %in% c("dot", "dotplot")) { g <- g + geom_point(show.legend = show_legend) }
if(plot_type %in% c("dot", "dotplot")) { g + geom_text(aes(label = Geneid)) }
color_var
plot_type
lot_type   = "dot"
plot_type   = "dot"
# Set color_var depending on plot type
color_var <- ifelse(plot_type %in% c("dot", "dotplot"), "Geneid", "variable")
# If genes are more than 10, set to plot to box
if(genes > 10) {
gene_labels <- FALSE; draw_lines = FALSE; plot_type = "box"; color_var = "variable"
if(plot_type == "dot"){ plot_type = "box" }
}
d <- df %>% dplyr::filter(Geneid %in% genes) %>% reshape2::melt() %>% dplyr::group_by(Geneid) %>% dplyr::mutate(label = ifelse(value == max(value), Geneid, NA))
g <- ggplot(d, aes(variable, value, color = !!sym(color_var), group = Geneid))
if(plot_type %in% c("dot", "dotplot")) { g <- g + geom_point(show.legend = show_legend) }
else if(plot_type %in% c("box", "boxplot")) { g <- g + geom_boxplot(show.legend = show_legend) + geom_point(color = NA, show.legend = F) }
else if(plot_type %in% c("box-dot")) { g <- g + geom_boxplot(show.legend = show_legend) + geom_point(show.legend = F) }
if(gene_labels){
if(plot_type %in% c("dot", "dotplot")) { g + geom_text(aes(label = Geneid)) }
else { g + geom_line(show.legend = F, size = 0.25) }
}
g + geom_text(aes(label = Geneid))
g
color_var
genes > 10
genes
plot_type   = "dot"
# If genes is null, set genes to all genes
if(is.null(genes)) { genes <- df$Geneid }
# Set color_var depending on plot type
color_var <- ifelse(plot_type %in% c("dot", "dotplot"), "Geneid", "variable")
# If genes are more than 10, set to plot to box
if(length(genes) > 10) {
gene_labels <- FALSE; draw_lines = FALSE; plot_type = "box"; color_var = "variable"
if(plot_type == "dot"){ plot_type = "box" }
}
d <- df %>% dplyr::filter(Geneid %in% genes) %>% reshape2::melt() %>% dplyr::group_by(Geneid) %>% dplyr::mutate(label = ifelse(value == max(value), Geneid, NA))
g <- ggplot(d, aes(variable, value, color = !!sym(color_var), group = Geneid))
if(plot_type %in% c("dot", "dotplot")) { g <- g + geom_point(show.legend = show_legend) }
g
if(gene_labels){
if(plot_type %in% c("dot", "dotplot")) { g + geom_text(aes(label = Geneid)) }
else { g + geom_line(show.legend = F, size = 0.25) }
}
g + geom_text(aes(label = Geneid))
gene_labels
if(plot_type %in% c("dot", "dotplot")) { g + ggrepel::geom_text_repel(aes(label = Geneid)) }
if(plot_type %in% c("dot", "dotplot")) { g + ggrepel::geom_text_repel(aes(label = Geneid), size = label_size) }
if(plot_type %in% c("dot", "dotplot")) { g + ggrepel::geom_text_repel(aes(label = Geneid), size = label_size, show.legend = F) }
gene_labels = FALSE
g + ggrepel::geom_text_repel(aes(label = Geneid), size = label_size, show.legend = F)
gene_labels <- ifelse(!plot_type %in% c("dot", "dotplot"), "variable", gene_labels)
ifelse(!plot_type %in% c("dot", "dotplot"), "variable", gene_labels)
plot_type
gene_labels = TRUE
if((gene_labels)){ g + ggrepel::geom_text_repel(aes(label = Geneid), size = label_size, show.legend = F) }
if((gene_labels)){ g <- g + ggrepel::geom_text_repel(aes(label = Geneid), size = label_size, show.legend = F) }
if(plot_type %in% c("dot", "dotplot")) { g <- g + geom_line(aes(color = Geneid), show.legend = F, size = 0.25) }
else { g <- g + geom_line(show.legend = F, size = 0.25) }
g
if(plot_type %in% c("dot", "dotplot")) { g <- g + geom_line(show.legend = F, size = 0.25) }
g + geom_line(show.legend = F, size = 0.25, color = "gray60", alpha = 0.75)
# Initialize ggplot2
g <- ggplot(d, aes(variable, value, color = !!sym(color_var), group = Geneid))
# Set dots and/or boxplots
if(plot_type %in% c("dot", "dotplot")) { g <- g + geom_point(show.legend = show_legend) }
g + geom_line(show.legend = F, size = 0.25, color = "gray60", alpha = 0.75)
# Draw lines
if(draw_lines) {
if(plot_type %in% c("dot", "dotplot")) { g <- g + geom_line(show.legend = F, size = 0.25) }
else { g <- g + geom_line(show.legend = F, size = 0.25, color = "gray60", alpha = 0.75) }
}
# Format theme
g + ggpubr::theme_pubr
# Format theme
g + ggpubr::theme_pubr()
# Format dataframe
d <- df %>%
dplyr::filter(Geneid %in% genes) %>%
reshape2::melt(value.name = "Expr", variable.name = "Cond") %>%
dplyr::group_by(Geneid) %>%
dplyr::mutate(label = ifelse(value == max(value), Geneid, NA)) %>%
dplyr::ungroup()
# Initialize ggplot2
g <- ggplot(d, aes(Sample, Expr, color = !!sym(color_var), group = Geneid))
genes
# Format dataframe
d <- df %>%
dplyr::filter(Geneid %in% genes) %>%
reshape2::melt(value.name = "Expr", variable.name = "Cond") %>%
dplyr::group_by(Geneid) %>%
dplyr::mutate(label = ifelse(Expr == max(Expr), Geneid, NA)) %>%
dplyr::ungroup()
df
d
# Initialize ggplot2
g <- ggplot(d, aes(Sample, Expr, color = !!sym(color_var), group = Geneid))
# Set dots and/or boxplots
if(plot_type %in% c("dot", "dotplot")) { g <- g + geom_point(show.legend = show_legend) }
else if(plot_type %in% c("box", "boxplot")) { g <- g + geom_boxplot(show.legend = show_legend) + geom_point(color = NA, show.legend = F) }
else if(plot_type %in% c("box-dot")) { g <- g + geom_boxplot(show.legend = show_legend) + geom_point(show.legend = F) }
# Draw lines
if(draw_lines) {
if(plot_type %in% c("dot", "dotplot")) { g <- g + geom_line(show.legend = F, size = 0.25) }
else { g <- g + geom_line(show.legend = F, size = 0.25, color = "gray60", alpha = 0.75) }
}
# Draw gene labels only if gene_labels = T and boxplot
if((gene_labels)){ g <- g + ggrepel::geom_text_repel(aes(label = Geneid), size = label_size, show.legend = F) }
# Format theme
g + ggpubr::theme_pubr()
# Initialize ggplot2
g <- ggplot(d, aes(Cond, Expr, color = !!sym(color_var), group = Geneid))
# Set dots and/or boxplots
if(plot_type %in% c("dot", "dotplot")) { g <- g + geom_point(show.legend = show_legend) }
else if(plot_type %in% c("box", "boxplot")) { g <- g + geom_boxplot(show.legend = show_legend) + geom_point(color = NA, show.legend = F) }
else if(plot_type %in% c("box-dot")) { g <- g + geom_boxplot(show.legend = show_legend) + geom_point(show.legend = F) }
# Draw lines
if(draw_lines) {
if(plot_type %in% c("dot", "dotplot")) { g <- g + geom_line(show.legend = F, size = 0.25) }
else { g <- g + geom_line(show.legend = F, size = 0.25, color = "gray60", alpha = 0.75) }
}
# Draw gene labels only if gene_labels = T and boxplot
if((gene_labels)){ g <- g + ggrepel::geom_text_repel(aes(label = Geneid), size = label_size, show.legend = F) }
# Format theme
g + ggpubr::theme_pubr()
# Format theme
g + ggpubr::theme_pubr(legend = "right")
# Format theme
g +
ggpubr::theme_pubr(legend = "right") +
theme(legend.title = element_blank())
# Format theme
g +
ggpubr::theme_pubr(legend = "right", border = T, x.text.angle = 90) +
theme(legend.title = element_blank(),
axis.title = element_text(face = "plain"),
plot.title = element_text(face = "plain"),
plot.subtitle = element_text(face = "italic"))
# Format theme
g +
ggpubr::theme_pubr(legend = "right", border = T) +
theme(legend.title = element_blank(),
axis.title = element_text(face = "plain"),
plot.title = element_text(face = "plain"),
plot.subtitle = element_text(face = "italic"),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1))
# Format theme
g +
ggpubr::theme_pubr(legend = "right", border = T) +
theme(legend.title = element_blank(),
axis.title = element_text(face = "plain"),
plot.title = element_text(face = "plain"),
plot.subtitle = element_text(face = "italic"),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5))
title       = NULL
subtitle    = NULL
# Add titles
g + labs(x = "Condition", y = "Counts", title = title, subtitle = subtitle)
# Add titles
g <- g + labs(x = "Condition", y = "Counts", title = title, subtitle = subtitle)
# Format theme
g +
ggpubr::theme_pubr(legend = "right", border = T) +
theme(legend.title = element_blank(),
axis.title = element_text(face = "plain", hjust = .5),
plot.title = element_text(face = "plain", hjust = .5),
plot.subtitle = element_text(face = "italic", hjust = .5),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5))
title = "title"
caption <- nrow(d)
caption
# Format dataframe
df_filt <- df %>% dplyr::filter(Geneid %in% genes)
d <- df_filt %>%
reshape2::melt(value.name = "Expr", variable.name = "Cond") %>%
dplyr::group_by(Geneid) %>%
dplyr::mutate(label = ifelse(Expr == max(Expr), Geneid, NA)) %>%
dplyr::ungroup()
# Add titles
if(writeN) { caption <- nrow(df_filt) }
caption <- nrow(df_filt)
g + labs(x = "Condition", y = "Counts", title = title, subtitle = subtitle, caption = caption )
g + annotate(geom = "text", label = N, x = 1, y = min(d$Expr)
)
N <- paste("N=", nrow(df_filt), sep = ""); g + annotate(geom = "text", label = N, x = 1, y = min(d$Expr))
g <- g + labs(x = "Condition", y = "Counts", title = title, subtitle = subtitle)
stat_compare <- list(c("cond2_rep1", "cond1_rep2"))
g + ggpubr::stat_compare_means(method = "wilcox.test", comparisons = stat_compare)
# Format theme
g <- g +
ggpubr::theme_pubr(legend = "right", border = T) +
theme(legend.title = element_blank(),
axis.title = element_text(face = "plain", hjust = .5),
plot.title = element_text(face = "plain", hjust = .5),
plot.subtitle = element_text(face = "italic", hjust = .5),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5))
g
d
# Draw gene labels only if gene_labels = T and boxplot
if((gene_labels)){ g <- g + ggrepel::geom_text_repel(aes(label = label), size = label_size, show.legend = F) }
# Draw lines
if(draw_lines) {
if(plot_type %in% c("dot", "dotplot")) { g <- g + geom_line(show.legend = F, size = 0.25) }
else { g <- g + geom_line(show.legend = F, size = 0.25, color = "gray60", alpha = 0.75) }
}
# Initialize ggplot2
g <- ggplot(d, aes(Cond, Expr, color = !!sym(color_var), group = Geneid))
# Set dots and/or boxplots
if(plot_type %in% c("dot", "dotplot")) { g <- g + geom_point(show.legend = show_legend) }
else if(plot_type %in% c("box", "boxplot")) { g <- g + geom_boxplot(show.legend = show_legend) + geom_point(color = NA, show.legend = F) }
else if(plot_type %in% c("box-dot")) { g <- g + geom_boxplot(show.legend = show_legend) + geom_point(show.legend = F) }
# Draw lines
if(draw_lines) {
if(plot_type %in% c("dot", "dotplot")) { g <- g + geom_line(show.legend = F, size = 0.25) }
else { g <- g + geom_line(show.legend = F, size = 0.25, color = "gray60", alpha = 0.75) }
}
# Draw gene labels only if gene_labels = T and boxplot
if((gene_labels)){ g <- g + ggrepel::geom_text_repel(aes(label = label), size = label_size, show.legend = F) }
# Add titles
if(writeN) { N <- paste("N=", nrow(df_filt), sep = ""); g <- g + annotate(geom = "text", label = N, x = 1, y = min(d$Expr)) }
g <- g + labs(x = "Condition", y = "Counts", title = title, subtitle = subtitle)
# Format theme
g <- g +
ggpubr::theme_pubr(legend = "right", border = T) +
theme(legend.title = element_blank(),
axis.title = element_text(face = "plain", hjust = .5),
plot.title = element_text(face = "plain", hjust = .5),
plot.subtitle = element_text(face = "italic", hjust = .5),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5))
g
g <- g + geom_line(show.legend = F, size = 0.25)
g + geom_line(show.legend = F, size = 0.25)
# Initialize ggplot2
g <- ggplot(d, aes(Cond, Expr, color = !!sym(color_var), group = Geneid))
# Set dots and/or boxplots
if(plot_type %in% c("dot", "dotplot")) { g <- g + geom_point(show.legend = show_legend) }
draw_lines
draw_lines   = TRUE
# Draw lines
if(draw_lines) {
if(plot_type %in% c("dot", "dotplot")) { g <- g + geom_line(show.legend = F, size = 0.25) }
else { g <- g + geom_line(show.legend = F, size = 0.25, color = "gray60", alpha = 0.75) }
}
# Draw gene labels only if gene_labels = T and boxplot
if((gene_labels)){ g <- g + ggrepel::geom_text_repel(aes(label = label), size = label_size, show.legend = F) }
# Add titles
if(writeN) { N <- paste("N=", nrow(df_filt), sep = ""); g <- g + annotate(geom = "text", label = N, x = 1, y = min(d$Expr)) }
g <- g + labs(x = "Condition", y = "Counts", title = title, subtitle = subtitle)
# Format theme
g <- g +
ggpubr::theme_pubr(legend = "right", border = T) +
theme(legend.title = element_blank(),
axis.title = element_text(face = "plain", hjust = .5),
plot.title = element_text(face = "plain", hjust = .5),
plot.subtitle = element_text(face = "italic", hjust = .5),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5))
g
library(dplyr)
library(purrr)
peak_list <- list.files("../testdata", "peak", full.names = T, recursive = T) %>%
purrr::set_names(c("PeakX", "PeakY"))  %>%
purrr::map(~read.delim(.x))
if(!is.null(title)){
venn <- venn + labs(title = title, subtitle = subtitle) +
theme(plot.title = element_text(face = "bold", hjust = .5),
plot.subtitle = element_text(face = "italic", hjust = .5))
}
# Change strand values to accepted values (e.g. . to *)
peak_list <- peak_list %>% purrr::map(~dplyr::mutate(.x, strand = if_else(strand %in% c(".", "*", "\\.", "\\*"), "*", strand)))
# Get Venn Counts and the peaks in each set
x <- getVennCounts(peaks = peak_list, conds = peak_names, stranded = stranded)
require(ggvenn)
require(dplyr)
require(reshape2)
require(magrittr)
require(purrr)
require(tidyr)
# Check true number of overlaps for each region; convert stranded and percent to FALSE
if(true_overlaps & length(peak_list)==2) { stranded <- FALSE; percent  <- FALSE }
# Change strand values to accepted values (e.g. . to *)
peak_list <- peak_list %>% purrr::map(~dplyr::mutate(.x, strand = if_else(strand %in% c(".", "*", "\\.", "\\*"), "*", strand)))
# Get Venn Counts and the peaks in each set
x <- getVennCounts(peaks = peak_list, conds = peak_names, stranded = stranded)
peak_names = names(peak_list)
# Get Venn Counts and the peaks in each set
x <- getVennCounts(peaks = peak_list, conds = peak_names, stranded = stranded)
tranded <- FALSE; percent  <- FALSE
stranded <- FALSE; percent  <- FALSE
# Get Venn Counts and the peaks in each set
x <- getVennCounts(peaks = peak_list, conds = peak_names, stranded = stranded)
# Transform the matrix of the peaks in each set in order to plot the Venn
y <- x$matrix %>%
as_tibble() %>%
magrittr::set_colnames(c("Peak", paste("cond", 1:length(peak_list), sep = ""))) %>%
reshape2::melt() %>% mutate(value = if_else(value == 1, Peak, NULL)) %>%
tidyr::pivot_wider(names_from = "variable", values_from = "value") %>%
dplyr::select(-Peak) %>%
dplyr::as_tibble() %>%
as.list() %>%
purrr::set_names(peak_names) %>%
purrr::map(~na.omit(.x))
# Get Venn Counts and the peaks in each set
x <- getVennCounts(peaks = peak_list, conds = peak_names, stranded = stranded)
# Change strand values to accepted values (e.g. . to *)
peak_list <- peak_list %>% purrr::map(~dplyr::mutate(.x, strand = if_else(strand %in% c(".", "*", "\\.", "\\*"), "*", strand)))
# Get Venn Counts and the peaks in each set
x <- getVennCounts(peaks = peak_list, conds = peak_names, stranded = stranded)
# load plotmics
library(plotmics)
# Get Venn Counts and the peaks in each set
x <- getVennCounts(peaks = peak_list, conds = peak_names, stranded = stranded)
peak_list
getVennCounts
getVennCounts <- function(peaks,
conds = names(peaks),
conds_order = conds,
stranded = FALSE,
plot = FALSE){
# Load required packages
(require(dplyr, quietly = T))
(require(purrr, quietly = T))
(require(plyranges, quietly = T))
(require(magrittr, quietly = T))
(require(ChIPpeakAnno, quietly = T))
if(!is.list(peaks)){ stop("'peaks' must be a (named) list of dataframes with the columns 'seqnames', 'start' and 'end'.") }
else if(is.null(conds)){ stop("'conds' must a not-NULL character vector with the conditions of the data frames in 'peaks.") }
else if(length(peaks) != length(conds)){ stop("'peaks' and 'conds' must have the same length.") }
len <- length(peaks)
# Change strand values to accepted values (e.g. . to *)
peaks <- peaks %>% purrr::map(~dplyr::mutate(.x, strand = if_else(strand %in% c(".", "*", "\\.", "\\*"), "*", strand)))
# Set names of the elements in the list
peaks <- peaks %>% purrr::set_names(nm = conds)
# If stranded, separate...
if(!stranded){
overlaps <- suppressMessages(peaks %>%
purrr::map(~plyranges::as_granges(.x)) %>%
makeVennDiagram(Peaks = ., NameOfPeaks = conds, plot = plot, ignore.strand = !stranded))
overlaps <- overlaps$vennCounts
} else {
# Separate peaks by strand
peaks_plus     <- peaks %>% purrr::map(~dplyr::filter(.x, strand == "+"))
peaks_minus    <- peaks %>% purrr::map(~dplyr::filter(.x, strand == "-"))
peaks_nostrand <- peaks %>% purrr::map(~dplyr::filter(.x, strand %in% c(".", "*", "\\.", "\\*"))) %>% purrr::map(~dplyr::mutate(.x, strand = "*"))
# Overlap peaks by strand
overlaps_plus     <- suppressMessages(peaks_plus %>% purrr::map(~plyranges::as_granges(.x)) %>%
makeVennDiagram(Peaks = ., NameOfPeaks = conds, plot = plot))
overlaps_minus    <- suppressMessages(peaks_minus %>% purrr::map(~plyranges::as_granges(.x)) %>%
makeVennDiagram(Peaks = ., NameOfPeaks = conds, plot = plot))
overlaps_nostrand <- suppressMessages(peaks_nostrand %>% purrr::map(~plyranges::as_granges(.x)) %>%
makeVennDiagram(Peaks = ., NameOfPeaks = conds, plot = plot))
overlaps_plus     <- overlaps_plus$vennCounts
overlaps_minus    <- overlaps_minus$vennCounts
overlaps_nostrand <- overlaps_nostrand$vennCounts
overlaps <- overlaps_plus
for (i in 1:nrow(overlaps)){
overlaps[i,ncol(overlaps)] <- sum(overlaps_plus[i,ncol(overlaps)], overlaps_minus[i,ncol(overlaps)], overlaps_nostrand[i,ncol(overlaps)])
}
}
# Create matrix of overlapping peaks
matrix <- matrix(data = rep(0, len), ncol = len, byrow=T) %>% set_colnames(conds)
for(row in 1:nrow(overlaps)){
counts <- overlaps[row, len+1]
m <- matrix(rep(overlaps[row, 1:len], counts), ncol = len, byrow = T)
matrix <- rbind(matrix, m)
}
x <- matrix %>%
na.omit %>%
as.data.frame() %>%
dplyr::mutate(rowSum = rowSums(.)) %>%
dplyr::filter(rowSum != 0) %>%
dplyr::mutate(peak = paste("peak", 1:nrow(.), sep = "")) %>%
dplyr::select(peak, everything(), -rowSum)
return(list("matrix" = x, "vennCounts" = overlaps))
}
# Get Venn Counts and the peaks in each set
x <- getVennCounts(peaks = peak_list, conds = peak_names, stranded = stranded)
# Set default colors in case the number of specified colors
#   does not match the number elements in 'peak_list'
if(length(in_fill) != length(peak_list)) {
if(length(peak_list) == 2){ in_fill <- c("blue", "gold3") }
else if(length(peak_list) == 3){ in_fill <- c("blue", "gold3", "pink") }
else if(length(peak_list) == 4){ in_fill <- c("blue", "gold3", "pink", "green") }
else if(length(peak_list) == 5){ in_fill <- c("blue", "gold3", "pink", "green", "orange") }
}
# Transform the matrix of the peaks in each set in order to plot the Venn
y <- x$matrix %>%
as_tibble() %>%
magrittr::set_colnames(c("Peak", paste("cond", 1:length(peak_list), sep = ""))) %>%
reshape2::melt() %>% mutate(value = if_else(value == 1, Peak, NULL)) %>%
tidyr::pivot_wider(names_from = "variable", values_from = "value") %>%
dplyr::select(-Peak) %>%
dplyr::as_tibble() %>%
as.list() %>%
purrr::set_names(peak_names) %>%
purrr::map(~na.omit(.x))
# List of overlaps
overlaps <- list(overlaps1, overlaps2) %>% purrr::set_names(peak_names) %>% purrr::map(~as.data.frame(.x))
# Compute true number of overlaps and get overlapping peaks
peaks1 <- peak_list[[1]] %>% plyranges::as_granges();  peaks2 <- peak_list[[2]] %>% plyranges::as_granges()
overlaps1 <- plyranges::filter_by_overlaps(peaks1, peaks2); overlaps2 <- plyranges::filter_by_overlaps(peaks2, peaks1)
# List of overlaps
overlaps <- list(overlaps1, overlaps2) %>% purrr::set_names(peak_names) %>% purrr::map(~as.data.frame(.x))
overlaps
devtools::document()
pkgdown::build_home()
devtools::install_github("amitjavilaventura/plotmics")
plyranges::filter_by_overlaps(peaks1, peaks2)
library(dplyr)
library(purrr)
peak_list <- list.files("../testdata", "peak", full.names = T, recursive = T) %>%
purrr::set_names(c("PeakX", "PeakY"))  %>%
purrr::map(~read.delim(.x))
ggVennPeaks(peak_list = peak_list)
suppressPackageStartupMessages(require(ggvenn))
suppressPackageStartupMessages(require(dplyr))
suppressPackageStartupMessages(require(reshape2))
suppressPackageStartupMessages(require(magrittr))
suppressPackageStartupMessages(require(purrr))
suppressPackageStartupMessages(require(tidyr))
suppressPackageStartupMessages(require(plyranges))
# Change strand values to accepted values (e.g. . to *)
peak_list <- peak_list %>% purrr::map(~dplyr::mutate(.x, strand = if_else(strand %in% c(".", "*", "\\.", "\\*"), "*", strand)))
peak_list
# Compute true number of overlaps and get overlapping peaks
peaks1 <- peak_list[[1]] %>% plyranges::as_granges();  peaks2 <- peak_list[[2]] %>% plyranges::as_granges()
overlaps1 <- plyranges::filter_by_overlaps(peaks1, peaks2); overlaps2 <- plyranges::filter_by_overlaps(peaks2, peaks1)
peaks1
overlaps1
