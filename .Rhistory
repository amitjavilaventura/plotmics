# Remove labels from Venn diagram
venn$layers[[4]] <- NULL
# Annotate the unique peaks and overlaps in the Venn diagram
venn <- venn +
annotate("text", -.8, 0, label = as.character(aa), color = colorspace::darken(color[1], amount = 0.5), fontface = "bold", size = labsize) +
annotate("text", .8, 0, label = as.character(bb),  color = colorspace::darken(color[2], amount = 0.5), fontface = "bold", size = labsize) +
annotate("text", 0, 0.15, label = as.character(ab), color = colorspace::darken(color[1], amount = 0.5), fontface = "plain", size = labsize) +
annotate("text", 0, -0.15, label = as.character(ba), color = colorspace::darken(color[2], amount = 0.5), fontface = "plain", size = labsize)
# Return the Venn diagram
return(venn)
}
peak_list
peak_list <- list.files("../testdata", "peak", full.names = T, recursive = T) %>%
purrr::set_names(c("PeakX", "PeakY"))
peak_list
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4,
warning = FALSE, error = FALSE, message = FALSE)
devtools::load_all("..")
library(dplyr)
library(purrr)
peak_list <- list.files("../testdata", "peak", full.names = T, recursive = T) %>%
purrr::set_names(c("PeakX", "PeakY"))
# read the peak annotation into a list
peak_list <- list.files("../testdata", "peak", full.names = T, recursive = T) %>%
purrr::set_names(c("PeakX", "PeakY")) %>%
purrr::map(~read.delim(.x))
peaks <- peak_list %>% purrr::map(~read.delim(.x))
# read the peak annotation into a list
peak_list <- list.files("../testdata", "peak", full.names = T, recursive = T) %>%
purrr::set_names(c("PeakX", "PeakY"))
peaks <- peak_list %>% purrr::map(~read.delim(.x))
peaks <- peak_list %>% purrr::map(~read.delim(.x))
peak_list[[1]][1:5, 1:7]
# Example input. I read the regions to a list, but the list is not necessary.
peak_list <- list.files("../testdata", "peak", full.names = T, recursive = T) %>%
purrr::set_names(c("PeakX", "PeakY"))
peaks <- peak_list %>% purrr::map(~read.delim(.x))
peak_list[[1]][1:5, 1:5]
# Example input. I read the regions to a list, but the list is not necessary.
peak_list <- list.files("../testdata", "peak", full.names = T, recursive = T) %>%
purrr::set_names(c("PeakX", "PeakY"))
peaks <- peak_list %>% purrr::map(~read.delim(.x))
peaks[[1]][1:5, 1:5]
ggVennPeaks(a = peak_list[[1]], a = peak_list[[2]])
ggVennBed(a = peak_list[[1]], b = peak_list[[2]])
ggVennBed <- function(a,
b,
setnames = c("A", "B"),
stranded = T,
color    = c("blue", "gold3"),
namesize = 7,
labsize  = 5){
# Load required packages
suppressWarnings(require(dplyr, quietly = T, warn.conflicts = F))
suppressWarnings(require(bedtoolsr, quietly = T, warn.conflicts = F))
suppressWarnings(require(magrittr, quietly = T, warn.conflicts = F))
suppressWarnings(require(ggplot2, quietly = T, warn.conflicts = F))
suppressWarnings(require(ggvenn, quietly = T, warn.conflicts = F))
suppressWarnings(require(colorspace, quietly = T, warn.conflicts = F))
# Check that inputs are OK
tmpfile_a <- "a.tmp"
tmpfile_b <- "b.tmp"
if(!is.character(a)) {
if(is.data.frame(a)) {  write.table(a, tmpfile_a, quote = F, col.names = F, row.names = F, sep = "\t") }
else { stop("'a' must be a path to a BED file or a data frame") }
a <- tmpfile_a
}
if(!is.character(b)) {
if(is.data.frame(b)) { write.table(b, tmpfile_b, quote = F, col.names = F, row.names = F, sep = "\t") }
else { stop("'b' must be a path to a BED file or a data frame") }
b <- tmpfile_b
}
# Count total number of regions in A and B
aa <- read.delim(a, header = F) %>% nrow()
bb <- read.delim(b, header = F) %>% nrow()
# Remove temporary files
if(file.exists(tmpfile_a)) { file.remove(tmpfile_a) }
if(file.exists(tmpfile_b)) { file.remove(tmpfile_b) }
# Count the regions of A overlapping with B, and vicecersa
ab <- bedtoolsr::bt.intersect(a = a, b = b, s = stranded, u = T) %>% nrow()
ba <- bedtoolsr::bt.intersect(a = b, b = a, s = stranded, u = T) %>% nrow()
# Count the unique peaks in A and B
aa <- aa-ab
bb <- bb-ba
# Create a pseudo data for the backbone of the Venn diagram
data <- list(rep("A",2), rep("B",2)) %>% magrittr::set_names(setnames)
# Draw the Venn diagram
venn <- ggvenn::ggvenn(data, show_percentage = F)
# Remove labels from Venn diagram
venn$layers[[4]] <- NULL
# Annotate the unique peaks and overlaps in the Venn diagram
venn <- venn +
annotate("text", -.8, 0, label = as.character(aa), color = colorspace::darken(color[1], amount = 0.5), fontface = "bold", size = labsize) +
annotate("text", .8, 0, label = as.character(bb),  color = colorspace::darken(color[2], amount = 0.5), fontface = "bold", size = labsize) +
annotate("text", 0, 0.15, label = as.character(ab), color = colorspace::darken(color[1], amount = 0.5), fontface = "plain", size = labsize) +
annotate("text", 0, -0.15, label = as.character(ba), color = colorspace::darken(color[2], amount = 0.5), fontface = "plain", size = labsize)
# Return the Venn diagram
return(venn)
}
ggVennBed(a = peak_list[[1]], b = peak_list[[2]])
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4,
warning = FALSE, error = FALSE, message = FALSE)
devtools::load_all("..")
library(dplyr)
library(purrr)
peak_list <- list.files("../testdata", "peak", full.names = T, recursive = T) %>%
purrr::discard(~stringr::str_detect(string = .x, pattern = "tsv")) %>%
purrr::set_names(c("PeakX", "PeakY"))
# Example input. I read the regions to a list, but the list is not necessary.
peak_list <- list.files("../testdata", "peak", full.names = T, recursive = T) %>%
purrr::discard(~stringr::str_detect(string = .x, pattern = "bed")) %>%
purrr::set_names(c("PeakX", "PeakY"))
# Example input. I read the regions to a list, but the list is not necessary.
peak_list <- list.files("../testdata", "peak", full.names = T, recursive = T) %>%
purrr::discard(~stringr::str_detect(string = .x, pattern = "tsv")) %>%
purrr::set_names(c("PeakX", "PeakY"))
peak_list
peaks <- peak_list %>% purrr::map(~read.delim(.x))
peaks
# Example input. I read the regions to a list, but the list is not necessary.
peak_list <- list.files("../testdata", "peak", full.names = T, recursive = T) %>%
purrr::discard(~stringr::str_detect(string = .x, pattern = "tsv")) %>%
purrr::set_names(c("peaksX", "peaksY"))
peaks <- peak_list %>% purrr::map(~read.delim(.x))
peaks[[1]][1:5, 1:5]
peaks %>% purrr::map(~dplyr::arrange(.x, seqnames, start))
peaks %>% purrr::map(~dplyr::arrange(.x, seqnames, start)) %>% purrr::imap(~write.table(.x, file = paste(.y, "bed", sep = "."), quote = F, col.names = F, row.names = F, sep = "\t"))
# Example input. I read the regions to a list, but the list is not necessary.
peak_list <- list.files("../testdata", "peak", full.names = T, recursive = T) %>%
purrr::discard(~stringr::str_detect(string = .x, pattern = "tsv")) %>%
purrr::set_names(c("peaksX", "peaksY"))
peaks <- peak_list %>% purrr::map(~read.delim(.x))
peaks[[1]][1:5, 1:5]
peaks %>% purrr::map(~dplyr::arrange(.x, seqnames, start)) %>% purrr::imap(~write.table(.x, file = paste(.y, "bed", sep = "."), quote = F, col.names = F, row.names = F, sep = "\t"))
peaks %>% purrr::imap(~dplyr::arrange(.x, seqnames, start) %>% write.table(., file = paste(.y, "bed", sep = "."), quote = F, col.names = F, row.names = F, sep = "\t"))
peaks %>% purrr::imap(~dplyr::arrange(.x, seqnames, start)) %>% write.table(., file = paste(.y, "bed", sep = "."), quote = F, col.names = F, row.names = F, sep = "\t"))
peaks %>% purrr::imap(~dplyr::arrange(.x, seqnames, start))
peaks %>% purrr::imap(~dplyr::arrange(.x, seqnames, start) %>% dplyr::select(1:6) %>% dplyr::select(seqnames,start,end,peakID,width,strand)
%>% write.table(., file = paste(.y, "bed", sep = "."), quote = F, col.names = F, row.names = F, sep = "\t"))
peaks %>% purrr::imap(~dplyr::arrange(.x, seqnames, start) %>% dplyr::select(1:6) %>% dplyr::select(seqnames,start,end,peakID,width,strand))
peaks <- peaks %>% purrr::imap(~dplyr::arrange(.x, seqnames, start) %>% dplyr::select(1:6) %>% dplyr::select(seqnames,start,end,peakID,width,strand))
peaks$peaksX
peaks$peaksX %>% dplyr::mutate(strand = sample(x = c("+", "-"), size = 1000, replace = T))
peaks$peaksY
peaks$peaksY %>% dplyr::mutate(strand = sample(x = c("+", "-"), size = 93, replace = T))
peaks$peaksX %>% dplyr::mutate(strand = sample(x = c("+", "-"), size = 1000, replace = T))
peaks$peaksY %>% dplyr::mutate(strand = sample(x = c("+", "-"), size = 93, replace = T))
peaks <- peaks %>% purrr::imap(~dplyr::arrange(.x, seqnames, start) %>% dplyr::select(1:6) %>% dplyr::select(seqnames,start,end,peakID,width,strand))
peaks$peaksX %>% dplyr::mutate(strand = sample(x = c("+", "-"), size = 1000, replace = T)) %>%
write.table(., file = "../testdata/regionsX.bed", quote = F, col.names = F, row.names = F, sep = "\t")
peaks$peaksY %>% dplyr::mutate(strand = sample(x = c("+", "-"), size = 93, replace = T))%>%
write.table(., file = "../testdata/regionsY.bed", quote = F, col.names = F, row.names = F, sep = "\t")
# Example input. I read the regions to a list, but the list is not necessary.
peak_list <- list.files("../testdata", "regions", full.names = T, recursive = T) %>%
purrr::set_names(c("A", "B"))
list.files("../testdata", "regions", full.names = T, recursive = T)
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4,
warning = FALSE, error = FALSE, message = FALSE)
devtools::load_all("..")
library(dplyr)
library(purrr)
peak_list <- list.files("../testdata", "regions", full.names = T, recursive = T) %>%
purrr::discard(~stringr::str_detect(string = .x, pattern = "tsv")) %>%
purrr::set_names(c("PeakX", "PeakY"))
# Example input. I read the regions to a list, but the list is not necessary.
peak_list <- list.files("../testdata", "regions", full.names = T, recursive = T) %>%
purrr::discard(~stringr::str_detect(string = .x, pattern = "tsv")) %>%
purrr::set_names(c("A", "B"))
peaks <- peak_list %>% purrr::map(~read.delim(.x))
peaks
peaks <- peak_list %>% purrr::map(~read.delim(.x, header = F))
# Example input. I read the regions to a list, but the list is not necessary.
peak_list <- list.files("../testdata", "regions", full.names = T, recursive = T) %>%
purrr::discard(~stringr::str_detect(string = .x, pattern = "tsv")) %>%
purrr::set_names(c("A", "B"))
peaks <- peak_list %>% purrr::map(~read.delim(.x, header = F))
peaks[[1]][1:5, 1:5]
peaks[[1]][1:5, 1:6]
ggVennBed(a = peak_list[[1]], b = peak_list[[2]])
peak_list[[1]]
ggVennBed(a = "../testdata/regionsX.bed",  b = "../testdata/regionsY.bed")
# Example input.
regionsX_path = "../testdata/regionsX.bed"
regionsY_path = "../testdata/regionsY.bed"
regionsX = read.delim(regionsX_path, header = T)
regionsY = read.delim(regionsY_path, header = T)
head(regionsX)
regionsX = read.delim(regionsX_path, header = F)
regionsY = read.delim(regionsY_path, header = F)
head(regionsX)
ggVennBed(a = regionsX,  b = regionsY)
ggVennBed <- function(a,
b,
setnames = c("A", "B"),
stranded = T,
color    = c("blue", "gold3"),
namesize = 7,
labsize  = 5){
# Load required packages
suppressWarnings(require(dplyr, quietly = T, warn.conflicts = F))
suppressWarnings(require(bedtoolsr, quietly = T, warn.conflicts = F))
suppressWarnings(require(magrittr, quietly = T, warn.conflicts = F))
suppressWarnings(require(ggplot2, quietly = T, warn.conflicts = F))
suppressWarnings(require(ggvenn, quietly = T, warn.conflicts = F))
suppressWarnings(require(colorspace, quietly = T, warn.conflicts = F))
# Check that inputs are OK
tmpfile_a <- "a.tmp.bed"
tmpfile_b <- "b.tmp.bed"
if(!is.character(a)) {
if(is.data.frame(a)) {  write.table(a, tmpfile_a, quote = F, col.names = F, row.names = F, sep = "\t") }
else { stop("'a' must be a path to a BED file or a data frame") }
a <- tmpfile_a
}
if(!is.character(b)) {
if(is.data.frame(b)) { write.table(b, tmpfile_b, quote = F, col.names = F, row.names = F, sep = "\t") }
else { stop("'b' must be a path to a BED file or a data frame") }
b <- tmpfile_b
}
# Count total number of regions in A and B
aa <- read.delim(a, header = F) %>% nrow()
bb <- read.delim(b, header = F) %>% nrow()
# Count the regions of A overlapping with B, and vicecersa
ab <- bedtoolsr::bt.intersect(a = a, b = b, s = stranded, u = T) %>% nrow()
ba <- bedtoolsr::bt.intersect(a = b, b = a, s = stranded, u = T) %>% nrow()
# Count the unique peaks in A and B
aa <- aa-ab
bb <- bb-ba
# Create a pseudo data for the backbone of the Venn diagram
data <- list(rep("A",2), rep("B",2)) %>% magrittr::set_names(setnames)
# Draw the Venn diagram
venn <- ggvenn::ggvenn(data, show_percentage = F)
# Remove labels from Venn diagram
venn$layers[[4]] <- NULL
# Annotate the unique peaks and overlaps in the Venn diagram
venn <- venn +
annotate("text", -.8, 0, label = as.character(aa), color = colorspace::darken(color[1], amount = 0.5), fontface = "bold", size = labsize) +
annotate("text", .8, 0, label = as.character(bb),  color = colorspace::darken(color[2], amount = 0.5), fontface = "bold", size = labsize) +
annotate("text", 0, 0.15, label = as.character(ab), color = colorspace::darken(color[1], amount = 0.5), fontface = "plain", size = labsize) +
annotate("text", 0, -0.15, label = as.character(ba), color = colorspace::darken(color[2], amount = 0.5), fontface = "plain", size = labsize)
# Remove temporary files
if(file.exists(tmpfile_a)) { file.remove(tmpfile_a) }
if(file.exists(tmpfile_b)) { file.remove(tmpfile_b) }
# Return the Venn diagram
return(venn)
}
ggVennBed(a = regionsX,  b = regionsY)
devtools::document()
devtools::document()
pkgdown::build_site()
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4,
warning = FALSE, error = FALSE, message = FALSE)
devtools::load_all("..")
library(dplyr)
library(purrr)
peak_list <- list.files("../testdata", "regions", full.names = T, recursive = T) %>%
purrr::discard(~stringr::str_detect(string = .x, pattern = "tsv")) %>%
purrr::set_names(c("PeakX", "PeakY"))
ggVennBed <- function(a,
b,
setnames = c("A", "B"),
stranded = T,
color    = c("blue", "gold3"),
namesize = 7,
labsize  = 5){
# Load required packages
suppressWarnings(require(dplyr, quietly = T, warn.conflicts = F))
suppressWarnings(require(bedtoolsr, quietly = T, warn.conflicts = F))
suppressWarnings(require(magrittr, quietly = T, warn.conflicts = F))
suppressWarnings(require(ggplot2, quietly = T, warn.conflicts = F))
suppressWarnings(require(ggvenn, quietly = T, warn.conflicts = F))
suppressWarnings(require(colorspace, quietly = T, warn.conflicts = F))
# Check that inputs are OK
tmpfile_a <- "a.tmp.bed"
tmpfile_b <- "b.tmp.bed"
if(!is.character(a)) {
if(is.data.frame(a)) {  write.table(a, tmpfile_a, quote = F, col.names = F, row.names = F, sep = "\t") }
else { stop("'a' must be a path to a BED file or a data frame") }
a <- tmpfile_a
}
if(!is.character(b)) {
if(is.data.frame(b)) { write.table(b, tmpfile_b, quote = F, col.names = F, row.names = F, sep = "\t") }
else { stop("'b' must be a path to a BED file or a data frame") }
b <- tmpfile_b
}
# Count total number of regions in A and B
aa <- read.delim(a, header = F) %>% nrow()
bb <- read.delim(b, header = F) %>% nrow()
# Count the regions of A overlapping with B, and vicecersa
ab <- bedtoolsr::bt.intersect(a = a, b = b, s = stranded, u = T) %>% nrow()
ba <- bedtoolsr::bt.intersect(a = b, b = a, s = stranded, u = T) %>% nrow()
# Count the unique peaks in A and B
aa <- aa-ab
bb <- bb-ba
# Create a pseudo data for the backbone of the Venn diagram
data <- list(rep("A",2), rep("B",2)) %>% magrittr::set_names(setnames)
# Draw the Venn diagram
venn <- ggvenn::ggvenn(data, show_percentage = F)
# Remove labels from Venn diagram
venn$layers[[4]] <- NULL
# Annotate the unique peaks and overlaps in the Venn diagram
venn <- venn +
scale_x_discrete(expand = c(0,0.5)) +
scale_y_discrete(expand = c(0,0.5)) +
annotate("text", -.8, 0, label = as.character(aa), color = colorspace::darken(color[1], amount = 0.5), fontface = "bold", size = labsize) +
annotate("text", .8, 0, label = as.character(bb),  color = colorspace::darken(color[2], amount = 0.5), fontface = "bold", size = labsize) +
annotate("text", 0, 0.15, label = as.character(ab), color = colorspace::darken(color[1], amount = 0.5), fontface = "plain", size = labsize) +
annotate("text", 0, -0.15, label = as.character(ba), color = colorspace::darken(color[2], amount = 0.5), fontface = "plain", size = labsize)
# Remove temporary files
if(file.exists(tmpfile_a)) { file.remove(tmpfile_a) }
if(file.exists(tmpfile_b)) { file.remove(tmpfile_b) }
# Return the Venn diagram
return(venn)
}
# Example input.
regionsX_path = "../testdata/regionsX.bed"
regionsY_path = "../testdata/regionsY.bed"
regionsX = read.delim(regionsX_path, header = F)
regionsY = read.delim(regionsY_path, header = F)
head(regionsX)
ggVennBed(a = regionsX_path,  b = regionsY_path)
ggVennBed(a = regionsX_path,  b = regionsY_path) +
ggVennBed(a = regionsX_path,  b = regionsY_path) /
ggVennBed(a = regionsX_path,  b = regionsY_path)
library(patchwork)
ggVennBed(a = regionsX,  b = regionsY)
ggVennBed(a = regionsX_path,  b = regionsY_path) +
ggVennBed(a = regionsX_path,  b = regionsY_path) /
ggVennBed(a = regionsX_path,  b = regionsY_path)
```{r fig.height=7, fig.width=7}
ggVennBed(a = regionsX_path,  b = regionsY_path) +
ggVennBed(a = regionsX_path,  b = regionsY_path) /
ggVennBed(a = regionsX_path,  b = regionsY_path)
ggVennBed(a = regionsX_path,  b = regionsY_path) /
(ggVennBed(a = regionsX_path,  b = regionsY_path) +
ggVennBed(a = regionsX_path,  b = regionsY_path) )
#CC#
layout <- "
AABB
#CC#
#CC#
"
ggVennBed(a = regionsX_path,  b = regionsY_path) /
(ggVennBed(a = regionsX_path,  b = regionsY_path) +
ggVennBed(a = regionsX_path,  b = regionsY_path) ) %>%
patchwork::wrap_plots(design = layout)
list(
ggVennBed(a = regionsX_path,  b = regionsY_path),
ggVennBed(a = regionsX_path,  b = regionsY_path),
ggVennBed(a = regionsX_path,  b = regionsY_path) ) %>%
patchwork::wrap_plots(design = layout)
#CC#
layout <- "
AABB
AABB
#CC#
#CC#
"
list(
ggVennBed(a = regionsX_path,  b = regionsY_path),
ggVennBed(a = regionsX_path,  b = regionsY_path),
ggVennBed(a = regionsX_path,  b = regionsY_path) ) %>%
patchwork::wrap_plots(design = layout)
devtools::document()
pkgdown::build_article(name = "13-ggVennBed")
pkgdown::build_site()
knitr::opts_chunk$set(echo = TRUE, warning = F, error = F, message = F,
fig.align = "center", fig.width = 6, fig.height = 4)
devtools::load_all("..")
library(dplyr)
chrom_sizes = "../testdata/mm10.chrom.sizes"
cyto_bands  = "../testdata/mm10.cytoBand.txt"
regions_list <- list("Regions1" = "../testdata/mm10.regions.tsv",
"Regions2" = "../testdata/mm10.regions2.tsv",
"Regions3" = "../testdata/mm10.regions3.tsv")
plotmics::chromRegions(chrom_sizes = chrom_sizes, regions_list = regions_list)
chromRegions(chrom_sizes = "../testdata/mm10.chrom.sizes", regions_list = regions_list)
pkgdown::build_site()
knitr::opts_chunk$set(echo = TRUE, warning = F, error = F, message = F,
fig.align = "center", fig.width = 6, fig.height = 4)
devtools::load_all("..")
library(dplyr)
chrom_sizes = "../testdata/mm10.chrom.sizes"
cyto_bands  = "../testdata/mm10.cytoBand.txt"
regions_list <- list("Regions1" = "../testdata/mm10.regions.tsv",
"Regions2" = "../testdata/mm10.regions2.tsv",
"Regions3" = "../testdata/mm10.regions3.tsv")
plotmics::chromRegions(chrom_sizes = chrom_sizes, regions_list = regions_list)
# load plotmics
library(plotmics)
chrom_sizes = "../testdata/mm10.chrom.sizes"
chrom_sizes %>% read.delim(header = F) %>% head()
regions_list <- list("Regions1" = "../testdata/mm10.regions.tsv",
"Regions2" = "../testdata/mm10.regions2.tsv",
"Regions3" = "../testdata/mm10.regions3.tsv")
regions_list[[1]] %>% read.delim(header = F) %>% head()
chromRegions(chrom_sizes = "../testdata/mm10.chrom.sizes", regions_list = regions_list)
# Read the data
chrom_sizes = "../testdata/mm10.chrom.sizes"%>% read.delim(header = F)
regions = regions_list %>% purrr::map(~read.delim(.x, header = F))
chromRegions(chrom_sizes = chrom_sizes, regions_list = regions)
chromRegions(chrom_sizes  = "../testdata/mm10.chrom.sizes",
regions_list = regions_list,
chr_order    = c(1,3,4,2,5,6,7,9,8,19,11,10,12,13,15,14,16,17,18,"X","Y","M", "MT") )
chromRegions(chrom_sizes  = "../testdata/mm10.chrom.sizes",
regions_list = regions_list,
chr_exclude  = c("\\."))
chromRegions(chrom_sizes  = "../testdata/mm10.chrom.sizes",
regions_list = regions_list,
chr_exclude  = c(" "))
chromRegions(chrom_sizes  = "../testdata/mm10.chrom.sizes",
regions_list = regions_list,
coord_flip   = T)
chromRegions(chrom_sizes  = "../testdata/mm10.chrom.sizes",
regions_list = regions_list,
draw_points  = F)
chromRegions(chrom_sizes  = "../testdata/mm10.chrom.sizes",
regions_list = regions_list,
colors       = c("Black", "Yellow", "Green"))
chromRegions(chrom_sizes   = "../testdata/mm10.chrom.sizes",
regions_list  = regions_list,
colors        = c("Darkgreen", "Darkred"),
color_by      = "strand")
# Read and format regions file to have strand as "."
regions_no_strand <- list("Regions1" = read.delim("../testdata/mm10.regions.tsv", header = F) %>% dplyr::mutate(V6 = "."))
# Draw the plot
chromRegions(chrom_sizes   = "../testdata/mm10.chrom.sizes",
regions_list  = regions_no_strand,
color_by      = "strand",
colors        = c("Gold3", "Darkgreen"))
chromRegions(chrom_sizes   = "../testdata/mm10.chrom.sizes",
regions_list  = regions_list,
title         = "This is a title",
subtitle      = "This is a subtitle")
chromRegions(chrom_sizes   = "../testdata/mm10.chrom.sizes",
regions_list  = regions_list,
xlab          = NULL,
ylab          = "Position in the chromosome")
chromRegions(chrom_sizes   = "../testdata/mm10.chrom.sizes",
regions_list  = regions_list,
caption       = "This is a caption")
chromRegions(chrom_sizes   = "../testdata/mm10.chrom.sizes",
regions_list  = regions_list,
caption       = TRUE)
chromRegions(chrom_sizes   = "../testdata/mm10.chrom.sizes",
regions_list  = regions_list,
legend        = "right")
chromRegions(chrom_sizes   = "../testdata/mm10.chrom.sizes",
regions_list  = regions_list,
legend        = "none")
chromRegions(chrom_sizes   = "../testdata/mm10.chrom.sizes",
regions_list  = regions_list,
size_y_text   = 10)
chromRegions(chrom_sizes   = "../testdata/mm10.chrom.sizes",
regions_list  = regions_list,
y_text_size   =  10)
pkgdown::build_site()
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4,
warning = FALSE, error = FALSE, message = FALSE)
devtools::load_all("..")
library(dplyr)
library(purrr)
peak_list <- list.files("../testdata", "regions", full.names = T, recursive = T) %>%
purrr::discard(~stringr::str_detect(string = .x, pattern = "tsv")) %>%
purrr::set_names(c("PeakX", "PeakY"))
# Example input.
regionsX_path = "../testdata/regionsX.bed"
regionsY_path = "../testdata/regionsY.bed"
regionsX = read.delim(regionsX_path, header = F)
regionsY = read.delim(regionsY_path, header = F)
head(regionsX)
suppressWarnings(require(dplyr, quietly = T, warn.conflicts = F))
suppressWarnings(require(bedtoolsr, quietly = T, warn.conflicts = F))
suppressWarnings(require(magrittr, quietly = T, warn.conflicts = F))
suppressWarnings(require(ggplot2, quietly = T, warn.conflicts = F))
suppressWarnings(require(ggvenn, quietly = T, warn.conflicts = F))
suppressWarnings(require(colorspace, quietly = T, warn.conflicts = F))
a = regionsX_path
b = regionsY_path
stranded = T
setnames = c("A", "B")
color    = c("blue", "gold3")
namesize = 7
labsize  = 5
# Count total number of regions in A and B
aa <- read.delim(a, header = F) %>% nrow()
# Example input.
regionsX_path = "testdata/regionsX.bed"
regionsY_path = "testdata/regionsY.bed"
b = regionsY_path
a = regionsX_path
# Count total number of regions in A and B
aa <- read.delim(a, header = F) %>% nrow()
bb <- read.delim(b, header = F) %>% nrow()
aa
bb
bedtoolsr::bt.intersect(a = a, b = b, s = stranded, u = T)
# Count the regions of A overlapping with B, and vicecersa
ab <- bedtoolsr::bt.intersect(a = a, b = b, s = stranded, u = T) %>% nrow()
ba <- bedtoolsr::bt.intersect(a = b, b = a, s = stranded, u = T) %>% nrow()
stranded
# Count the regions of A overlapping with B, and vicecersa
ab <- bedtoolsr::bt.intersect(a = a, b = b, s = stranded, u = T) %>% nrow()
ba <- bedtoolsr::bt.intersect(a = b, b = a, s = stranded, u = T) %>% nrow()
ba
ab
stranded = F
stranded
# Count the regions of A overlapping with B, and vicecersa
ab <- bedtoolsr::bt.intersect(a = a, b = b, s = stranded, u = T) %>% nrow()
ab
ba <- bedtoolsr::bt.intersect(a = b, b = a, s = stranded, u = T) %>% nrow()
ba
