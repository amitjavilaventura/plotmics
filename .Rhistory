geom_text(aes(label = round(value, 0)), size = 3) +
# Split rows by ID, set scales and space to free
ggh4x::facet_grid2(rows = vars(Geneid), scales = "free_y", space = "free") +
# Format the legend (colorbar)
scale_fill_gradient(low = hm_legend_colors[1], high = hm_legend_colors[2], limits = hm_legend_limits, breaks = hm_legend_breaks, oob = scales::squish,
guide = guide_colorbar(title = hm_legend_title, title.position = "left", frame.colour = "black", barheight = unit(hm_legend_size[1], "mm"),
barwidth = unit(hm_legend_size[2], "mm"), frame.linewidth = 1.5, ticks.colour = NA,
title.theme = element_text(angle = 90, hjust = 0.5,  vjust = 0.5, size = 8))) +
ggmitji::theme_custom(legend = "left", x.text.angle = 90, x.text.hjust = 1, x.text.vjust = .5, title.face = "italic", title.size = 9) +
ggmitji::rm_strips() +
scale_x_discrete(expand = c(0,0)) + scale_y_discrete(expand = c(0,0))
expr_hm
expr_hm
## Draw heatmap
expr_hm <- expr_df %>%
ggplot(aes(variable, Geneid, fill = value)) +
geom_tile(color = "gray") +
# Write values in each cell
geom_text(aes(label = round(value, 0)), size = 3) +
# Split rows by ID, set scales and space to free
ggh4x::facet_grid2(rows = vars(Geneid), scales = "free_y", space = "free") +
# Format the legend (colorbar)
scale_fill_gradient(low = hm_legend_colors[1], high = hm_legend_colors[2], limits = hm_legend_limits, breaks = hm_legend_breaks, oob = scales::squish,
guide = guide_colorbar(title = hm_legend_title, title.position = "left", frame.colour = "black", barheight = unit(hm_legend_size[1], "mm"),
barwidth = unit(hm_legend_size[2], "mm"), frame.linewidth = 1.5, ticks.colour = NA,
title.theme = element_text(angle = 90, hjust = 0.5,  vjust = 0.5, size = 8))) +
ggmitji::theme_custom(legend = "left", x.text.angle = 90, x.text.hjust = 1, x.text.vjust = .5, title.face = "italic", title.size = 9) +
ggmitji::rm_strips() +
scale_x_discrete(expand = c(0,0)) + scale_y_discrete(expand = c(0,0)) +
labs(x = NULL, y = NULL)
expr_hm
expr_hm
xxx <- function(expr = normcounts_s0,
expr_sense = normcounts_s1,
expr_antisense = normcounts_s2,
expr_cols        = c("cond1", "cond2", "cond3"),
hm_value_round   = 0,
hm_value_size    = 3,
hm_value_color   = "black",
hm_legend_colors = c("white", "cornflowerblue"),
hm_legend_limits = c(0,1e6),
hm_legend_breaks = seq(0,1e6, 1e5),
hm_legend_title = "Counts",
hm_legend_size  = c(40, 7),
bar_pos         = "fill",
bar_xlab        = NULL,
combine_plots   = T){
if(is.null(expr_cols)) { expr_cols <- colnames(expr)[which(colnames(expr) != "Geneid")] }
# Heatmap - ALL reads regardless the strand -----
## Format expression dataframe, select desired cols and reshape it
expr_df <- expr %>%
dplyr::select(Geneid, expr_cols) %>%
reshape2::melt()
## Draw heatmap
expr_hm <- expr_df %>%
ggplot(aes(variable, Geneid, fill = value)) +
geom_tile(color = "gray") +
# Write values in each cell
geom_text(aes(label = round(value, hm_value_round)), size = hm_value_size, color = hm_value_color) +
# Split rows by ID, set scales and space to free
ggh4x::facet_grid2(rows = vars(Geneid), scales = "free_y", space = "free") +
# Format the legend (colorbar)
scale_fill_gradient(low = hm_legend_colors[1], high = hm_legend_colors[2], limits = hm_legend_limits, breaks = hm_legend_breaks, oob = scales::squish,
guide = guide_colorbar(title = hm_legend_title, title.position = "left", frame.colour = "black", barheight = unit(hm_legend_size[1], "mm"),
barwidth = unit(hm_legend_size[2], "mm"), frame.linewidth = 1.5, ticks.colour = NA,
title.theme = element_text(angle = 90, hjust = 0.5,  vjust = 0.5, size = 8))) +
# Format theme, remove facet strips, remove whitespace between bars and panel border, and remove axis labels
ggmitji::theme_custom(legend = "left", x.text.angle = 90, x.text.hjust = 1, x.text.vjust = .5, title.face = "italic", title.size = 9) +
ggmitji::rm_strips() +
scale_x_discrete(expand = c(0,0)) + scale_y_discrete(expand = c(0,0)) +
labs(x = NULL, y = NULL)
# Barplot - Proportion of sense and antisense counts -----
## Format the counts data frames with sense and antisense
## Make list and set names to the list
expr_strand <- list(expr_sense, expr_antisense) %>%
purrr::set_names(c("Sense", "Antisense")) %>%
# Retain the desired columns and create a column for sense antisense
purrr::imap(~dplyr::select(.x, Geneid, expr_cols) %>% dplyr::mutate(sense = .y)) %>%
# Bind lists by rows
# Reshape the resulting dataframe
dplyr::bind_rows() %>%
unique() %>%
reshape2::melt()
## Draw horizontal barplot
expr_strand_barplot <-  expr_strand %>%
ggplot(aes(y = variable, x = value, fill = sense)) +
geom_col(position = bar_pos, color = "black") +
# Split rows by ID, then put the strips at the left side
ggh4x::facet_grid2(rows = vars(Geneid), switch = "y") +
# Customize labs, theme, position of the Y axis and remove strips
labs(x = bar_xlab, y = NULL, title = NULL) +
ggmitji::theme_custom(legend = "right", x.text.angle = 90, x.text.hjust = 1, x.text.vjust = .5, title.face = "italic", axis.title.face = "plain", vgrid.major = .3, vgrid.minor = .3) +
scale_y_discrete(guide = guide_axis(position = "right")) +
ggmitji::rm_strips()
}
xxx()
require(patchwork)
## Draw heatmap
expr_heatmap <- expr_df %>%
ggplot(aes(variable, Geneid, fill = value)) +
geom_tile(color = "gray") +
# Write values in each cell
geom_text(aes(label = round(value, hm_value_round)), size = hm_value_size, color = hm_value_color) +
# Split rows by ID, set scales and space to free
ggh4x::facet_grid2(rows = vars(Geneid), scales = "free_y", space = "free") +
# Format the legend (colorbar)
scale_fill_gradient(low = hm_legend_colors[1], high = hm_legend_colors[2], limits = hm_legend_limits, breaks = hm_legend_breaks, oob = scales::squish,
guide = guide_colorbar(title = hm_legend_title, title.position = "left", frame.colour = "black", barheight = unit(hm_legend_size[1], "mm"),
barwidth = unit(hm_legend_size[2], "mm"), frame.linewidth = 1.5, ticks.colour = NA,
title.theme = element_text(angle = 90, hjust = 0.5,  vjust = 0.5, size = 8))) +
# Format theme, remove facet strips, remove whitespace between bars and panel border, and remove axis labels
ggmitji::theme_custom(legend = "left", x.text.angle = 90, x.text.hjust = 1, x.text.vjust = .5, title.face = "italic", title.size = 9) +
ggmitji::rm_strips() +
scale_x_discrete(expand = c(0,0)) + scale_y_discrete(expand = c(0,0)) +
labs(x = NULL, y = NULL)
expr_heatmap +
expr_strand_barplot
final_plot <-
expr_heatmap+ggmitji::rm_strips() +
expr_strand_barplot+ggmitji::rm_strips() +
patchwork::plot_layout(design = "AAAB") +
patchwork::plot_annotation(title = "piRNA abundance in TE subclasses", theme = theme(plot.title = element_text(face = "italic",  size = 9, hjust = .5)))
xxx <- function(expr = normcounts_s0,
expr_sense = normcounts_s1,
expr_antisense = normcounts_s2,
expr_cols        = c("cond1", "cond2", "cond3"),
hm_value_round   = 0,
hm_value_size    = 3,
hm_value_color   = "black",
hm_legend_colors = c("white", "cornflowerblue"),
hm_legend_limits = c(0,1e6),
hm_legend_breaks = seq(0,1e6, 1e5),
hm_legend_title = "Counts",
hm_legend_size  = c(40, 7),
bar_pos         = "fill",
bar_xlab        = NULL,
combine_plots   = T){
if(is.null(expr_cols)) { expr_cols <- colnames(expr)[which(colnames(expr) != "Geneid")] }
# Heatmap - ALL reads regardless the strand -----
## Format expression dataframe, select desired cols and reshape it
expr_df <- expr %>%
dplyr::select(Geneid, expr_cols) %>%
reshape2::melt()
## Draw heatmap
expr_heatmap <- expr_df %>%
ggplot(aes(variable, Geneid, fill = value)) +
geom_tile(color = "gray") +
# Write values in each cell
geom_text(aes(label = round(value, hm_value_round)), size = hm_value_size, color = hm_value_color) +
# Split rows by ID, set scales and space to free
ggh4x::facet_grid2(rows = vars(Geneid), scales = "free_y", space = "free") +
# Format the legend (colorbar)
scale_fill_gradient(low = hm_legend_colors[1], high = hm_legend_colors[2], limits = hm_legend_limits, breaks = hm_legend_breaks, oob = scales::squish,
guide = guide_colorbar(title = hm_legend_title, title.position = "left", frame.colour = "black", barheight = unit(hm_legend_size[1], "mm"),
barwidth = unit(hm_legend_size[2], "mm"), frame.linewidth = 1.5, ticks.colour = NA,
title.theme = element_text(angle = 90, hjust = 0.5,  vjust = 0.5, size = 8))) +
# Format theme, remove facet strips, remove whitespace between bars and panel border, and remove axis labels
ggmitji::theme_custom(legend = "left", x.text.angle = 90, x.text.hjust = 1, x.text.vjust = .5, title.face = "italic", title.size = 9) +
scale_x_discrete(expand = c(0,0)) + scale_y_discrete(expand = c(0,0)) +
labs(x = NULL, y = NULL)
# Barplot - Proportion of sense and antisense counts -----
## Format the counts data frames with sense and antisense
## Make list and set names to the list
expr_strand <- list(expr_sense, expr_antisense) %>%
purrr::set_names(c("Sense", "Antisense")) %>%
# Retain the desired columns and create a column for sense antisense
purrr::imap(~dplyr::select(.x, Geneid, expr_cols) %>% dplyr::mutate(sense = .y)) %>%
# Bind lists by rows
# Reshape the resulting dataframe
dplyr::bind_rows() %>%
unique() %>%
reshape2::melt()
## Draw horizontal barplot
expr_strand_barplot <-  expr_strand %>%
ggplot(aes(y = variable, x = value, fill = sense)) +
geom_col(position = bar_pos, color = "black") +
# Split rows by ID, then put the strips at the left side
ggh4x::facet_grid2(rows = vars(Geneid), switch = "y") +
# Customize labs, theme, position of the Y axis and remove strips
labs(x = bar_xlab, y = NULL, title = NULL) +
ggmitji::theme_custom(legend = "right", x.text.angle = 90, x.text.hjust = 1, x.text.vjust = .5, title.face = "italic", axis.title.face = "plain", vgrid.major = .3, vgrid.minor = .3) +
scale_y_discrete(guide = guide_axis(position = "right"))
# Combine plots or not -----
if(combine_plots){
# Load patchwork
require(patchwork)
# Combine plots
final_plot <-
expr_heatmap+ggmitji::rm_strips() +
expr_strand_barplot+ggmitji::rm_strips() +
patchwork::plot_layout(design = "AAAB") +
patchwork::plot_annotation(title = "piRNA abundance in TE subclasses", theme = theme(plot.title = element_text(face = "italic",  size = 9, hjust = .5)))
# Return plot
return(final_plot)
} else {
return(list(expr_heatmap, expr_strand_barplot))
}
}
xxx()
xxx(combine_plots = F)
xxx(bar_pos = "stack")
expr_sense + expr_antisense
expr_sense %>% tibble::column_to_rownames("Geneid") + expr_antisense
expr_sense %>% tibble::column_to_rownames("Geneid") + expr_antisense %>% tibble::column_to_rownames("Geneid")
(expr_sense %>% tibble::column_to_rownames("Geneid") %>% dplyr::arrange(Geneid)) + (expr_antisense %>% tibble::column_to_rownames("Geneid") %>%  dplyr::arrange(Geneid))
(expr_sense %>%  dplyr::arrange(Geneid) %>% tibble::column_to_rownames("Geneid")) + (expr_antisense %>%  dplyr::arrange(Geneid) %>% tibble::column_to_rownames("Geneid"))
list(normcounts_s0,normcounts_s1,normcounts_s2) %>% purrr::set_names(c("NoStrand", "Sense", "Antisense"))
list(normcounts_s0,normcounts_s1,normcounts_s2) %>% purrr::set_names(c("NoStrand", "Sense", "Antisense")) %>% openxlsx::write.xlsx(x = .x, file = "future/norm_counts_sense_antisense.xlsx", overwrite = T)
list(normcounts_s0,normcounts_s1,normcounts_s2) %>% purrr::set_names(c("NoStrand", "Sense", "Antisense")) %>% openxlsx::write.xlsx(x = ., file = "future/norm_counts_sense_antisense.xlsx", overwrite = T)
openxlsx::read.xlsx(xlsxFile = "future/norm_counts_sense_antisense.xlsx", sheet = "Antisense")
expr_heatmap_bar <- function(expr,
expr_sense,
expr_antisense,
expr_cols        = c("cond1", "cond2", "cond3"),
hm_value_round   = 0,
hm_value_size    = 3,
hm_value_color   = "black",
hm_legend_colors = c("white", "cornflowerblue"),
hm_legend_limits = c(0,1e6),
hm_legend_breaks = seq(0,1e6, 1e5),
hm_legend_title = "Counts",
hm_legend_size  = c(40, 7),
bar_pos         = "fill",
bar_xlab        = NULL,
combine_plots   = T,
plot_title      = NULL){
# Load packages
require(dplyr)
require(reshape2)
require(purrr)
require(ggh4x)
require(ggplot2)
require(ggmitji)
# Check that inputs are OK
if(!is.null(expr) & !is.data.frame(expr)) { stop("'expr' should be NULL or a data.frame with Geneid and expression values.") }
if(!is.data.frame(expr_sense)) { stop("'expr_sense' should be a data.frame with Geneid and expression values.") }
if(!is.data.frame(expr_antisense)) { stop("'expr_antisense' should be a data.frame with Geneid and expression values.") }
if(!"Geneid" %in% colnames(expr_sense)){ stop("The column names of the expression data.frames should be equal between them and have a Geneid column") }
if(is.null(expr_cols)) { expr_cols <- colnames(expr)[which(colnames(expr) != "Geneid")] }
if(is.null(expr)) {
require(tibble)
expr <- (expr_sense %>%  dplyr::arrange(Geneid) %>% tibble::column_to_rownames("Geneid")) + (expr_antisense %>%  dplyr::arrange(Geneid) %>% tibble::column_to_rownames("Geneid"))
}
if(colnames(expr) != colnames(expr_sense)) { stop("The column names of the expression data.frames should be equal between them and have a Geneid column") }
if(colnames(expr) != colnames(expr_antisense)) { stop("The column names of the expression data.frames should be equal between them and have a Geneid column") }
# Heatmap - ALL reads regardless the strand -----
## Format expression dataframe, select desired cols and reshape it
expr_df <- expr %>%
dplyr::select(Geneid, expr_cols) %>%
reshape2::melt()
## Draw heatmap
expr_heatmap <- expr_df %>%
ggplot(aes(variable, Geneid, fill = value)) +
geom_tile(color = "gray") +
# Write values in each cell
geom_text(aes(label = round(value, hm_value_round)), size = hm_value_size, color = hm_value_color) +
# Split rows by ID, set scales and space to free
ggh4x::facet_grid2(rows = vars(Geneid), scales = "free_y", space = "free") +
# Format the legend (colorbar)
scale_fill_gradient(low = hm_legend_colors[1], high = hm_legend_colors[2], limits = hm_legend_limits, breaks = hm_legend_breaks, oob = scales::squish,
guide = guide_colorbar(title = hm_legend_title, title.position = "left", frame.colour = "black", barheight = unit(hm_legend_size[1], "mm"),
barwidth = unit(hm_legend_size[2], "mm"), frame.linewidth = 1.5, ticks.colour = NA,
title.theme = element_text(angle = 90, hjust = 0.5,  vjust = 0.5, size = 8))) +
# Format theme, remove facet strips, remove whitespace between bars and panel border, and remove axis labels
ggmitji::theme_custom(legend = "left", x.text.angle = 90, x.text.hjust = 1, x.text.vjust = .5, title.face = "italic", title.size = 9) +
scale_x_discrete(expand = c(0,0)) + scale_y_discrete(expand = c(0,0)) +
labs(x = NULL, y = NULL)
# Barplot - Proportion of sense and antisense counts -----
## Format the counts data frames with sense and antisense
## Make list and set names to the list
expr_strand <- list(expr_sense, expr_antisense) %>%
purrr::set_names(c("Sense", "Antisense")) %>%
# Retain the desired columns and create a column for sense antisense
purrr::imap(~dplyr::select(.x, Geneid, expr_cols) %>% dplyr::mutate(sense = .y)) %>%
# Bind lists by rows
# Reshape the resulting dataframe
dplyr::bind_rows() %>%
unique() %>%
reshape2::melt()
## Draw horizontal barplot
expr_strand_barplot <-  expr_strand %>%
ggplot(aes(y = variable, x = value, fill = sense)) +
geom_col(position = bar_pos, color = "black") +
# Split rows by ID, then put the strips at the left side
ggh4x::facet_grid2(rows = vars(Geneid), switch = "y") +
# Customize labs, theme, position of the Y axis and remove strips
labs(x = bar_xlab, y = NULL, title = NULL) +
ggmitji::theme_custom(legend = "right", x.text.angle = 90, x.text.hjust = 1, x.text.vjust = .5, title.face = "italic", axis.title.face = "plain", vgrid.major = .3, vgrid.minor = .3) +
scale_y_discrete(guide = guide_axis(position = "right"))
# Combine plots or not -----
if(combine_plots){
# Load patchwork
require(patchwork)
# Combine plots
final_plot <-
expr_heatmap+ggmitji::rm_strips() +
expr_strand_barplot+ggmitji::rm_strips() +
patchwork::plot_layout(design = "AAAB") +
patchwork::plot_annotation(title = plot_title, theme = theme(plot.title = element_text(face = "italic",  size = 9, hjust = .5)))
# Return plot
return(final_plot)
} else {
# Return list of individual plots
return(list(expr_heatmap, expr_strand_barplot))
}
}
expr_heatmap_bar(expr, expr_sense, expr_antisense)
expr_heatmap_bar <- function(expr,
expr_sense,
expr_antisense,
expr_cols        = c("cond1", "cond2", "cond3"),
hm_value_round   = 0,
hm_value_size    = 3,
hm_value_color   = "black",
hm_legend_colors = c("white", "cornflowerblue"),
hm_legend_limits = c(0,1e6),
hm_legend_breaks = seq(0,1e6, 1e5),
hm_legend_title = "Counts",
hm_legend_size  = c(40, 7),
bar_pos         = "fill",
bar_xlab        = NULL,
combine_plots   = T,
plot_title      = NULL){
# Load packages
require(dplyr)
require(reshape2)
require(purrr)
require(ggh4x)
require(ggplot2)
require(ggmitji)
# Check that inputs are OK
if(!is.null(expr) & !is.data.frame(expr)) { stop("'expr' should be NULL or a data.frame with Geneid and expression values.") }
if(!is.data.frame(expr_sense)) { stop("'expr_sense' should be a data.frame with Geneid and expression values.") }
if(!is.data.frame(expr_antisense)) { stop("'expr_antisense' should be a data.frame with Geneid and expression values.") }
if(!"Geneid" %in% colnames(expr_sense)){ stop("The column names of the expression data.frames should be equal between them and have a Geneid column") }
if(is.null(expr_cols)) { expr_cols <- colnames(expr)[which(colnames(expr) != "Geneid")] }
if(is.null(expr)) {
require(tibble)
expr <- (expr_sense %>%  dplyr::arrange(Geneid) %>% tibble::column_to_rownames("Geneid")) + (expr_antisense %>%  dplyr::arrange(Geneid) %>% tibble::column_to_rownames("Geneid"))
}
if(any_of(colnames(expr) != colnames(expr_sense))) { stop("The column names of the expression data.frames should be equal between them and have a Geneid column") }
if(any_of(colnames(expr) != colnames(expr_antisense))) { stop("The column names of the expression data.frames should be equal between them and have a Geneid column") }
# Heatmap - ALL reads regardless the strand -----
## Format expression dataframe, select desired cols and reshape it
expr_df <- expr %>%
dplyr::select(Geneid, expr_cols) %>%
reshape2::melt()
## Draw heatmap
expr_heatmap <- expr_df %>%
ggplot(aes(variable, Geneid, fill = value)) +
geom_tile(color = "gray") +
# Write values in each cell
geom_text(aes(label = round(value, hm_value_round)), size = hm_value_size, color = hm_value_color) +
# Split rows by ID, set scales and space to free
ggh4x::facet_grid2(rows = vars(Geneid), scales = "free_y", space = "free") +
# Format the legend (colorbar)
scale_fill_gradient(low = hm_legend_colors[1], high = hm_legend_colors[2], limits = hm_legend_limits, breaks = hm_legend_breaks, oob = scales::squish,
guide = guide_colorbar(title = hm_legend_title, title.position = "left", frame.colour = "black", barheight = unit(hm_legend_size[1], "mm"),
barwidth = unit(hm_legend_size[2], "mm"), frame.linewidth = 1.5, ticks.colour = NA,
title.theme = element_text(angle = 90, hjust = 0.5,  vjust = 0.5, size = 8))) +
# Format theme, remove facet strips, remove whitespace between bars and panel border, and remove axis labels
ggmitji::theme_custom(legend = "left", x.text.angle = 90, x.text.hjust = 1, x.text.vjust = .5, title.face = "italic", title.size = 9) +
scale_x_discrete(expand = c(0,0)) + scale_y_discrete(expand = c(0,0)) +
labs(x = NULL, y = NULL)
# Barplot - Proportion of sense and antisense counts -----
## Format the counts data frames with sense and antisense
## Make list and set names to the list
expr_strand <- list(expr_sense, expr_antisense) %>%
purrr::set_names(c("Sense", "Antisense")) %>%
# Retain the desired columns and create a column for sense antisense
purrr::imap(~dplyr::select(.x, Geneid, expr_cols) %>% dplyr::mutate(sense = .y)) %>%
# Bind lists by rows
# Reshape the resulting dataframe
dplyr::bind_rows() %>%
unique() %>%
reshape2::melt()
## Draw horizontal barplot
expr_strand_barplot <-  expr_strand %>%
ggplot(aes(y = variable, x = value, fill = sense)) +
geom_col(position = bar_pos, color = "black") +
# Split rows by ID, then put the strips at the left side
ggh4x::facet_grid2(rows = vars(Geneid), switch = "y") +
# Customize labs, theme, position of the Y axis and remove strips
labs(x = bar_xlab, y = NULL, title = NULL) +
ggmitji::theme_custom(legend = "right", x.text.angle = 90, x.text.hjust = 1, x.text.vjust = .5, title.face = "italic", axis.title.face = "plain", vgrid.major = .3, vgrid.minor = .3) +
scale_y_discrete(guide = guide_axis(position = "right"))
# Combine plots or not -----
if(combine_plots){
# Load patchwork
require(patchwork)
# Combine plots
final_plot <-
expr_heatmap+ggmitji::rm_strips() +
expr_strand_barplot+ggmitji::rm_strips() +
patchwork::plot_layout(design = "AAAB") +
patchwork::plot_annotation(title = plot_title, theme = theme(plot.title = element_text(face = "italic",  size = 9, hjust = .5)))
# Return plot
return(final_plot)
} else {
# Return list of individual plots
return(list(expr_heatmap, expr_strand_barplot))
}
}
expr_heatmap_bar(expr, expr_sense, expr_antisense)
expr_heatmap_bar <- function(expr,
expr_sense,
expr_antisense,
expr_cols        = c("cond1", "cond2", "cond3"),
hm_value_round   = 0,
hm_value_size    = 3,
hm_value_color   = "black",
hm_legend_colors = c("white", "cornflowerblue"),
hm_legend_limits = c(0,1e6),
hm_legend_breaks = seq(0,1e6, 1e5),
hm_legend_title = "Counts",
hm_legend_size  = c(40, 7),
bar_pos         = "fill",
bar_xlab        = NULL,
combine_plots   = T,
plot_title      = NULL){
# Load packages
require(dplyr)
require(reshape2)
require(purrr)
require(ggh4x)
require(ggplot2)
require(ggmitji)
# Check that inputs are OK
if(!is.null(expr) & !is.data.frame(expr)) { stop("'expr' should be NULL or a data.frame with Geneid and expression values.") }
if(!is.data.frame(expr_sense)) { stop("'expr_sense' should be a data.frame with Geneid and expression values.") }
if(!is.data.frame(expr_antisense)) { stop("'expr_antisense' should be a data.frame with Geneid and expression values.") }
if(!"Geneid" %in% colnames(expr_sense)){ stop("The column names of the expression data.frames should be equal between them and have a Geneid column") }
if(is.null(expr_cols)) { expr_cols <- colnames(expr)[which(colnames(expr) != "Geneid")] }
if(is.null(expr)) {
require(tibble)
expr <- (expr_sense %>%  dplyr::arrange(Geneid) %>% tibble::column_to_rownames("Geneid")) + (expr_antisense %>%  dplyr::arrange(Geneid) %>% tibble::column_to_rownames("Geneid"))
}
if(any(colnames(expr) != colnames(expr_sense))) { stop("The column names of the expression data.frames should be equal between them and have a Geneid column") }
if(any(colnames(expr) != colnames(expr_antisense))) { stop("The column names of the expression data.frames should be equal between them and have a Geneid column") }
# Heatmap - ALL reads regardless the strand -----
## Format expression dataframe, select desired cols and reshape it
expr_df <- expr %>%
dplyr::select(Geneid, expr_cols) %>%
reshape2::melt()
## Draw heatmap
expr_heatmap <- expr_df %>%
ggplot(aes(variable, Geneid, fill = value)) +
geom_tile(color = "gray") +
# Write values in each cell
geom_text(aes(label = round(value, hm_value_round)), size = hm_value_size, color = hm_value_color) +
# Split rows by ID, set scales and space to free
ggh4x::facet_grid2(rows = vars(Geneid), scales = "free_y", space = "free") +
# Format the legend (colorbar)
scale_fill_gradient(low = hm_legend_colors[1], high = hm_legend_colors[2], limits = hm_legend_limits, breaks = hm_legend_breaks, oob = scales::squish,
guide = guide_colorbar(title = hm_legend_title, title.position = "left", frame.colour = "black", barheight = unit(hm_legend_size[1], "mm"),
barwidth = unit(hm_legend_size[2], "mm"), frame.linewidth = 1.5, ticks.colour = NA,
title.theme = element_text(angle = 90, hjust = 0.5,  vjust = 0.5, size = 8))) +
# Format theme, remove facet strips, remove whitespace between bars and panel border, and remove axis labels
ggmitji::theme_custom(legend = "left", x.text.angle = 90, x.text.hjust = 1, x.text.vjust = .5, title.face = "italic", title.size = 9) +
scale_x_discrete(expand = c(0,0)) + scale_y_discrete(expand = c(0,0)) +
labs(x = NULL, y = NULL)
# Barplot - Proportion of sense and antisense counts -----
## Format the counts data frames with sense and antisense
## Make list and set names to the list
expr_strand <- list(expr_sense, expr_antisense) %>%
purrr::set_names(c("Sense", "Antisense")) %>%
# Retain the desired columns and create a column for sense antisense
purrr::imap(~dplyr::select(.x, Geneid, expr_cols) %>% dplyr::mutate(sense = .y)) %>%
# Bind lists by rows
# Reshape the resulting dataframe
dplyr::bind_rows() %>%
unique() %>%
reshape2::melt()
## Draw horizontal barplot
expr_strand_barplot <-  expr_strand %>%
ggplot(aes(y = variable, x = value, fill = sense)) +
geom_col(position = bar_pos, color = "black") +
# Split rows by ID, then put the strips at the left side
ggh4x::facet_grid2(rows = vars(Geneid), switch = "y") +
# Customize labs, theme, position of the Y axis and remove strips
labs(x = bar_xlab, y = NULL, title = NULL) +
ggmitji::theme_custom(legend = "right", x.text.angle = 90, x.text.hjust = 1, x.text.vjust = .5, title.face = "italic", axis.title.face = "plain", vgrid.major = .3, vgrid.minor = .3) +
scale_y_discrete(guide = guide_axis(position = "right"))
# Combine plots or not -----
if(combine_plots){
# Load patchwork
require(patchwork)
# Combine plots
final_plot <-
expr_heatmap+ggmitji::rm_strips() +
expr_strand_barplot+ggmitji::rm_strips() +
patchwork::plot_layout(design = "AAAB") +
patchwork::plot_annotation(title = plot_title, theme = theme(plot.title = element_text(face = "italic",  size = 9, hjust = .5)))
# Return plot
return(final_plot)
} else {
# Return list of individual plots
return(list(expr_heatmap, expr_strand_barplot))
}
}
expr_heatmap_bar(expr, expr_sense, expr_antisense)
expr_heatmap_bar(expr, expr_sense, expr_antisense)
devtools::document()
devtools::install_github("amitjavilaventura/plotmics")
library(plotmics)
detach("package:plotmics", unload = TRUE)
devtools::document()
devtools::document()
devtools::document()
remove.packages("plotmics", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
devtools::document()
devtools::install_github("amitjavilaventura/plotmics")
