panel.border = element_rect(size = 1.1)) +
labs(x = xlab, y = ylab)
if(write_label){ hm <- hm + geom_text(aes(label = round(Expr, label_digits)), size = label_size, color = label_color) }
# Hierarchical clustering -----
if(clust_rows){
# Hierarchical clustering of rows alone
hclust_rows <- hclust( dist(genes_lfc[-1], method = "euclidean"), method = "ward.D" )
if(show_dend_rows) { ytext_pos = "right" }
else { ytext_pos = "left" }
# Order rows
hm <- hm +
scale_y_discrete(limits=genes_lfc.m$Gene[hclust_rows$order],
labels = genes_lfc.m$Gene, position = ytext_pos,
expand = c(0,0))
}
# Hierarchical clustering of rows alone
hclust_rows <- hclust( dist(genes_lfc[-1], method = "euclidean"), method = "ward.D" )
if(show_dend_rows) { ytext_pos = "right" }
# Order rows
hm <- hm +
scale_y_discrete(limits=genes_lfc.m$Gene[hclust_rows$order],
labels = genes_lfc.m$Gene, position = ytext_pos,
expand = c(0,0))
# Hierarchical clustering of columns alone
hclust_cols <- hclust( dist(t(genes_lfc[-1]), method = "euclidean"), method = "ward.D" )
# Order columns
hm <- hm +
scale_x_discrete(limits = colnames(genes_lfc[,-1])[hclust_cols$order],
labels = colnames(genes_lfc[,-1])[hclust_cols$order],
expand = c(0,0))
hm
expr <- df %>% dplyr::filter(Geneid %in% genes)
expr.m <- expr %>% reshape2::melt(value.name = "Expr", variable.name = "Condition")
if(is.null(scale)){
lower    <- min(expr.m$Expr)
midpoint <- (higher-lower)/2
higher   <- max(expr.m$Expr)
breaks   <- round(seq(from = lower, to = higher, by = (higher-lower)/scale_breaks_num))
} else {
lower    <- scale[1]
midpoint <- scale_mid
higher   <- scale[3]
breaks   <- round(seq(from = lower, to = higher, by = (higher-lower)/scale_breaks_num))
}
lower    <- min(expr.m$Expr)
min(expr.m$Expr)
expr.m
genes = c("TCF7", "TCF7L1", "TCF7L2", "LEF1")
expr <- df %>% dplyr::filter(Geneid %in% genes)
expr.m <- expr %>% reshape2::melt(value.name = "Expr", variable.name = "Condition")
if(is.null(scale)){
lower    <- min(expr.m$Expr)
midpoint <- (higher-lower)/2
higher   <- max(expr.m$Expr)
breaks   <- round(seq(from = lower, to = higher, by = (higher-lower)/scale_breaks_num))
} else {
lower    <- scale[1]
midpoint <- scale_mid
higher   <- scale[3]
breaks   <- round(seq(from = lower, to = higher, by = (higher-lower)/scale_breaks_num))
}
lower    <- min(expr.m$Expr)
midpoint <- (higher-lower)/2
higher   <- max(expr.m$Expr)
breaks   <- round(seq(from = lower, to = higher, by = (higher-lower)/scale_breaks_num))
lower
midpoint
higher
midpoint <- (higher-lower)/2
midpoint
hm <- ggplot(expr.m, aes(Condition, Geneid) ) +
geom_tile(aes(fill = Expr)) +
force_panelsizes(rows = unit(hm_height, "mm"),
cols = unit(hm_width, "mm")) +
coord_fixed() +
scale_fill_gradient2(limits = c(lower, higher), midpoint = midpoint,
breaks = breaks,
low = hm_colors[1], high = hm_colors[3], mid = hm_colors[2],
guide = guide_colorbar(title = legend_title,
title.position = "right",
title.theme = element_text(angle = 270, hjust = .5, vjust = .5),
frame.colour = "black", frame.linewidth = 1.5,
ticks.colour = NA,
barheight = unit(legend_height, "mm"))) +
theme_pubr(border = T, legend = "right", margin = T, x.text.angle = 90) +
theme(plot.title = element_text(face = "bold"),
plot.subtitle = element_text(face = "italic"),
axis.title = element_text(face = "bold"),
panel.border = element_rect(size = 1.1)) +
labs(x = xlab, y = ylab)
if(write_label){ hm <- hm + geom_text(aes(label = round(Expr, label_digits)), size = label_size, color = label_color) }
clust_rows = T
# Hierarchical clustering -----
if(clust_rows){
# Hierarchical clustering of rows alone
hclust_rows <- hclust( dist(genes_lfc[-1], method = "euclidean"), method = "ward.D" )
if(show_dend_rows) { ytext_pos = "right" }
else { ytext_pos = "left" }
# Order rows
hm <- hm +
scale_y_discrete(limits=genes_lfc.m$Gene[hclust_rows$order],
labels = genes_lfc.m$Gene, position = ytext_pos,
expand = c(0,0))
}
if(clust_cols){
# Hierarchical clustering of columns alone
hclust_cols <- hclust( dist(t(genes_lfc[-1]), method = "euclidean"), method = "ward.D" )
# Order columns
hm <- hm +
scale_x_discrete(limits = colnames(genes_lfc[,-1])[hclust_cols$order],
labels = colnames(genes_lfc[,-1])[hclust_cols$order],
expand = c(0,0))
}
clust_cols=T
if(clust_cols){
# Hierarchical clustering of columns alone
hclust_cols <- hclust( dist(t(genes_lfc[-1]), method = "euclidean"), method = "ward.D" )
# Order columns
hm <- hm +
scale_x_discrete(limits = colnames(genes_lfc[,-1])[hclust_cols$order],
labels = colnames(genes_lfc[,-1])[hclust_cols$order],
expand = c(0,0))
}
hm
expr <- df %>% dplyr::filter(Geneid %in% genes)
expr.m <- expr %>% reshape2::melt(value.name = "Expr", variable.name = "Condition")
if(is.null(scale)){
lower    <- min(expr.m$Expr)
midpoint <- (higher-lower)/2
higher   <- max(expr.m$Expr)
breaks   <- round(seq(from = lower, to = higher, by = (higher-lower)/scale_breaks_num))
} else {
lower    <- scale[1]
midpoint <- scale_mid
higher   <- scale[3]
breaks   <- round(seq(from = lower, to = higher, by = (higher-lower)/scale_breaks_num))
}
lower    <- min(expr.m$Expr)
midpoint <- (higher-lower)/2
higher   <- max(expr.m$Expr)
scale = NULL
if(is.null(scale)){
lower    <- min(expr.m$Expr)
midpoint <- (higher-lower)/2
higher   <- max(expr.m$Expr)
breaks   <- round(seq(from = lower, to = higher, by = (higher-lower)/scale_breaks_num))
} else {
lower    <- scale[1]
midpoint <- scale_mid
higher   <- scale[3]
breaks   <- round(seq(from = lower, to = higher, by = (higher-lower)/scale_breaks_num))
}
lower
midpoint
hm <- ggplot(expr.m, aes(Condition, Geneid) ) +
geom_tile(aes(fill = Expr)) +
force_panelsizes(rows = unit(hm_height, "mm"),
cols = unit(hm_width, "mm")) +
coord_fixed() +
scale_fill_gradient2(limits = c(lower, higher), midpoint = midpoint,
breaks = breaks,
low = hm_colors[1], high = hm_colors[3], mid = hm_colors[2],
guide = guide_colorbar(title = legend_title,
title.position = "right",
title.theme = element_text(angle = 270, hjust = .5, vjust = .5),
frame.colour = "black", frame.linewidth = 1.5,
ticks.colour = NA,
barheight = unit(legend_height, "mm"))) +
theme_pubr(border = T, legend = "right", margin = T, x.text.angle = 90) +
theme(plot.title = element_text(face = "bold"),
plot.subtitle = element_text(face = "italic"),
axis.title = element_text(face = "bold"),
panel.border = element_rect(size = 1.1)) +
labs(x = xlab, y = ylab)
hm
if(write_label){ hm <- hm + geom_text(aes(label = round(Expr, label_digits)), size = label_size, color = label_color) }
# Hierarchical clustering of rows alone
hclust_rows <- hclust( dist(genes_lfc[-1], method = "euclidean"), method = "ward.D" )
if(show_dend_rows) { ytext_pos = "right" }
# Order rows
hm <- hm +
scale_y_discrete(limits=genes_lfc.m$Gene[hclust_rows$order],
labels = genes_lfc.m$Gene, position = ytext_pos,
expand = c(0,0))
# Hierarchical clustering of columns alone
hclust_cols <- hclust( dist(t(genes_lfc[-1]), method = "euclidean"), method = "ward.D" )
# Order columns
hm <- hm +
scale_x_discrete(limits = colnames(genes_lfc[,-1])[hclust_cols$order],
labels = colnames(genes_lfc[,-1])[hclust_cols$order],
expand = c(0,0))
hm
[,-1]
# Hierarchical clustering of rows alone
hclust_rows <- hclust( dist(expr[-1], method = "euclidean"), method = "ward.D" )
# Order rows
hm <- hm +
scale_y_discrete(limits=expr.m$Geneid[hclust_rows$order],
labels = expr.m$Geneid, position = ytext_pos,
expand = c(0,0))
hm <- ggplot(expr.m, aes(Condition, Geneid) ) +
geom_tile(aes(fill = Expr)) +
force_panelsizes(rows = unit(hm_height, "mm"),
cols = unit(hm_width, "mm")) +
coord_fixed() +
scale_fill_gradient2(limits = c(lower, higher), midpoint = midpoint,
breaks = breaks,
low = hm_colors[1], high = hm_colors[3], mid = hm_colors[2],
guide = guide_colorbar(title = legend_title,
title.position = "right",
title.theme = element_text(angle = 270, hjust = .5, vjust = .5),
frame.colour = "black", frame.linewidth = 1.5,
ticks.colour = NA,
barheight = unit(legend_height, "mm"))) +
theme_pubr(border = T, legend = "right", margin = T, x.text.angle = 90) +
theme(plot.title = element_text(face = "bold"),
plot.subtitle = element_text(face = "italic"),
axis.title = element_text(face = "bold"),
panel.border = element_rect(size = 1.1)) +
labs(x = xlab, y = ylab)
if(write_label){ hm <- hm + geom_text(aes(label = round(Expr, label_digits)), size = label_size, color = label_color) }
# Hierarchical clustering -----
if(clust_rows){
# Hierarchical clustering of rows alone
hclust_rows <- hclust( dist(expr[-1], method = "euclidean"), method = "ward.D" )
if(show_dend_rows) { ytext_pos = "right" }
else { ytext_pos = "left" }
# Order rows
hm <- hm +
scale_y_discrete(limits=expr.m$Geneid[hclust_rows$order],
labels = expr.m$Geneid, position = ytext_pos,
expand = c(0,0))
}
if(clust_cols){
# Hierarchical clustering of columns alone
hclust_cols <- hclust( dist(t(expr[-1]), method = "euclidean"), method = "ward.D" )
# Order columns
hm <- hm +
scale_x_discrete(limits = colnames(expr[,-1])[hclust_cols$order],
labels = colnames(expr[,-1])[hclust_cols$order],
expand = c(0,0))
}
hm
### Plot dendograms
if(clust_rows & clust_cols & show_dend_rows & show_dend_cols){
dend_rows <- plotDendogram(hclust_rows, axis = "rows")
dend_cols <- plotDendogram(hclust_cols, axis = "cols")
# Plot heatmap and dendogram(s) together with patchwork and the created layout
heatmap <- hm +
inset_element(dend_cols, left = 0, bottom = 1, right = 1, top = 1+dend_cols_prop) +
inset_element(dend_rows, left = -dend_rows_prop, bottom = 0, right = 0, top = 1) +
plot_annotation(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
} else if(clust_cols & show_dend_cols) {
dend_cols <- plotDendogram(hclust_cols, axis = "cols")
# Plot heatmap and dendogram(s) together with patchwork and the created layout
heatmap <- hm +
inset_element(dend_cols, left = -0.1, bottom = 1, right = 1.1, top = 1+dend_cols_prop) +
plot_annotation(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
} else if(clust_rows & show_dend_rows) {
dend_rows <- plotDendogram(hclust_rows, axis = "rows")
# Plot heatmap and dendogram(s) together with patchwork and the created layout
heatmap <- hm +
inset_element(dend_rows, left = -dend_rows_prop, bottom = 0, right = 0, top = 1) +
plot_annotation(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
} else {
heatmap <- hm +
labs(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
}
show_dend_cols = T
### Plot dendograms
if(clust_rows & clust_cols & show_dend_rows & show_dend_cols){
dend_rows <- plotDendogram(hclust_rows, axis = "rows")
dend_cols <- plotDendogram(hclust_cols, axis = "cols")
# Plot heatmap and dendogram(s) together with patchwork and the created layout
heatmap <- hm +
inset_element(dend_cols, left = 0, bottom = 1, right = 1, top = 1+dend_cols_prop) +
inset_element(dend_rows, left = -dend_rows_prop, bottom = 0, right = 0, top = 1) +
plot_annotation(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
} else if(clust_cols & show_dend_cols) {
dend_cols <- plotDendogram(hclust_cols, axis = "cols")
# Plot heatmap and dendogram(s) together with patchwork and the created layout
heatmap <- hm +
inset_element(dend_cols, left = -0.1, bottom = 1, right = 1.1, top = 1+dend_cols_prop) +
plot_annotation(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
} else if(clust_rows & show_dend_rows) {
dend_rows <- plotDendogram(hclust_rows, axis = "rows")
# Plot heatmap and dendogram(s) together with patchwork and the created layout
heatmap <- hm +
inset_element(dend_rows, left = -dend_rows_prop, bottom = 0, right = 0, top = 1) +
plot_annotation(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
} else {
heatmap <- hm +
labs(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
}
dend_cols_prop = .3
dend_rows_prop = .2
expressionHeatmap2 <- function(list, list_names = names(list), genes = c("Lef1", "Tcf7l1", "Tcf7l2", "Tcf7"),
clust_rows = T, clust_cols = T, show_dend_rows = T, show_dend_cols = T,
write_label = T, label_color = "black", label_size = 4,
scale = c(-1.5, 1.5), scale_mid = 0, scale_breaks_by = 0.5,
hm_height = length(genes)*10, hm_width = length(list)*10, hm_colors = c("cornflowerblue", "white", "gold3"),
legend_height = hm_height, legend_title = NULL,
dend_cols_prop = .1, dend_rows_prop = .2,
title = "", subtitle = "", caption = "", xlab = "", ylab = NULL){
# Load required packages
require(plyr)
require(dplyr)
require(purrr)
require(reshape2)
require(ggplot2)
require(ggpubr)
require(ggh4x)
require(ggdendro)
require(patchwork)
# Check that inputs are OK
if(!is.list(list)){ stop("'list' must be a (named) list of dataframes with the columns 'seqnames', 'start' and 'end'.") }
#if(show_dend_rows & !clust_rows){ stop("To plot the rows dendogram (`show_dend_rows = T`), `clust_rows` must be TRUE") }
#if(show_dend_cols & !clust_cols){ stop("To plot the columns dendogram (`show_dend_cols = T`), `clust_cols` must be TRUE") }
# Bind Log2FCs from all genes in all contrasts
genes_lfc <- list %>%
purrr::set_names(list_names) %>%
purrr::map(~dplyr::select(.x, Geneid, log2FoldChange)) %>%
purrr::map(~dplyr::filter(.x, Geneid %in% genes)) %>%
purrr::imap(~magrittr::set_colnames(.x, value = c("Gene", .y))) %>%
plyr::join_all(by = "Gene") %>%
na.omit()
# Melt df with all Log2FCs
genes_lfc.m <- reshape2::melt(genes_lfc, variable.name = "Condition", id.vars = "Gene", value.name = "Expr")
# Initialize heatmap -----
## Sizes
breaks <- seq(from = scale[2], to = scale[1], by = -scale_breaks_by)
## Plot heatmap
hm <- ggplot(genes_lfc.m, aes(Condition, Gene) ) +
geom_tile(aes(fill = Expr)) +
force_panelsizes(rows = unit(hm_height, "mm"),
cols = unit(hm_width, "mm"))  +
coord_fixed() +
scale_fill_gradient2(limits = c(scale[1], scale[2]), midpoint = scale_mid,
breaks = breaks,
low = hm_colors[1], mid = hm_colors[2], high = hm_colors[3],
guide = guide_colorbar(title = legend_title,
title.position = "right",
title.theme = element_text(angle = 270, hjust = .5, vjust = .5),
frame.colour = "black", frame.linewidth = 1.5,
ticks.colour = NA,
barheight = unit(legend_height, "mm"))) +
theme_pubr(border = T, legend = "right", margin = T, x.text.angle = 90) +
theme(plot.title = element_text(face = "bold"),
plot.subtitle = element_text(face = "italic"),
axis.title = element_text(face = "bold"),
axis.text.x = element_text(vjust = .5),
panel.border = element_rect(size = 1.1)) +
labs(x = xlab, y = ylab)
##Write lfc values
if(write_label){ hm <- hm + geom_text(aes(label = round(Expr, 2)), size = label_size, color = label_color) }
# Hierarchical clustering -----
if(clust_rows){
# Hierarchical clustering of rows alone
hclust_rows <- hclust( dist(genes_lfc[-1], method = "euclidean"), method = "ward.D" )
# Position of Y axis
if(show_dend_rows) { ytext_pos = "right" }
else { ytext_pos = "left" }
# Order rows
hm <- hm +
scale_y_discrete(limits=genes_lfc.m$Gene[hclust_rows$order],
labels = genes_lfc.m$Gene, position = ytext_pos,
expand = c(0,0))
}
if(clust_cols){
# Hierarchical clustering of columns alone
hclust_cols <- hclust( dist(t(genes_lfc[-1]), method = "euclidean"), method = "ward.D" )
# Order columns
hm <- hm +
scale_x_discrete(limits = colnames(genes_lfc[,-1])[hclust_cols$order],
labels = colnames(genes_lfc[,-1])[hclust_cols$order],
expand = c(0,0))
}
### Plot dendograms
if(clust_rows & clust_cols & show_dend_rows & show_dend_cols){
dend_rows <- plotDendogram(hclust_rows, axis = "rows")
dend_cols <- plotDendogram(hclust_cols, axis = "cols")
# Plot heatmap and dendogram(s) together with patchwork and the created layout
heatmap <- hm +
inset_element(dend_cols, left = 0, bottom = 1, right = 1, top = 1+dend_cols_prop) +
inset_element(dend_rows, left = -dend_rows_prop, bottom = 0, right = 0, top = 1) +
plot_annotation(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
} else if(clust_cols & show_dend_cols) {
dend_cols <- plotDendogram(hclust_cols, axis = "cols")
# Plot heatmap and dendogram(s) together with patchwork and the created layout
heatmap <- hm +
inset_element(dend_cols, left = -0.1, bottom = 1, right = 1.1, top = 1+dend_cols_prop) +
plot_annotation(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
} else if(clust_rows & show_dend_rows) {
dend_rows <- plotDendogram(hclust_rows, axis = "rows")
# Plot heatmap and dendogram(s) together with patchwork and the created layout
heatmap <- hm +
inset_element(dend_rows, left = -dend_rows_prop, bottom = 0, right = 0, top = 1) +
plot_annotation(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
} else {
heatmap <- hm +
labs(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
}
return(heatmap)
}
### ---------
expressionHeatmap <- function(df, genes = c("TCF7", "TCF7L1", "TCF7L2", "LEF1"),
write_label = T, label_size = 4, label_color = "black", label_digits = 2,
scale = NULL, scale_breaks_num = 5, scale_mid = 0,
hm_height = length(genes)*10, hm_width = length(list)*10, hm_colors = c("cornflowerblue", "white", "gold3"),
legend_height = hm_height, legend_title = NULL,
dend_cols_prop = .1, dend_rows_prop = .2,
xlab = "", ylab = NULL){
expr <- df %>% dplyr::filter(Geneid %in% genes)
expr.m <- expr %>% reshape2::melt(value.name = "Expr", variable.name = "Condition")
if(is.null(scale)){
lower    <- min(expr.m$Expr)
midpoint <- (higher-lower)/2
higher   <- max(expr.m$Expr)
breaks   <- round(seq(from = lower, to = higher, by = (higher-lower)/scale_breaks_num))
} else {
lower    <- scale[1]
midpoint <- scale_mid
higher   <- scale[3]
breaks   <- round(seq(from = lower, to = higher, by = (higher-lower)/scale_breaks_num))
}
hm <- ggplot(expr.m, aes(Condition, Geneid) ) +
geom_tile(aes(fill = Expr)) +
force_panelsizes(rows = unit(hm_height, "mm"),
cols = unit(hm_width, "mm")) +
coord_fixed() +
scale_fill_gradient2(limits = c(lower, higher), midpoint = midpoint,
breaks = breaks,
low = hm_colors[1], high = hm_colors[3], mid = hm_colors[2],
guide = guide_colorbar(title = legend_title,
title.position = "right",
title.theme = element_text(angle = 270, hjust = .5, vjust = .5),
frame.colour = "black", frame.linewidth = 1.5,
ticks.colour = NA,
barheight = unit(legend_height, "mm"))) +
theme_pubr(border = T, legend = "right", margin = T, x.text.angle = 90) +
theme(plot.title = element_text(face = "bold"),
plot.subtitle = element_text(face = "italic"),
axis.title = element_text(face = "bold"),
panel.border = element_rect(size = 1.1)) +
labs(x = xlab, y = ylab)
if(write_label){ hm <- hm + geom_text(aes(label = round(Expr, label_digits)), size = label_size, color = label_color) }
# Hierarchical clustering -----
if(clust_rows){
# Hierarchical clustering of rows alone
hclust_rows <- hclust( dist(expr[-1], method = "euclidean"), method = "ward.D" )
if(show_dend_rows) { ytext_pos = "right" }
else { ytext_pos = "left" }
# Order rows
hm <- hm +
scale_y_discrete(limits=expr.m$Geneid[hclust_rows$order],
labels = expr.m$Geneid, position = ytext_pos,
expand = c(0,0))
}
if(clust_cols){
# Hierarchical clustering of columns alone
hclust_cols <- hclust( dist(t(expr[-1]), method = "euclidean"), method = "ward.D" )
# Order columns
hm <- hm +
scale_x_discrete(limits = colnames(expr[,-1])[hclust_cols$order],
labels = colnames(expr[,-1])[hclust_cols$order],
expand = c(0,0))
}
### Plot dendograms
if(clust_rows & clust_cols & show_dend_rows & show_dend_cols){
dend_rows <- plotDendogram(hclust_rows, axis = "rows")
dend_cols <- plotDendogram(hclust_cols, axis = "cols")
# Plot heatmap and dendogram(s) together with patchwork and the created layout
heatmap <- hm +
inset_element(dend_cols, left = 0, bottom = 1, right = 1, top = 1+dend_cols_prop) +
inset_element(dend_rows, left = -dend_rows_prop, bottom = 0, right = 0, top = 1) +
plot_annotation(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
} else if(clust_cols & show_dend_cols) {
dend_cols <- plotDendogram(hclust_cols, axis = "cols")
# Plot heatmap and dendogram(s) together with patchwork and the created layout
heatmap <- hm +
inset_element(dend_cols, left = -0.1, bottom = 1, right = 1.1, top = 1+dend_cols_prop) +
plot_annotation(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
} else if(clust_rows & show_dend_rows) {
dend_rows <- plotDendogram(hclust_rows, axis = "rows")
# Plot heatmap and dendogram(s) together with patchwork and the created layout
heatmap <- hm +
inset_element(dend_rows, left = -dend_rows_prop, bottom = 0, right = 0, top = 1) +
plot_annotation(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
} else {
heatmap <- hm +
labs(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
}
return(heatmap)
}
df
expressionHeatmap(mean_tpm)
