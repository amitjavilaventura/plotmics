plyranges::find_overlaps_directed(peaks1, peaks2)
plyranges::find_overlaps_within(peaks1, peaks2)
peak_list
plyranges::join_overlap_inner(peaks1, peaks2)
plyranges::find_overlaps_within(peaks1, peaks2)
filter_by_overlaps
plyranges::filter_by_overlaps(peaks1, peaks2)
plyranges::filter_by_overlaps(peaks2, peaks1)
plyranges::filter_by_overlaps(peaks1, peaks2)
plyranges::filter_by_overlaps(peaks2, peaks1)
ir0 <- data.frame(start = c(5,10, 15,20), width = 5) %>%
as_iranges()
ir1 <- data.frame(start = 2:6, width = 3:7) %>%
as_iranges()
ir0
ir1
filter_by_overlaps(ir1, ir0)
filter_by_overlaps(ir0, ir1)
# Check true number of overlaps for each region
if(true_overlaps & length(peak_list)==2) {
# Set stranded and percent to false
stranded <- FALSE
percent  <- FALSE
# Peaks as GRanges
peaks1 <- peak_list[[1]] %>% plyranges::as_granges()
peaks2 <- peak_list[[2]] %>% plyranges::as_granges()
overlaps1 <- plyranges::filter_by_overlaps(peaks1, peaks2)
overlaps2 <- plyranges::filter_by_overlaps(peaks2, peaks1)
}
num1 <- nrow(overlaps1)
num1
# Find overlapping regions for each set
overlaps1 <- plyranges::filter_by_overlaps(peaks1, peaks2)
overlaps1
num1 <- length(overlaps1)
num1
num1 <- length(overlaps1)
# Get Venn Counts and the peaks in each set
x <- getVennCounts(peaks = peak_list, conds = peak_names, stranded = stranded)
peak_names = names(peak_list)
peak_names
in_fill = c("blue", "gold3")
alpha = .4
out_color = "black"
name_color = "black"
text_color = "black"
name_size = 5
label_size = 3
title = ""
subtitle = ""
venn +
annotate("text", x = 0, y = 0.3)
if(length(in_fill) != length(peak_list)) {
if(length(peak_list) == 2){ in_fill <- c("blue", "gold3") }
else if(length(peak_list) == 3){ in_fill <- c("blue", "gold3", "pink") }
else if(length(peak_list) == 4){ in_fill <- c("blue", "gold3", "pink", "green") }
else if(length(peak_list) == 5){ in_fill <- c("blue", "gold3", "pink", "green", "orange") }
}
# Transform the matrix of the peaks in each set in order to plot the Venn
y <- x$matrix %>%
as_tibble() %>%
magrittr::set_colnames(c("Peak", paste("cond", 1:length(peak_list), sep = ""))) %>%
reshape2::melt() %>% mutate(value = if_else(value == 1, Peak, NULL)) %>%
tidyr::pivot_wider(names_from = "variable", values_from = "value") %>%
dplyr::select(-Peak) %>%
dplyr::as_tibble() %>%
as.list() %>%
purrr::set_names(peak_names) %>%
purrr::map(~na.omit(.x))
# Get Venn Counts and the peaks in each set
x <- getVennCounts(peaks = peak_list, conds = peak_names, stranded = stranded)
peak_list
getVennCounts <- function(peaks,
conds = names(peaks),
conds_order = conds,
stranded = FALSE,
plot = FALSE){
# Load required packages
(require(dplyr, quietly = T))
(require(purrr, quietly = T))
(require(plyranges, quietly = T))
(require(magrittr, quietly = T))
(require(ChIPpeakAnno, quietly = T))
if(!is.list(peaks)){ stop("'peaks' must be a (named) list of dataframes with the columns 'seqnames', 'start' and 'end'.") }
else if(is.null(conds)){ stop("'conds' must a not-NULL character vector with the conditions of the data frames in 'peaks.") }
else if(length(peaks) != length(conds)){ stop("'peaks' and 'conds' must have the same length.") }
len <- length(peaks)
# Change strand values to accepted values (e.g. . to *)
peaks <- peaks %>% purrr::map(~dplyr::mutate(.x, strand = if_else(strand %in% c(".", "*", "\\.", "\\*"), "*", strand)))
# Set names of the elements in the list
peaks <- peaks %>% purrr::set_names(nm = conds)
# If stranded, separate...
if(!stranded){
overlaps <- suppressMessages(peaks %>%
purrr::map(~plyranges::as_granges(.x)) %>%
makeVennDiagram(Peaks = ., NameOfPeaks = conds, plot = plot, ignore.strand = !stranded))
overlaps <- overlaps$vennCounts
} else {
# Separate peaks by strand
peaks_plus     <- peaks %>% purrr::map(~dplyr::filter(.x, strand == "+"))
peaks_minus    <- peaks %>% purrr::map(~dplyr::filter(.x, strand == "-"))
peaks_nostrand <- peaks %>% purrr::map(~dplyr::filter(.x, strand %in% c(".", "*", "\\.", "\\*"))) %>% purrr::map(~dplyr::mutate(.x, strand = "*"))
# Overlap peaks by strand
overlaps_plus     <- suppressMessages(peaks_plus %>% purrr::map(~plyranges::as_granges(.x)) %>%
makeVennDiagram(Peaks = ., NameOfPeaks = conds, plot = plot))
overlaps_minus    <- suppressMessages(peaks_minus %>% purrr::map(~plyranges::as_granges(.x)) %>%
makeVennDiagram(Peaks = ., NameOfPeaks = conds, plot = plot))
overlaps_nostrand <- suppressMessages(peaks_nostrand %>% purrr::map(~plyranges::as_granges(.x)) %>%
makeVennDiagram(Peaks = ., NameOfPeaks = conds, plot = plot))
overlaps_plus     <- overlaps_plus$vennCounts
overlaps_minus    <- overlaps_minus$vennCounts
overlaps_nostrand <- overlaps_nostrand$vennCounts
overlaps <- overlaps_plus
for (i in 1:nrow(overlaps)){
overlaps[i,ncol(overlaps)] <- sum(overlaps_plus[i,ncol(overlaps)], overlaps_minus[i,ncol(overlaps)], overlaps_nostrand[i,ncol(overlaps)])
}
}
# Create matrix of overlapping peaks
matrix <- matrix(data = rep(0, len), ncol = len, byrow=T) %>% set_colnames(conds)
for(row in 1:nrow(overlaps)){
counts <- overlaps[row, len+1]
m <- matrix(rep(overlaps[row, 1:len], counts), ncol = len, byrow = T)
matrix <- rbind(matrix, m)
}
x <- matrix %>%
na.omit %>%
as.data.frame() %>%
dplyr::mutate(rowSum = rowSums(.)) %>%
dplyr::filter(rowSum != 0) %>%
dplyr::mutate(peak = paste("peak", 1:nrow(.), sep = "")) %>%
dplyr::select(peak, everything(), -rowSum)
return(list("matrix" = x, "vennCounts" = overlaps))
}
# Get Venn Counts and the peaks in each set
x <- getVennCounts(peaks = peak_list, conds = peak_names, stranded = stranded)
# Set default colors in case the number of specified colors
#   does not match the number elements in 'peak_list'
if(length(in_fill) != length(peak_list)) {
if(length(peak_list) == 2){ in_fill <- c("blue", "gold3") }
else if(length(peak_list) == 3){ in_fill <- c("blue", "gold3", "pink") }
else if(length(peak_list) == 4){ in_fill <- c("blue", "gold3", "pink", "green") }
else if(length(peak_list) == 5){ in_fill <- c("blue", "gold3", "pink", "green", "orange") }
}
# Transform the matrix of the peaks in each set in order to plot the Venn
y <- x$matrix %>%
as_tibble() %>%
magrittr::set_colnames(c("Peak", paste("cond", 1:length(peak_list), sep = ""))) %>%
reshape2::melt() %>% mutate(value = if_else(value == 1, Peak, NULL)) %>%
tidyr::pivot_wider(names_from = "variable", values_from = "value") %>%
dplyr::select(-Peak) %>%
dplyr::as_tibble() %>%
as.list() %>%
purrr::set_names(peak_names) %>%
purrr::map(~na.omit(.x))
# Draw the Venn diagram with ggvenn
venn <- ggvenn::ggvenn(data = y, show_percentage = percent,
fill_color = in_fill, fill_alpha = alpha,
stroke_color =  out_color,
set_name_color = name_color, set_name_size = name_size,
text_color = text_color, text_size = label_size) +
scale_y_discrete(expand = c(0,0.5))
if(length(peak_list) %in% 4:5) { venn <- venn + scale_x_discrete(expand = c(0,0.5))}
if(!is.null(title)){
venn <- venn + labs(title = title, subtitle = subtitle) +
theme(plot.title = element_text(face = "bold", hjust = .5),
plot.subtitle = element_text(face = "italic", hjust = .5))
}
venn +
annotate("text", x = 0, y = 0.3)
venn + annotate("text", 0, 0.3, label = num1)
venn + annotate("text", 0, 0.3, label = num1, color = in_fill[1])
venn +
annotate("text", 0, 0.3, label = num1, color = in_fill[1]) +
annotate("text", 0, .0.3, label = num2, color = in_fill[2])
venn +
annotate("text", 0, 0.3, label = num1, color = in_fill[1]) +
annotate("text", 0, -0.3, label = num2, color = in_fill[2])
# Count the numbers
num1 <- length(overlaps1)
num2 <- length(overlaps2)
venn +
annotate("text", 0, 0.3, label = num1, color = in_fill[1]) +
annotate("text", 0, -0.3, label = num2, color = in_fill[2])
colorspace::darken("blue")
venn +
annotate("text", 0, 0.3, label = num1, color = darken(in_fill[1])) +
annotate("text", 0, -0.3, label = num2, color = darken(in_fill[2]))
venn +
annotate("text", 0, 0.3, label = num1, color = colorspace::darken(in_fill[1])) +
annotate("text", 0, -0.3, label = num2, color = colorspace::darken(in_fill[2]))
venn +
annotate("text", 0, 0.3, label = num1, color = colorspace::darken(in_fill[1], amount = 1)) +
annotate("text", 0, -0.3, label = num2, color = colorspace::darken(in_fill[2]))
venn +
annotate("text", 0, 0.3, label = num1, color = colorspace::darken(in_fill[1], amount = 1)) +
annotate("text", 0, -0.3, label = num2, color = colorspace::darken(in_fill[2], amount = 1))
venn +
annotate("text", 0, 0.3, label = num1, color = colorspace::darken(in_fill[1], amount = .5)) +
annotate("text", 0, -0.3, label = num2, color = colorspace::darken(in_fill[2], amount = .5))
venn +
annotate("text", 0, 0.3, label = num1, color = colorspace::darken(in_fill[1], amount = .5), face = "bold") +
annotate("text", 0, -0.3, label = num2, color = colorspace::darken(in_fill[2], amount = .5))
venn +
annotate("text", 0, 0.3, label = num1, color = colorspace::darken(in_fill[1], amount = .5), fontface = "italic") +
annotate("text", 0, -0.3, label = num2, color = colorspace::darken(in_fill[2], amount = .5))
venn +
annotate("text", 0, 0.3, label = num1, color = colorspace::darken(in_fill[1], amount = .5), fontface = "bold") +
annotate("text", 0, -0.3, label = num2, color = colorspace::darken(in_fill[2], amount = .5))
venn +
annotate("text", 0, 0.3, label = num1, color = colorspace::darken(in_fill[1], amount = .5), fontface = "italic") +
annotate("text", 0, -0.3, label = num2, color = colorspace::darken(in_fill[2], amount = .5), fontface = "italic")
venn +
annotate("text", 0, 0.3, label = num1, color = colorspace::darken(in_fill[1], amount = .5), fontface = "italic") +
annotate("text", 0, -0.3, label = num2, color = colorspace::darken(in_fill[2], amount = .5), fontface = "bold")
venn +
annotate("text", 0, 0.3, label = num1, color = colorspace::darken(in_fill[1], amount = .5), fontface = "bold") +
annotate("text", 0, -0.3, label = num2, color = colorspace::darken(in_fill[2], amount = .5), fontface = "bold")
# Add number or true overlaps for each set of regions
if(true_overlaps & length(peak_list)==2) {
# Peaks as GRanges
peaks1 <- peak_list[[1]] %>% plyranges::as_granges()
peaks2 <- peak_list[[2]] %>% plyranges::as_granges()
# Find overlapping regions for each set
overlaps1 <- plyranges::filter_by_overlaps(peaks1, peaks2)
overlaps2 <- plyranges::filter_by_overlaps(peaks2, peaks1)
# Count the numbers
num1 <- length(overlaps1)
num2 <- length(overlaps2)
venn <- venn +
annotate("text", 0, 0.3, label = num1, color = colorspace::darken(in_fill[1], amount = .5), fontface = "bold") +
annotate("text", 0, -0.3, label = num2, color = colorspace::darken(in_fill[2], amount = .5), fontface = "bold")
}
ggVennPeaks <- function(peak_list,
peak_names = names(peak_list),
percent = TRUE,
stranded = FALSE,
true_overlaps = FALSE,
in_fill = c("blue", "gold3"),
alpha = .4,
out_color = "black",
name_color = "black",
text_color = "black",
name_size = 5,
label_size = 3,
title = "",
subtitle = ""){
# Load requireed packages
require(ggvenn)
require(dplyr)
require(reshape2)
require(magrittr)
require(purrr)
require(tidyr)
# Check that inputs are OK
if(!is.list(peak_list)){ stop("'peak_list' must be a (named) list of dataframes with, at least, the columns 'seqnames', 'start' and 'end'.") }
if(length(peak_list) != length(peak_names)){ stop("'peak_names' must be a character vector with the same length as 'peak_list'.") }
if(stranded){
if(!"strand" %in% colnames(bind_rows(peak_list))){ stop("If 'stranded' is TRUE, a 'strand' column must be present in all the elements from peak list.") }
else { peak_list <- peak_list %>% purrr::map(~dplyr::mutate(.x, strand = if_else(strand %in% c("\\.", "\\*", ".", "*"), "*", strand))) }
}
# Check true number of overlaps for each region; convert stranded and percent to FALSE
if(true_overlaps & length(peak_list)==2) { stranded <- FALSE; percent  <- FALSE }
# Change strand values to accepted values (e.g. . to *)
peak_list <- peak_list %>% purrr::map(~dplyr::mutate(.x, strand = if_else(strand %in% c(".", "*", "\\.", "\\*"), "*", strand)))
# Get Venn Counts and the peaks in each set
x <- getVennCounts(peaks = peak_list, conds = peak_names, stranded = stranded)
# Set default colors in case the number of specified colors
#   does not match the number elements in 'peak_list'
if(length(in_fill) != length(peak_list)) {
if(length(peak_list) == 2){ in_fill <- c("blue", "gold3") }
else if(length(peak_list) == 3){ in_fill <- c("blue", "gold3", "pink") }
else if(length(peak_list) == 4){ in_fill <- c("blue", "gold3", "pink", "green") }
else if(length(peak_list) == 5){ in_fill <- c("blue", "gold3", "pink", "green", "orange") }
}
# Transform the matrix of the peaks in each set in order to plot the Venn
y <- x$matrix %>%
as_tibble() %>%
magrittr::set_colnames(c("Peak", paste("cond", 1:length(peak_list), sep = ""))) %>%
reshape2::melt() %>% mutate(value = if_else(value == 1, Peak, NULL)) %>%
tidyr::pivot_wider(names_from = "variable", values_from = "value") %>%
dplyr::select(-Peak) %>%
dplyr::as_tibble() %>%
as.list() %>%
purrr::set_names(peak_names) %>%
purrr::map(~na.omit(.x))
# Draw the Venn diagram with ggvenn
venn <- ggvenn::ggvenn(data = y, show_percentage = percent,
fill_color = in_fill, fill_alpha = alpha,
stroke_color =  out_color,
set_name_color = name_color, set_name_size = name_size,
text_color = text_color, text_size = label_size) +
scale_y_discrete(expand = c(0,0.5))
if(length(peak_list) %in% 4:5) { venn <- venn + scale_x_discrete(expand = c(0,0.5))}
if(!is.null(title)){
venn <- venn + labs(title = title, subtitle = subtitle) +
theme(plot.title = element_text(face = "bold", hjust = .5),
plot.subtitle = element_text(face = "italic", hjust = .5))
}
# Add number or true overlaps for each set of regions
if(true_overlaps & length(peak_list)==2) {
# Peaks as GRanges
peaks1 <- peak_list[[1]] %>% plyranges::as_granges()
peaks2 <- peak_list[[2]] %>% plyranges::as_granges()
# Find overlapping regions for each set
overlaps1 <- plyranges::filter_by_overlaps(peaks1, peaks2)
overlaps2 <- plyranges::filter_by_overlaps(peaks2, peaks1)
# Count the numbers
num1 <- length(overlaps1)
num2 <- length(overlaps2)
venn <- venn +
annotate("text", 0, 0.3, label = num1, color = colorspace::darken(in_fill[1], amount = .5), fontface = "bold") +
annotate("text", 0, -0.3, label = num2, color = colorspace::darken(in_fill[2], amount = .5), fontface = "bold")
}
# Return the Venn diagram.
return(venn)
}
ggVennPeaks(peak_list, true_overlaps = T)
ggVennPeaks(peak_list, true_overlaps = T)
venn <- venn +
annotate("text", 0, 0.3, label = num1, color = colorspace::darken(in_fill[1], amount = .5), fontface = "bold") +
annotate("text", 0, -0.3, label = num2, color = colorspace::darken(in_fill[2], amount = .5), fontface = "bold")
venn
ggVennPeaks(peak_list)
ggVennPeaks(peak_list, true_overlaps = T)
ggVennPeaks <- function(peak_list,
peak_names = names(peak_list),
percent = TRUE,
stranded = FALSE,
true_overlaps = FALSE,
in_fill = c("blue", "gold3"),
alpha = .4,
out_color = "black",
name_color = "black",
text_color = "black",
name_size = 5,
label_size = 3,
title = "",
subtitle = ""){
# Load requireed packages
require(ggvenn)
require(dplyr)
require(reshape2)
require(magrittr)
require(purrr)
require(tidyr)
# Check that inputs are OK
if(!is.list(peak_list)){ stop("'peak_list' must be a (named) list of dataframes with, at least, the columns 'seqnames', 'start' and 'end'.") }
if(length(peak_list) != length(peak_names)){ stop("'peak_names' must be a character vector with the same length as 'peak_list'.") }
if(stranded){
if(!"strand" %in% colnames(bind_rows(peak_list))){ stop("If 'stranded' is TRUE, a 'strand' column must be present in all the elements from peak list.") }
else { peak_list <- peak_list %>% purrr::map(~dplyr::mutate(.x, strand = if_else(strand %in% c("\\.", "\\*", ".", "*"), "*", strand))) }
}
# Check true number of overlaps for each region; convert stranded and percent to FALSE
if(true_overlaps & length(peak_list)==2) { stranded <- FALSE; percent  <- FALSE }
# Change strand values to accepted values (e.g. . to *)
peak_list <- peak_list %>% purrr::map(~dplyr::mutate(.x, strand = if_else(strand %in% c(".", "*", "\\.", "\\*"), "*", strand)))
# Get Venn Counts and the peaks in each set
x <- getVennCounts(peaks = peak_list, conds = peak_names, stranded = stranded)
# Set default colors in case the number of specified colors
#   does not match the number elements in 'peak_list'
if(length(in_fill) != length(peak_list)) {
if(length(peak_list) == 2){ in_fill <- c("blue", "gold3") }
else if(length(peak_list) == 3){ in_fill <- c("blue", "gold3", "pink") }
else if(length(peak_list) == 4){ in_fill <- c("blue", "gold3", "pink", "green") }
else if(length(peak_list) == 5){ in_fill <- c("blue", "gold3", "pink", "green", "orange") }
}
# Transform the matrix of the peaks in each set in order to plot the Venn
y <- x$matrix %>%
as_tibble() %>%
magrittr::set_colnames(c("Peak", paste("cond", 1:length(peak_list), sep = ""))) %>%
reshape2::melt() %>% mutate(value = if_else(value == 1, Peak, NULL)) %>%
tidyr::pivot_wider(names_from = "variable", values_from = "value") %>%
dplyr::select(-Peak) %>%
dplyr::as_tibble() %>%
as.list() %>%
purrr::set_names(peak_names) %>%
purrr::map(~na.omit(.x))
# Draw the Venn diagram with ggvenn
venn <- ggvenn::ggvenn(data = y, show_percentage = percent,
fill_color = in_fill, fill_alpha = alpha,
stroke_color =  out_color,
set_name_color = name_color, set_name_size = name_size,
text_color = text_color, text_size = label_size) +
scale_y_discrete(expand = c(0,0.5))
if(length(peak_list) %in% 4:5) { venn <- venn + scale_x_discrete(expand = c(0,0.5))}
if(!is.null(title)){
venn <- venn + labs(title = title, subtitle = subtitle) +
theme(plot.title = element_text(face = "bold", hjust = .5),
plot.subtitle = element_text(face = "italic", hjust = .5))
}
# Add number or true overlaps for each set of regions
if(true_overlaps & length(peak_list)==2) {
# Peaks as GRanges
peaks1 <- peak_list[[1]] %>% plyranges::as_granges()
peaks2 <- peak_list[[2]] %>% plyranges::as_granges()
# Find overlapping regions for each set
overlaps1 <- plyranges::filter_by_overlaps(peaks1, peaks2)
overlaps2 <- plyranges::filter_by_overlaps(peaks2, peaks1)
# Count the numbers
num1 <- length(overlaps1)
num2 <- length(overlaps2)
# Annotate true numbers
venn <- venn +
annotate("text", 0, 0.3, label = as.character(num1), color = colorspace::darken(in_fill[1], amount = .5), fontface = "bold") +
annotate("text", 0, -0.3, label = as.character(num2), color = colorspace::darken(in_fill[2], amount = .5), fontface = "bold")
}
# Return the Venn diagram.
return(venn)
}
ggVennPeaks(peak_list, true_overlaps = T)
colorspace::darken(in_fill[1], amount = .5)
colorspace::darken(in_fill[2], amount = .5)
# Load required packages
require(plyranges)
require(colorspace)
plyranges
ggVennPeaks <- function(peak_list,
peak_names = names(peak_list),
percent = TRUE,
stranded = FALSE,
true_overlaps = FALSE,
in_fill = c("blue", "gold3"),
alpha = .4,
out_color = "black",
name_color = "black",
text_color = "black",
name_size = 5,
label_size = 3,
title = "",
subtitle = ""){
# Load requireed packages
require(ggvenn)
require(dplyr)
require(reshape2)
require(magrittr)
require(purrr)
require(tidyr)
# Check that inputs are OK
if(!is.list(peak_list)){ stop("'peak_list' must be a (named) list of dataframes with, at least, the columns 'seqnames', 'start' and 'end'.") }
if(length(peak_list) != length(peak_names)){ stop("'peak_names' must be a character vector with the same length as 'peak_list'.") }
if(stranded){
if(!"strand" %in% colnames(bind_rows(peak_list))){ stop("If 'stranded' is TRUE, a 'strand' column must be present in all the elements from peak list.") }
else { peak_list <- peak_list %>% purrr::map(~dplyr::mutate(.x, strand = if_else(strand %in% c("\\.", "\\*", ".", "*"), "*", strand))) }
}
# Check true number of overlaps for each region; convert stranded and percent to FALSE
if(true_overlaps & length(peak_list)==2) { stranded <- FALSE; percent  <- FALSE }
# Change strand values to accepted values (e.g. . to *)
peak_list <- peak_list %>% purrr::map(~dplyr::mutate(.x, strand = if_else(strand %in% c(".", "*", "\\.", "\\*"), "*", strand)))
# Get Venn Counts and the peaks in each set
x <- getVennCounts(peaks = peak_list, conds = peak_names, stranded = stranded)
# Set default colors in case the number of specified colors
#   does not match the number elements in 'peak_list'
if(length(in_fill) != length(peak_list)) {
if(length(peak_list) == 2){ in_fill <- c("blue", "gold3") }
else if(length(peak_list) == 3){ in_fill <- c("blue", "gold3", "pink") }
else if(length(peak_list) == 4){ in_fill <- c("blue", "gold3", "pink", "green") }
else if(length(peak_list) == 5){ in_fill <- c("blue", "gold3", "pink", "green", "orange") }
}
# Transform the matrix of the peaks in each set in order to plot the Venn
y <- x$matrix %>%
as_tibble() %>%
magrittr::set_colnames(c("Peak", paste("cond", 1:length(peak_list), sep = ""))) %>%
reshape2::melt() %>% mutate(value = if_else(value == 1, Peak, NULL)) %>%
tidyr::pivot_wider(names_from = "variable", values_from = "value") %>%
dplyr::select(-Peak) %>%
dplyr::as_tibble() %>%
as.list() %>%
purrr::set_names(peak_names) %>%
purrr::map(~na.omit(.x))
# Draw the Venn diagram with ggvenn
venn <- ggvenn::ggvenn(data = y, show_percentage = percent,
fill_color = in_fill, fill_alpha = alpha,
stroke_color =  out_color,
set_name_color = name_color, set_name_size = name_size,
text_color = text_color, text_size = label_size) +
scale_y_discrete(expand = c(0,0.5))
if(length(peak_list) %in% 4:5) { venn <- venn + scale_x_discrete(expand = c(0,0.5))}
if(!is.null(title)){
venn <- venn + labs(title = title, subtitle = subtitle) +
theme(plot.title = element_text(face = "bold", hjust = .5),
plot.subtitle = element_text(face = "italic", hjust = .5))
}
# Add number or true overlaps for each set of regions
if(true_overlaps & length(peak_list)==2) {
# Load required packages
suppressPackageStartupMessages(require(plyranges))
suppressPackageStartupMessages(require(colorspace))
# Peaks as GRanges
peaks1 <- peak_list[[1]] %>% plyranges::as_granges()
peaks2 <- peak_list[[2]] %>% plyranges::as_granges()
# Find overlapping regions for each set
overlaps1 <- plyranges::filter_by_overlaps(peaks1, peaks2)
overlaps2 <- plyranges::filter_by_overlaps(peaks2, peaks1)
# Count the numbers
num1 <- length(overlaps1)
num2 <- length(overlaps2)
# Annotate true numbers
venn <- venn +
annotate("text", 0, 0.3, label = as.character(num1), color = colorspace::darken(in_fill[1], amount = .5), fontface = "bold") +
annotate("text", 0, -0.3, label = as.character(num2), color = colorspace::darken(in_fill[2], amount = .5), fontface = "bold")
}
# Return the Venn diagram.
return(venn)
}
ggVennPeaks(peak_list, true_overlaps = T)
devtools::document()
pkgdown::build_site()
devtools::install_github("amitjavilaventura/plotmics", upgrade = T)
devtools::document()
devtools::document()
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
devtools::install_github("amitjavilaventura/plotmics")
