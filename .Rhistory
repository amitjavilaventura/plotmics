in_fill = c("blue", "gold3"), alpha = .4,
out_color = "black", name_color = "black", text_color = "black",
name_size = 5, label_size = 3){
# Load requireed packages
require(ggvenn)
require(dplyr)
require(reshape2)
require(magrittr)
require(purrr)
require(tidyr)
# Check that inputs are OK
if(!is.list(peak_list)){ stop("'peak_list' must be a (named) list of dataframes with the columns 'seqnames', 'start' and 'end'.") }
else if(length(peak_list) != length(peak_names)){ stop("'peak_names' must be a character vector with the same length as 'peak_list'.") }
# Get Venn Counts and the peaks in each set
x <- getVennCounts(peak_list)
# Transform the matrix of thee peaks in each set in ordeer to plot the Venn
y <- x$matrix %>%
as_tibble() %>%
magrittr::set_colnames(c("Peak", paste("cond", 1:length(peak_list), sep = ""))) %>%
reshape2::melt() %>% mutate(value = if_else(value == 1, Peak, NULL)) %>%
tidyr::pivot_wider(names_from = "variable", values_from = "value") %>%
dplyr::select(-Peak) %>%
dplyr::as_tibble() %>%
as.list() %>%
purrr::set_names(peak_names)
# Draw the Venn diagram with ggvenn
venn <- ggvenn::ggvenn(data = y, show_percentage = percent,
fill_color = in_fill, fill_alpha = alpha,
stroke_color =  out_color,
set_name_color = color, set_name_size = name_size,
text_color = text_color, text_size = label_size)
# Return the Venn diagram.
return(venn)
}
ggVennPeaks(peak_list)
getVennCounts <- function(peaks, conds = names(peaks), conds_order = conds, plot = F){
require(pkgcond)
require(purrr) %>% suppress_messages() %>% suppress_warnings()
require(dplyr) %>% suppress_messages() %>% suppress_warnings()
require(plyranges) %>% suppress_messages() %>% suppress_warnings()
require(magrittr) %>% suppress_messages() %>% suppress_warnings()
require(ChIPpeakAnno) %>% suppress_messages() %>% suppress_warnings()
if(!is.list(peaks)){ stop("'peaks' must be a (named) list of dataframes with the columns 'seqnames', 'start' and 'end'.") }
else if(is.null(conds)){ stop("'conds' must a not-NULL character vector with the conditions of the data frames in 'peaks.") }
else if(length(peaks) != length(conds)){ stop("'peaks' and 'conds' must have the same length.") }
len <- length(peaks)
peaks <- peaks %>% set_names(nm = conds)
overlaps <- peaks[conds_order] %>%
purrr::map(~as_granges(.x)) %>%
makeVennDiagram(plot = plot) %>%
suppress_messages() %>% suppress_warnings()
overlaps <- overlaps$vennCounts
matrix <- matrix(data = rep(0, len), ncol = len, byrow=T) %>% set_colnames(conds_order)
for(row in 1:nrow(overlaps)){
counts <- overlaps[row, len+1]
m <- matrix(rep(overlaps[row, 1:len], counts), ncol = len, byrow = T)
matrix <- rbind(matrix, m)
}
x <- matrix %>%
na.omit %>%
as.data.frame() %>%
dplyr::mutate(rowSum = rowSums(.)) %>%
dplyr::filter(rowSum != 0) %>%
dplyr::mutate(peak = paste("peak", 1:nrow(.), sep = "")) %>%
dplyr::select(peak, everything(), -rowSum)
return(list("matrix" = x, "vennCounts" = overlaps))
}
ggVennPeaks(peak_list)
}
}
}
ggVennPeaks <- function(peak_list, peak_names = names(peak_list), percent = T,
in_fill = c("blue", "gold3"), alpha = .4,
out_color = "black", name_color = "black", text_color = "black",
name_size = 5, label_size = 3){
# Load requireed packages
require(ggvenn)
require(dplyr)
require(reshape2)
require(magrittr)
require(purrr)
require(tidyr)
# Check that inputs are OK
if(!is.list(peak_list)){ stop("'peak_list' must be a (named) list of dataframes with the columns 'seqnames', 'start' and 'end'.") }
else if(length(peak_list) != length(peak_names)){ stop("'peak_names' must be a character vector with the same length as 'peak_list'.") }
# Get Venn Counts and the peaks in each set
x <- getVennCounts(peak_list)
# Transform the matrix of thee peaks in each set in ordeer to plot the Venn
y <- x$matrix %>%
as_tibble() %>%
magrittr::set_colnames(c("Peak", paste("cond", 1:length(peak_list), sep = ""))) %>%
reshape2::melt() %>% mutate(value = if_else(value == 1, Peak, NULL)) %>%
tidyr::pivot_wider(names_from = "variable", values_from = "value") %>%
dplyr::select(-Peak) %>%
dplyr::as_tibble() %>%
as.list() %>%
purrr::set_names(peak_names)
# Draw the Venn diagram with ggvenn
venn <- ggvenn::ggvenn(data = y, show_percentage = percent,
fill_color = in_fill, fill_alpha = alpha,
stroke_color =  out_color,
set_name_color = name_color, set_name_size = name_size,
text_color = text_color, text_size = label_size)
# Return the Venn diagram.
return(venn)
}
ggVennPeaks(peak_list)
peak_list
# Get Venn Counts and the peaks in each set
x <- getVennCounts(peak_list)
x
# Transform the matrix of thee peaks in each set in ordeer to plot the Venn
y <- x$matrix %>%
as_tibble() %>%
magrittr::set_colnames(c("Peak", paste("cond", 1:length(peak_list), sep = ""))) %>%
reshape2::melt() %>% mutate(value = if_else(value == 1, Peak, NULL)) %>%
tidyr::pivot_wider(names_from = "variable", values_from = "value") %>%
dplyr::select(-Peak) %>%
dplyr::as_tibble() %>%
as.list() %>%
purrr::set_names(peak_names)
peak_names = names(peak_list)
# Transform the matrix of thee peaks in each set in ordeer to plot the Venn
y <- x$matrix %>%
as_tibble() %>%
magrittr::set_colnames(c("Peak", paste("cond", 1:length(peak_list), sep = ""))) %>%
reshape2::melt() %>% mutate(value = if_else(value == 1, Peak, NULL)) %>%
tidyr::pivot_wider(names_from = "variable", values_from = "value") %>%
dplyr::select(-Peak) %>%
dplyr::as_tibble() %>%
as.list() %>%
purrr::set_names(peak_names)
y
percent = T
alpha = .4
in_fill = c("blue", "gold3")
out_color = "black"
name_color = "black"
text_color = "black"
label_size = 3
name_size = 5
# Draw the Venn diagram with ggvenn
venn <- ggvenn::ggvenn(data = y, show_percentage = percent,
fill_color = in_fill, fill_alpha = alpha,
stroke_color =  out_color,
set_name_color = name_color, set_name_size = name_size,
text_color = text_color, text_size = label_size)
venn
if (!require(devtools)) install.packages("devtools")
devtools::install_github("yanlinlin82/ggvenn")
if (!require(devtools)) install.packages("devtools")
devtools::install_github("yanlinlin82/ggvenn", force = T)
ggVennPeaks(peak_list)
}
}
name_size = 5, label_size = 3){
ggVennPeaks <- function(peak_list, peak_names = names(peak_list), percent = T,
in_fill = c("blue", "gold3"), alpha = .4,
out_color = "black", name_color = "black", text_color = "black",
name_size = 5, label_size = 3){
# Load requireed packages
require(ggvenn)
require(dplyr)
require(reshape2)
require(magrittr)
require(purrr)
require(tidyr)
# Check that inputs are OK
if(!is.list(peak_list)){ stop("'peak_list' must be a (named) list of dataframes with the columns 'seqnames', 'start' and 'end'.") }
else if(length(peak_list) != length(peak_names)){ stop("'peak_names' must be a character vector with the same length as 'peak_list'.") }
# Get Venn Counts and the peaks in each set
x <- getVennCounts(peak_list)
# Transform the matrix of thee peaks in each set in ordeer to plot the Venn
y <- x$matrix %>%
as_tibble() %>%
magrittr::set_colnames(c("Peak", paste("cond", 1:length(peak_list), sep = ""))) %>%
reshape2::melt() %>% mutate(value = if_else(value == 1, Peak, NULL)) %>%
tidyr::pivot_wider(names_from = "variable", values_from = "value") %>%
dplyr::select(-Peak) %>%
dplyr::as_tibble() %>%
as.list() %>%
purrr::set_names(peak_names)
# Draw the Venn diagram with ggvenn
venn <- ggvenn::ggvenn(data = y, show_percentage = percent,
fill_color = in_fill, fill_alpha = alpha,
stroke_color =  out_color,
set_name_color = name_color, set_name_size = name_size,
text_color = text_color, text_size = label_size)
# Return the Venn diagram.
return(venn)
}
ggVennPeaks(peak_list)
ggVennPeaks(peak_list, out_color = "black", in_fill = c("blue", "yellow"))
y
# Draw the Venn diagram with ggvenn
venn <- ggvenn::ggvenn(data = y, show_percentage = percent, fill_alpha = alpha,
stroke_color =  out_color,
set_name_color = name_color, set_name_size = name_size,
text_color = text_color, text_size = label_size)
package_version(ggplot2)
package_version("ggplot2")
packageVersion("ggplot2")
packageVersion("tidyverse")
uninstall("ggplot2")
remove("package:ggplot2")
remove("ggplot2")
detach("package:ggplot2", unload = TRUE)
library(ggplot2)
remove.packages("ggplot2")
install.packages("ggplot2", repos = "https://cran.r-project.org/src/contrib/Archive/ggplot2/ggplot2_3.3.3.tar.gz")
install.packages("ggplot2", repos = "https://cran.r-project.org/src/contrib/Archive/ggplot2/ggplot2_3.3.3.tar.gz")
remotes::install_version("ggplot2", version = "3.3.3", repos = "http://cran.us.r-project.org")
ggVennPeaks(peak_list, out_color = "black", in_fill = c("blue", "yellow"))
devtools::load_all()
devtools::load_all()
library(seqViewR)
roxygen2::roxygenize()
devtools::load_all()
devtools::build_site()
library(seqViewR)
devtools::build_site()
devtools::build_site()
roxygen2::block_get_tags()
roxygen2::load_source()
roxygen2::load_source(path = ".")
roxygen2::load_pkgload(".")
devtools::load_all()
devtools::build_readme()
devtools::install()
devtools::as.package(".")
devtools::build_site()
devtools::document()
pkgdown::build_site()
pkgdown::preview_site()
pkgdown::build_site()
peak  <- list.files("testdata/")
peak  <- list.files("testdata/", "peak")
peak
peak  <- list.files("testdata/", "peak", full.names = T) %>% purrr::map(~read.delim(.x)) %>% setNames(c("X", "Y"))
library(tidyverse)
peak  <- list.files("testdata/", "peak", full.names = T) %>% purrr::map(~read.delim(.x)) %>% setNames(c("X", "Y"))
source('~/Desktop/Adria/Other/Packages/seqViewR/R/upsetPeakOverlap.R')
ggVennPeaks(peak_list = peak)
makeVennDiagram(Peaks = Peaks)
makeVennDiagram(Peaks = peak)
makeVennDiagram(Peaks = peak)
makeVennDiagram(Peaks = peak %>% purrr::map(~as_granges(.x)))
ggVennPeaks(peak_list = peak)
upsetPeaks(peaks = peak)
ggUpsetPeaks(peaks = peak)
upsetPeaks(peaks = peak)
ggUpsetPeaks(peaks = peak)
source('~/Desktop/Adria/Other/Packages/seqViewR/R/barAnno.R')
barAnno(peak)
degs <- list.files("testdata/", "diff", full.names = T) %>% purrr::map(~read.delim(.x))
barDEGs(degs, deg_names = c(1:3))
barDEGs <- function(deg_list, deg_names = names(deg_list),
name_pos = "min", xlim = NULL, position_num = 10,
xaxis = F, yaxis = F,
colors = c("green", "red"), alpha = 0.5){
# Load packages
require(dplyr)
require(purrr)
require(ggplot2)
# Check that inputs are OK
if(!is.list(deg_list)){ stop("'deg_list' must be a named list of data frames.") }
else if(!is.character(deg_names)){ stop("'deg_names' must be a character vector.") }
else if(length(deg_list) != length(deg_names)){ stop("'deg_list' and 'deg_names' must have the same lenght.") }
else if(!name_pos %in% c('min', 'left', 'right', 'none')){ stop("'name_pos' must be one of c('min', 'left', 'right', 'none').") }
else if(!is.null(xlim) & !is.numeric(xlim)){ stop("'xlim' must be NULL or a numeric vector of length 2.") }
else if(!is.logical(xaxis) | !is.logical(yaxis)){ stop("Both 'xaxis' and 'yaxis' must be a logical vector of length 1.") }
else if(!is.character(colors) | length(colors) != 2){ stop("'colors' must be a character vector of length 2 with valid color names/codes.") }
else if(!is.numeric(alpha) | alpha < 0 | alpha > 1){ stop("'alpha' must be a numeric vector of length 1 with a value between 0 and 1")}
# Named list of DEGs
deg_numbers <- deg_list %>%
# Add names to each element in the list
purrr::set_names(deg_names) %>%
# Count number of upregulated and downregulated genes in each contrast
purrr::map(~dplyr::count(.x, DEG)) %>%
purrr::map(~dplyr::filter(.x, DEG != "NS")) %>%
# Add a contrast variable using the name of each element in the list
purrr::imap(~dplyr::mutate(.x, contrast = .y)) %>%
# Bind all dataframes in one
bind_rows() %>%
# Change the number of downregulated genes to negative
mutate(number = if_else(DEG == "Downregulated", -n, n)) %>%
# Add a variable for the position of the number of DEGs and the hjust
mutate(pos_num   = if_else(DEG == "Downregulated", -position_num, position_num)) %>%
mutate(hjust_num = if_else(DEG == "Downregulated", 1, 0)) %>%
# Add a variable for the position of the name of the contrast
mutate(contrast_pos = if_else(DEG == "Downregulated", number-position_num, number+position_num))
# Set at which site will the contrast name be written
if(name_pos == "min"){
deg_numbers <- deg_numbers %>%
group_by(contrast) %>%
mutate(contrast_name = if_else(n == min(n), contrast, NULL)) %>%
ungroup()
} else if(name_pos == "left"){
deg_numbers <- deg_numbers %>%
mutate(contrast_name = if_else(n == -number, contrast, NULL))
} else if(name_pos == "right"){
deg_numbers <- deg_numbers %>%
mutate(contrast_name = if_else(n == number, contrast, NULL))
} else if(name_pos == "none"){
deg_numbers <- deg_numbers %>%
mutate(contrast_name = "")
}
# Do the plot
updown_bar <- deg_numbers %>%
ggplot(aes(number, contrast, fill = DEG)) +
geom_col(color = "black", width = 0.5, alpha = alpha) +
# Add the number of DEGs to each bar
geom_text(mapping = aes(label = n, x = pos_num, hjust = hjust_num), size = 3) +
# Add the name of the contrast
geom_text(mapping = aes(label = contrast_name, x = contrast_pos, hjust = hjust_num), size = 3)  +
# Change default colors
scale_fill_manual(values = c(colors[1], colors[2])) +
# Add vertical line at 0
geom_vline(aes(xintercept = 0), size = 0.5) +
# Call custom theme_updownbar
theme_barDEGs(xaxis = xaxis, yaxis = yaxis)
# Change limits of xaxis
if(!is.null(xlim)){updown_bar <- updown_bar + coord_cartesian(xlim = c(xlim[1], xlim[2]))}
# Return plot
return(updown_bar)
}
barDEGs(degs, deg_names = c(1:3))
barDEGs(degs, deg_names = as.character(1:3))
theme_barDEGs <- function(xaxis = F, yaxis = F){
# Load required packages
require(ggpubr)
# Custom theme
t <-
theme_pubr(border = F, margin = T, legend = "bottom") +
theme(axis.title = element_blank(),
legend.title = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank())
if(!xaxis){ t <- t + theme(axis.text.x = element_blank()) }
if(!yaxis){ t <- t + theme(axis.text.y = element_blank()) }
t
}
barDEGs(degs, deg_names = as.character(1:3))
DEcompare <- function(deg_list, threshold = 1.5,
genes = NULL,
xlim = c(-10, 10), ylim = c(-10, 10),
xlab = "Contrast1", ylab = "Contrast2",
main = "Comparison of Log2FC",
subtitle = paste(xlab, "vs", ylab),
color_corners = c("pink", "lightgreen", "cornflowerblue", "yellow"),
alpha_corners = c(.7)){
# Load packages
require(dplyr)
require(tibble)
require(ggplot2)
require(ggrepel)
require(ggpubr)
# Check that inputs are OK
if(!is.list(deg_list) | length(deg_list) != 2){ stop("'deg_list' must be a list of 2 data frames with the columns 'Geneid', 'log2FoldChange', 'padj' and 'DEG'.") }
else if(length(xlim) != 2 | length(ylim) != 2 ){ stop("Both 'xlim' and 'ylim' must be numeric vectors of lenght 2.") }
data <- inner_join(x = deg_list[[1]] %>% select(Geneid, log2FoldChange, padj, DEG),
y = deg_list[[2]] %>% select(Geneid, log2FoldChange, padj, DEG),
by="Geneid")
data <- data %>%
mutate(color = if_else(log2FoldChange.x >= threshold & log2FoldChange.y >= threshold, "positivecorr",
if_else(log2FoldChange.x >= threshold & log2FoldChange.y <= -threshold, "negativecorr",
if_else(log2FoldChange.x <= -threshold & log2FoldChange.y <= -threshold, "positivecorr",
if_else(log2FoldChange.x <= -threshold & log2FoldChange.y >= threshold, "negativecorr", "ns")))))
g <- ggplot(data, aes(log2FoldChange.x, log2FoldChange.y, color = color))
if(!is.null(color_corners)){
g <- g +
annotate(geom = "rect",
xmin = c(xlim[1], xlim[1], 0, 0),
xmax = c(0, 0, xlim[2], xlim[2]),
ymin = c(0,  ylim[1],  0,  ylim[1]),
ymax = c(ylim[2], 0, ylim[2], 0),
fill = color_corners, alpha = alpha_corners)
}
g <- g  +
geom_point(alpha = 1) +
coord_cartesian(xlim = xlim, ylim = ylim, expand = F) +
geom_hline(yintercept = threshold, linetype = 2, color = "black") +
geom_hline(yintercept = -threshold, linetype = 2, color = "black") +
geom_vline(xintercept = threshold, linetype = 2, color = "black") +
geom_vline(xintercept = -threshold, linetype = 2, color = "black") +
scale_colour_manual(values=c("positivecorr" = "darkred", "negativecorr" = "darkgreen", "ns" = "gray50"),
drop = T) +
ggtitle(main, subtitle) +
xlab(xlab) + ylab(ylab) +
theme_pubr(border = T, legend = "none") +
theme(legend.title = element_blank(),
plot.title = element_text(face="bold"),
plot.subtitle = element_text(face="italic"),
axis.title = element_text(face="bold"))
if(!is.null(genes)){
g <- g +
geom_text_repel(data = data %>% filter(Geneid %in% genes),
mapping = aes(label = Geneid, x = log2FoldChange.x, y = log2FoldChange.y),
color = "black", size = 4)
}
# return
return(g)
}
theme_chromReads <- function(main.size = 11, sub.size = 10, axis.size = 9){
# Load required packages
require(ggpubr)
# Custom theme
t <-
theme_pubr(border = T, margin = T, legend = "none") +
theme(plot.title = element_text(face = "bold", size = main.size, hjust = .5),
plot.subtitle = element_text(face = "italic", size = sub.size, hjust = .5),
axis.title = element_text(face = "bold", size = axis.size),
legend.title = element_blank())
t
}
DEcompare(degs)
DEcompare(degs[1:2])
bam <- "testdata/sampleX.bam"
chromReads(bam)
chromReads <- function(bamfile, chr.filt = c("Un", "random"),
main = NULL, main.size = 13, subtitle = NULL, sub.size = 11,
xlab = "Mapped reads", ylab = "Chromosome", axis.size = 9,
percent.label = T, percent.size = 3){
# Load required packages
require(Rsamtools)
require(ggplot2)
require(dplyr)
require(stringr)
# Calculate the number of reads mapping to each chromosome with Rsamtools::idxstatsBam()
chromReads <- idxstatsBam(bamfile)
# Remove names of strange chromosomes
chromReads <- chromReads[grep("chr", chromReads$seqnames),]
# Calculate the total number of mapped reads in "good" chromosomes
totalReads <- sum(chromReads$mapped)
# Calculate percentage of mapped reads in each chromosome against all mapped reads
chromReads$percentage <- chromReads$mapped/totalReads*100
# Filter strange chromosomees (i.e. "chrUn...")
for(i in chr.filt){
chromReads <- chromReads[(str_detect(chromReads$seqnames, pattern = i, negate = T)),]
}
# Draw a bar graph
b <- ggplot(data = chromReads, mapping = aes(mapped, seqnames, fill = seqnames)) +
geom_bar(stat = "identity", show.legend = legend, colour = "Gray15") +
ylab(label = ylab) + xlab(label = xlab) +
ggtitle(main, subtitle) +
# General formatting
theme_chromReads(main.size = main.size, sub.size = sub.size, axis.size = axis.size)
# Annotate labels (percentages)
if(percent.label == T){
b <- b + geom_text(aes(label = round(percentage, 2), x = mapped+max(mapped)*0.05), size = percent.size, hjust = 0) +
xlim(0, max(chromReads$mapped*1.20))
}
# Return bar graph
return(b)
}
chromReads(bam)
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4)
devtools::load_all("..")
# install devtools if not installed
if(!require(devtools)){ install.packages("devtools") }
# install plotmics if not installed
if(!require(plotmics)){ devtools::install_github("amitjavilaventura/plotmics") }
# load plotmics
library(plotmics)
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4)
devtools::load_all("..")
chromReads(bamfile = "../testdata/sampleX.bam")
chromReads(bamfile = "../testdata/sampleX.bam")
chromReads(bamfile = "../testdata/sampleX.bam")
require(ggpubr)
# install devtools if not installed
if(!require(devtools)){ install.packages("devtools") }
# install plotmics if not installed
if(!require(plotmics)){ devtools::install_github("amitjavilaventura/plotmics") }
# load plotmics
library(plotmics)
chromReads(bamfile = "../testdata/sampleX.bam")
chromReads(bamfile = "../testdata/sampleX.bam")
chromReads(bamfile = "../testdata/sampleX.bam", chr.filt = "chr2")
chromReads(bamfile = "../testdata/sampleX.bam", chr.filt = c("X", "Y"))
chromReads(bamfile = "../testdata/sampleX.bam", main = "This is a title",
subtitle = "This is a subtitle", xlab = "This the label of the X axis",
ylab = "This is the label of the Y axis",
main.size = 16, sub.size = 10, axis.size = 14, percent.size = 9)
chromReads(bamfile = "../testdata/sampleX.bam", percent.label = F)
devtools::load_all()
chromReads(bamfile = "../testdata/sampleX.bam")
chromReads(bamfile = "../testdata/sampleX.bam")
pkgdown::build_articles()
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4)
devtools::load_all("..")
library(dplyr)
library(purrr)
deg_list <- list.files("../testdata", "diff_exp", full.names = T, recursive = T) %>%
purrr::set_names(paste("cond", 1:3, sep = "")) %>%
purrr::map(~read.delim(.x))
deg_list
deg_list[[1]]
deg_list[[1]] %>% head()
barDEGs(deg_list = deg_list)
barDEGs(deg_list = deg_list, deg_names = c("Condition 1", "Condition 2", "Condition 3"))
barDEGs(deg_list = deg_list, name_pos = "left")
barDEGs(deg_list = deg_list, name_pos = "right")
barDEGs(deg_list = deg_list, name_pos = "right")
barDEGs(deg_list = deg_list, name_pos = "left")
barDEGs(deg_list = deg_list, name_pos = "left", deg_names = c("Condition 1", "Condition 2", "Condition 3"))
barDEGs(deg_list = deg_list, xlim = c(-1000, 1000))
barDEGs(deg_list = deg_list, xaxis = T)
barDEGs(deg_list = deg_list, xaxis = T, yaxis = T)
barDEGs(deg_list = deg_list, name_pos = "none")
barDEGs(deg_list = deg_list, name_pos = "none", yaxis = T)
pkgdown::build_articles()
