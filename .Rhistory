expr <- expr_list %>%
purrr::set_names(expr_names) %>%
purrr::map(~dplyr::select(.x, Geneid, log2FoldChange)) %>%
purrr::map(~dplyr::filter(.x, Geneid %in% genes)) %>%
purrr::imap(~magrittr::set_colnames(.x, value = c("Geneid", .y))) %>%
plyr::join_all(by = "Geneid") %>%
dplyr::relocate(Geneid)
## Scale
if(!is.null(scale)){
if("rows" %in% scale) { expr[,2:length(expr)] <- expr[,2:length(expr)] %>% t() %>% scale() %>% t() }
if("cols" %in% scale) { expr[,2:length(expr)] <- expr[,2:length(expr)] %>% scale() }
}
# Melt df with all Log2FCs
expr.m <- reshape2::melt(expr, variable.name = "Condition", id.vars = "Geneid", value.name = "Expr")
# Initialize heatmap -----
# Get the legend breaks.
if(is.null(legend_scale)){
lower    <- min(expr.m$Expr)
higher   <- max(expr.m$Expr)
midpoint <- (higher+(lower))/2
breaks   <- round(seq(from = lower, to = higher, by = (higher-lower)/legend_breaks_num))
} else {
lower    <- legend_scale[1]
higher   <- legend_scale[2]
midpoint <- legend_midpoint
breaks   <- (seq(from = lower, to = higher, by = legend_breaks_by))
}
## Plot heatmap
hm <- ggplot(expr.m, aes(Condition, Geneid) ) +
geom_tile(aes(fill = Expr)) +
force_panelsizes(rows = unit(hm_height, "mm"),
cols = unit(hm_width, "mm"))  +
coord_fixed() +
scale_fill_gradient2(limits = c(legend_scale[1], legend_scale[2]), midpoint = midpoint,
breaks = breaks,
oob = scales::squish,
low = hm_colors[1], mid = hm_colors[2], high = hm_colors[3],
guide = guide_colorbar(title = legend_title,
title.position = "right",
title.theme = element_text(angle = 270,
hjust = .5, vjust = .5,
size = legend_title_size),
frame.colour = "black", frame.linewidth = 1.5,
ticks.colour = NA,
barheight = unit(legend_height, "mm"))) +
theme_pubr(border = T, legend = "right", margin = T) + # format the plot
theme(plot.title = element_text(face = "bold", size = title_size, hjust = title_hjust),
plot.subtitle = element_text(face = "italic", size = subtitle_size, hjust = title_hjust),
axis.title = element_text(face = "bold", size = axis_title_size),
axis.ticks = element_blank(),
axis.text  = element_text(size = axis_text_size),
axis.text.x = element_text(angle = 90, hjust = .5, vjust = .5),
panel.border = element_rect(size = 1.1)) +
xlab(xlab) + ylab(ylab)
## Write lfc values
if(write_label){ hm <- hm + geom_text(aes(label = round(Expr, label_digits)), size = label_size, color = label_color) }
## Remove gene names
if(!show_gene_names){ hm <- hm + theme(axis.text.y = element_blank()) }
# Hierarchical clustering -----
if(clust_rows){
# Hierarchical clustering of rows alone
hclust_rows <- hclust( dist(expr[-1], method = dist_method), method = hclust_method )
# Position of Y axis
if(show_dend_rows) { ytext_pos = "right" }
else { ytext_pos = "left" }
# Order rows
hm <- hm +
scale_y_discrete(limits=expr.m$Geneid[hclust_rows$order],
labels = expr.m$Geneid, position = ytext_pos,
expand = c(0,0))
} else { hm <- hm + scale_y_discrete(expand = c(0,0)) }
if(clust_cols){
# Hierarchical clustering of columns alone
hclust_cols <- hclust( dist(t(expr[-1]), method = dist_method), method = hclust_method )
# Order columns
hm <- hm +
scale_x_discrete(limits = colnames(expr[,-1])[hclust_cols$order],
labels = colnames(expr[,-1])[hclust_cols$order],
expand = c(0,0))
} else { hm <- hm + scale_x_discrete(expand = c(0,0)) }
### Plot dendograms
if(clust_rows & clust_cols & show_dend_rows & show_dend_cols){
dend_rows <- plotDendogram(hclust_rows, axis = "rows")
dend_cols <- plotDendogram(hclust_cols, axis = "cols")
# Plot heatmap and dendogram(s) together with patchwork and the created layout
heatmap <- hm +
inset_element(dend_cols, left = 0, bottom = 1, right = 1, top = 1+dend_cols_prop) +
inset_element(dend_rows, left = -dend_rows_prop, bottom = 0, right = 0, top = 1) +
plot_annotation(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
} else if(clust_cols & show_dend_cols) {
dend_cols <- plotDendogram(hclust_cols, axis = "cols")
# Plot heatmap and dendogram(s) together with patchwork and the created layout
heatmap <- hm +
inset_element(dend_cols, left = -0.1, bottom = 1, right = 1.1, top = 1+dend_cols_prop) +
plot_annotation(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
} else if(clust_rows & show_dend_rows) {
dend_rows <- plotDendogram(hclust_rows, axis = "rows")
# Plot heatmap and dendogram(s) together with patchwork and the created layout
heatmap <- hm +
inset_element(dend_rows, left = -dend_rows_prop, bottom = 0, right = 0, top = 1) +
plot_annotation(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
} else {
heatmap <- hm +
labs(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
}
return(heatmap)
}
expr_list <- degs_all
expressionHeatmap2(expr_list[c(1:3,1:2)] %>% purrr::set_names(nm = paste("condition", 1:5)))
expressionHeatmap2 <- function(expr_list,
expr_names = names(expr_list),
genes = c("Lef1", "Tcf7l1", "Tcf7l2", "Tcf7"),
clust_rows = F,
clust_cols = F,
show_dend_rows = F,
show_dend_cols = F,
dist_method = "euclidean",
hclust_method = "ward.D",
write_label = T,
label_size = 3,
label_color = "black",
label_digits = 2,
hm_height = length(genes)*10,
hm_width = length(expr_list)*10,
hm_colors = c("cornflowerblue", "white", "gold3"),
legend_scale = c(-1.5, 1.5),
legend_breaks_num = 5,
legend_breaks_by = .5,
legend_midpoint = 0,
legend_height = hm_height,
legend_title = NULL, legend_title_size = 8,
dend_cols_prop = .1,
dend_rows_prop = .2,
title = "", title_size = 13, title_hjust = 0,
subtitle = "", subtitle_size = 12,
caption = NULL, caption_size = 7,
xlab = "",
ylab = NULL,
axis_title_size = 11, axis_text_size = 10,
scale = NULL, show_gene_names = T){
# Load required packages
require(plyr)
require(dplyr)
require(purrr)
require(reshape2)
require(ggplot2)
require(ggpubr)
require(ggh4x)
require(ggdendro)
require(patchwork)
# Check that inputs are OK
if(!is.list(expr_list)){ stop("'expr_list' must be a (named) list of dataframes with, at least, the columns 'Geneid' and 'log2FoldChange'.") }
else if(!(sum(sapply(expr_list, class) == "data.frame") == length(expr_list))){ stop("'expr_list' must be a (named) list of dataframes with, at least, the columns 'Geneid' and 'log2FoldChange'.") }
else if(!(sum(sapply(expr_list, colnames) == "Geneid") == length(expr_list))){ stop("Each data frame in the list must have the column 'Geneid' with the names of the genes.") }
else if(!(sum(sapply(expr_list, colnames) == "log2FoldChange") == length(expr_list))){ stop("Each data frame in the list must have the column 'log2FoldChange' with the expression values of each gene.") }
if(show_dend_rows & !clust_rows){ stop("To plot the rows dendogram (`show_dend_rows = T`), `clust_rows` must be TRUE") }
if(show_dend_cols & !clust_cols){ stop("To plot the columns dendogram (`show_dend_cols = T`), `clust_cols` must be TRUE") }
# Bind Log2FCs from all genes in all contrasts
expr <- expr_list %>%
purrr::set_names(expr_names) %>%
purrr::map(~dplyr::select(.x, Geneid, log2FoldChange)) %>%
purrr::map(~dplyr::filter(.x, Geneid %in% genes)) %>%
purrr::imap(~magrittr::set_colnames(.x, value = c("Geneid", .y))) %>%
plyr::join_all(by = "Geneid") %>%
dplyr::relocate(Geneid)
## Scale
if(!is.null(scale)){
if("rows" %in% scale) { expr[,2:length(expr)] <- expr[,2:length(expr)] %>% t() %>% scale() %>% t() }
if("cols" %in% scale) { expr[,2:length(expr)] <- expr[,2:length(expr)] %>% scale() }
}
# Melt df with all Log2FCs
expr.m <- reshape2::melt(expr, variable.name = "Condition", id.vars = "Geneid", value.name = "Expr")
# Initialize heatmap -----
# Get the legend breaks.
if(is.null(legend_scale)){
lower    <- min(expr.m$Expr)
higher   <- max(expr.m$Expr)
midpoint <- (higher+(lower))/2
breaks   <- round(seq(from = lower, to = higher, by = (higher-lower)/legend_breaks_num))
} else {
lower    <- legend_scale[1]
higher   <- legend_scale[2]
midpoint <- legend_midpoint
breaks   <- (seq(from = lower, to = higher, by = legend_breaks_by))
}
## Plot heatmap
hm <- ggplot(expr.m, aes(Condition, Geneid) ) +
geom_tile(aes(fill = Expr)) +
force_panelsizes(rows = unit(hm_height, "mm"),
cols = unit(hm_width, "mm"))  +
coord_fixed() +
scale_fill_gradient2(limits = c(legend_scale[1], legend_scale[2]), midpoint = midpoint,
breaks = breaks,
oob = scales::squish,
low = hm_colors[1], mid = hm_colors[2], high = hm_colors[3],
guide = guide_colorbar(title = legend_title,
title.position = "right",
title.theme = element_text(angle = 270,
hjust = .5, vjust = .5,
size = legend_title_size),
frame.colour = "black", frame.linewidth = 1.5,
ticks.colour = NA,
barheight = unit(legend_height, "mm"))) +
theme_pubr(border = T, legend = "right", margin = T) + # format the plot
theme(plot.title = element_text(face = "bold", size = title_size, hjust = title_hjust),
plot.subtitle = element_text(face = "italic", size = subtitle_size, hjust = title_hjust),
axis.title = element_text(face = "bold", size = axis_title_size),
axis.ticks.y = element_blank(),
axis.text  = element_text(size = axis_text_size),
axis.text.x = element_text(angle = 90, hjust = .5, vjust = .5),
panel.border = element_rect(size = 1.1)) +
xlab(xlab) + ylab(ylab)
## Write lfc values
if(write_label){ hm <- hm + geom_text(aes(label = round(Expr, label_digits)), size = label_size, color = label_color) }
## Remove gene names
if(!show_gene_names){ hm <- hm + theme(axis.text.y = element_blank()) }
# Hierarchical clustering -----
if(clust_rows){
# Hierarchical clustering of rows alone
hclust_rows <- hclust( dist(expr[-1], method = dist_method), method = hclust_method )
# Position of Y axis
if(show_dend_rows) { ytext_pos = "right" }
else { ytext_pos = "left" }
# Order rows
hm <- hm +
scale_y_discrete(limits=expr.m$Geneid[hclust_rows$order],
labels = expr.m$Geneid, position = ytext_pos,
expand = c(0,0))
} else { hm <- hm + scale_y_discrete(expand = c(0,0)) }
if(clust_cols){
# Hierarchical clustering of columns alone
hclust_cols <- hclust( dist(t(expr[-1]), method = dist_method), method = hclust_method )
# Order columns
hm <- hm +
scale_x_discrete(limits = colnames(expr[,-1])[hclust_cols$order],
labels = colnames(expr[,-1])[hclust_cols$order],
expand = c(0,0))
} else { hm <- hm + scale_x_discrete(expand = c(0,0)) }
### Plot dendograms
if(clust_rows & clust_cols & show_dend_rows & show_dend_cols){
dend_rows <- plotDendogram(hclust_rows, axis = "rows")
dend_cols <- plotDendogram(hclust_cols, axis = "cols")
# Plot heatmap and dendogram(s) together with patchwork and the created layout
heatmap <- hm +
inset_element(dend_cols, left = 0, bottom = 1, right = 1, top = 1+dend_cols_prop) +
inset_element(dend_rows, left = -dend_rows_prop, bottom = 0, right = 0, top = 1) +
plot_annotation(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
} else if(clust_cols & show_dend_cols) {
dend_cols <- plotDendogram(hclust_cols, axis = "cols")
# Plot heatmap and dendogram(s) together with patchwork and the created layout
heatmap <- hm +
inset_element(dend_cols, left = -0.1, bottom = 1, right = 1.1, top = 1+dend_cols_prop) +
plot_annotation(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
} else if(clust_rows & show_dend_rows) {
dend_rows <- plotDendogram(hclust_rows, axis = "rows")
# Plot heatmap and dendogram(s) together with patchwork and the created layout
heatmap <- hm +
inset_element(dend_rows, left = -dend_rows_prop, bottom = 0, right = 0, top = 1) +
plot_annotation(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
} else {
heatmap <- hm +
labs(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
}
return(heatmap)
}
expressionHeatmap2(expr_list[c(1:3,1:2)] %>% purrr::set_names(nm = paste("condition", 1:5)))
expressionHeatmap <- function(expr_df,
genes = c("TCF7", "TCF7L1", "TCF7L2", "LEF1"),
clust_rows = F,
clust_cols = F,
show_dend_rows = F,
show_dend_cols = F,
dist_method = "euclidean",
hclust_method = "ward.D",
write_label = T,
label_size = 3,
label_color = "black",
label_digits = 2,
hm_height = length(genes)*10,
hm_width = (ncol(expr_df)-1)*10,
hm_colors = c("cornflowerblue", "white", "gold3"),
legend_scale = NULL,
legend_breaks_num = 5,
legend_breaks_by = .5,
legend_midpoint = 0,
legend_height = hm_height,
legend_title = NULL,
legend_title_size = 9,
dend_cols_prop = .1,
dend_rows_prop = .2,
title = "",
subtitle = "",
caption = NULL,
xlab = "",
ylab = NULL,
title_size = 13,
subtitle_size = 12,
caption_size = 7,
axis_text_size = 10,
axis_title_size = 11,
title_hjust = 0,
scale = NULL,
show_gene_names = T){
# Load requireed packages
require(dplyr)
require(reshape2)
require(ggplot2)
require(ggh4x)
require(ggpubr)
require(patchwork)
# Check that inputs are OK -----
if(!is.data.frame(expr_df)){ stop("'df' must be a data frame with 'Geneid' in the first column and the other columns with the expression values to plot.") }
if(!("Geneid" %in% colnames(expr_df))){ stop("'df' must have a character first column named 'Geneid'") }
if(show_dend_rows & !clust_rows){ stop("To plot the rows dendogram (`show_dend_rows = T`), `clust_rows` must be TRUE") }
if(show_dend_cols & !clust_cols){ stop("To plot the columns dendogram (`show_dend_cols = T`), `clust_cols` must be TRUE") }
# Format data frame -----
## Filter dataframe to get only desired genes
expr <- expr_df %>% dplyr::relocate(Geneid) %>% dplyr::filter(Geneid %in% genes) %>% as.data.frame()
## Scale
if(!is.null(scale)){
if("rows" %in% scale) { expr[,2:length(expr)] <- expr[,2:length(expr)] %>% t() %>% scale() %>% t() }
if("cols" %in% scale) { expr[,2:length(expr)] <- expr[,2:length(expr)] %>% scale() }
}
## Melt data frame
expr.m <- expr %>%
reshape2::melt(value.name = "Expr", variable.name = "Condition")
# Get the legend breaks.
if(is.null(legend_scale)){
lower    <- min(expr.m$Expr)
higher   <- max(expr.m$Expr)
midpoint <- (higher+(lower))/2
breaks   <- round(seq(from = lower, to = higher, by = (higher-lower)/legend_breaks_num))
} else {
lower    <- legend_scale[1]
higher   <- legend_scale[2]
midpoint <- legend_midpoint
breaks   <- round(seq(from = lower, to = higher, by = legend_breaks_by))
}
# Initialize the heatmap with ggplot
hm <- ggplot(expr.m, aes(Condition, Geneid) ) +
geom_tile(aes(fill = Expr)) +
ggh4x::force_panelsizes(rows = unit(hm_height, "mm"),  # force height of the heatmap
cols = unit(hm_width, "mm")) + # force width of the heatmap
coord_fixed() +  # fix the coordinates
scale_fill_gradient2(limits = c(lower, higher), midpoint = midpoint, # setup the legend
breaks = breaks,
oob = scales::squish, ## to put out of bound values into scale
low = hm_colors[1], high = hm_colors[3], mid = hm_colors[2],
guide = guide_colorbar(title = legend_title,
title.position = "right",
title.theme = element_text(angle = 270,
hjust = .5, vjust = .5,
size = legend_title_size),
frame.colour = "black", frame.linewidth = 1.5,
ticks.colour = NA,
barheight = unit(legend_height, "mm"))) +
theme_pubr(border = T, legend = "right", margin = T) + # format the plot
theme(plot.title = element_text(face = "bold", size = title_size, hjust = title_hjust),
plot.subtitle = element_text(face = "italic", size = subtitle_size, hjust = title_hjust),
plot.caption = element_text(size = caption_size),
axis.title = element_text(face = "bold", size = axis_title_size),
axis.ticks.y = element_blank(),
axis.text  = element_text(size = axis_text_size),
axis.text.x = element_text(angle = 90, hjust = .5, vjust = .5),
panel.border = element_rect(size = 1.1)) +
xlab(xlab) + ylab(ylab)
# Write thee label of the expression values
if(write_label){ hm <- hm + geom_text(aes(label = round(Expr, label_digits)), size = label_size, color = label_color) }
# Remove row names
if(!show_gene_names){ hm <- hm + theme(axis.text.y = element_blank()) }
# Hierarchical clustering -----
if(clust_rows){
# Hierarchical clustering of rows alone
hclust_rows <- hclust( dist(expr[-1], method = dist_method), method = hclust_method )
# Position of the Y axis
if(show_dend_rows) { ytext_pos = "right" }
else { ytext_pos = "left" }
# Order rows
hm <- hm +
scale_y_discrete(limits=expr.m$Geneid[hclust_rows$order],
labels = expr.m$Geneid, position = ytext_pos,
expand = c(0,0))
} else { hm <- hm + scale_y_discrete(expand = c(0,0)) }
if(clust_cols){
# Hierarchical clustering of columns alone
hclust_cols <- hclust( dist(t(expr[-1]), method = dist_method), method = hclust_method )
# Order columns
hm <- hm +
scale_x_discrete(limits = colnames(expr[,-1])[hclust_cols$order],
labels = colnames(expr[,-1])[hclust_cols$order],
expand = c(0,0))
} else { hm <- hm + scale_x_discrete(expand = c(0,0)) }
### Plot dendograms
if(clust_rows & clust_cols & show_dend_rows & show_dend_cols){
dend_rows <- plotDendogram(hclust_rows, axis = "rows")
dend_cols <- plotDendogram(hclust_cols, axis = "cols")
# Plot heatmap and dendogram(s) together with patchwork and the created layout
heatmap <- hm +
inset_element(dend_cols, left = 0, bottom = 1, right = 1, top = 1+dend_cols_prop) +
inset_element(dend_rows, left = -dend_rows_prop, bottom = 0, right = 0, top = 1) +
plot_annotation(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
} else if(clust_cols & show_dend_cols) {
dend_cols <- plotDendogram(hclust_cols, axis = "cols")
# Plot heatmap and dendogram(s) together with patchwork and the created layout
heatmap <- hm +
inset_element(dend_cols, left = -0.1, bottom = 1, right = 1.1, top = 1+dend_cols_prop) +
plot_annotation(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
} else if(clust_rows & show_dend_rows) {
dend_rows <- plotDendogram(hclust_rows, axis = "rows")
# Plot heatmap and dendogram(s) together with patchwork and the created layout
heatmap <- hm +
inset_element(dend_rows, left = -dend_rows_prop, bottom = 0, right = 0, top = 1) +
plot_annotation(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
} else {
heatmap <- hm +
labs(title = title, subtitle = subtitle, caption = caption) &
theme(plot.margin = unit(x = c(1,1,1,1), units = "mm"))
}
# Return heatmap
return(heatmap)
}
expressionHeatmap2(expr_list[c(1:3,1:2)] %>% purrr::set_names(nm = paste("condition", 1:5)),
scale = c("rows", "cols"), clust_cols = T, clust_rows = T, show_dend_rows = T, show_dend_cols = T)
expressionHeatmap(expr_df, show_dend_rows = T, clust_rows = T, show_gene_names = F)
devtools::document()
pkgdown::build_site()
devtools::document()
devtools::document()
pkgdown::build_site
pkgdown::build_site()
devtools::document()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
chromReads <- function(bamfile, bamindex = NULL, chr.filt = c("Un", "random", "GL", "JH", "\\*"),
main = NULL, main.size = 13, subtitle = NULL, sub.size = 11,
xlab = "Mapped reads", ylab = "Chromosome", axis.size = 9,
percent.label = T, percent.size = 3){
# Load required packages
require(Rsamtools)
require(ggplot2)
require(dplyr)
require(stringr)
require(ggpubr)
# Calculate the number of reads mapping to each chromosome with Rsamtools::idxstatsBam()
if(!is.null(bamindex)){ chromReads <- idxstatsBam(file = bamfile, index = bamindex) }
else{  chromReads <- idxstatsBam(file = bamfile)  }
# Calculate the total number of mapped reads in "good" chromosomes
totalReads <- sum(chromReads$mapped)
# Calculate percentage of mapped reads in each chromosome against all mapped reads
chromReads$percentage <- chromReads$mapped/totalReads*100
# Filter strange chromosomees (i.e. "chrUn...")
for(i in chr.filt){
chromReads <- chromReads[(str_detect(chromReads$seqnames, pattern = i, negate = T)),]
}
# Draw a bar graph
b <- ggplot(data = chromReads, mapping = aes(mapped, seqnames, fill = seqnames)) +
geom_bar(stat = "identity", show.legend = legend, colour = "Gray15") +
ylab(label = ylab) + xlab(label = xlab) +
ggtitle(main, subtitle) +
# General formatting
theme_pubr(border = T, margin = T, legend = "none") +
theme(plot.title = element_text(face = "bold", size = main.size, hjust = .5),
plot.subtitle = element_text(face = "italic", size = sub.size, hjust = .5),
axis.title = element_text(face = "bold", size = axis.size),
legend.title = element_blank())
# Annotate labels (percentages)
if(percent.label == T){
b <- b + geom_text(aes(label = round(percentage, 2), x = mapped+max(mapped)*0.05), size = percent.size, hjust = 0) +
xlim(0, max(chromReads$mapped*1.20))
}
# Return bar graph
return(b)
}
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
library(plotmics)
remove.packages("plotmics", lib="~/R/x86_64-pc-linux-gnu-library/4.1")
devtools::install_github("amitjavilaventura/plotmics")
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
df
devtools::document()
pkgdown::build_site()
remove.packages("plotmics", lib="~/R/x86_64-pc-linux-gnu-library/4.1")
devtools::install_github("amitjavilaventura/plotmics")
devtools::document()
pkgdown::build_site()
