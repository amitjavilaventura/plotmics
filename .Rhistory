if(!yaxis){ updown_bar <- updown_bar + theme(axis.text.y = element_blank()) }
# Change limits of xaxis
if(!is.null(xlim)){updown_bar <- updown_bar + coord_cartesian(xlim = c(xlim[1], xlim[2]))}
# Return plot
return(updown_bar)
}
barDEGs(deg_list = deg_list, pval = 0.1, log2FC = 1)
barDEGs <- function(deg_list, deg_names = names(deg_list),
name_pos = "min", xlim = NULL, position_num = 10,
xaxis = F, yaxis = F,
colors = c("green", "red"), alpha = 0.5,
log2FC = 1, pval = 0.05){
# Load packages
require(dplyr)
require(purrr)
require(ggplot2)
require(ggpubr)
# Check that inputs are OK
if(!is.list(deg_list)){ stop("'deg_list' must be a named list of data frames.") }
else if(!is.character(deg_names)){ stop("'deg_names' must be a character vector.") }
else if(length(deg_list) != length(deg_names)){ stop("'deg_list' and 'deg_names' must have the same lenght.") }
else if(!name_pos %in% c('min', 'left', 'right', 'none')){ stop("'name_pos' must be one of c('min', 'left', 'right', 'none').") }
else if(!is.null(xlim) & !is.numeric(xlim)){ stop("'xlim' must be NULL or a numeric vector of length 2.") }
else if(!is.logical(xaxis) | !is.logical(yaxis)){ stop("Both 'xaxis' and 'yaxis' must be a logical vector of length 1.") }
else if(!is.character(colors) | length(colors) != 2){ stop("'colors' must be a character vector of length 2 with valid color names/codes.") }
else if(!is.numeric(alpha) | alpha < 0 | alpha > 1){ stop("'alpha' must be a numeric vector of length 1 with a value between 0 and 1")}
# Mutate deg_list to be able to change the log2FC and pvalue thresholds for defining the DEGs
deg_list <- deg_list %>% purrr::map(~dplyr::mutate(.x, DEG = if_else(log2FoldChange >= log2FC & padj <= pval, "Upregulated",
if_else(log2FoldChange <= -log2FC & padj <= pval, "Downregulated", "NS"))))
# Named list of DEGs
deg_numbers <- deg_list %>%
# Add names to each element in the list
purrr::set_names(deg_names) %>%
# Count number of upregulated and downregulated genes in each contrast
purrr::map(~dplyr::count(.x, DEG)) %>%
purrr::map(~dplyr::filter(.x, DEG != "NS")) %>%
# Add a contrast variable using the name of each element in the list
purrr::imap(~dplyr::mutate(.x, contrast = .y)) %>%
# Bind all dataframes in one
bind_rows() %>%
# Change the number of downregulated genes to negative
mutate(number = if_else(DEG == "Downregulated", -n, n)) %>%
# Add a variable for the position of the number of DEGs and the hjust
mutate(pos_num   = if_else(DEG == "Downregulated", -position_num, position_num)) %>%
mutate(hjust_num = if_else(DEG == "Downregulated", 1, 0)) %>%
# Add a variable for the position of the name of the contrast
mutate(contrast_pos = if_else(DEG == "Downregulated", number-position_num, number+position_num))
# Set at which site will the contrast name be written
if(name_pos == "min"){
deg_numbers <- deg_numbers %>%
group_by(contrast) %>%
mutate(contrast_name = if_else(n == min(n), contrast, NULL)) %>%
ungroup()
} else if(name_pos == "left"){
deg_numbers <- deg_numbers %>%
mutate(contrast_name = if_else(n == -number, contrast, NULL))
} else if(name_pos == "right"){
deg_numbers <- deg_numbers %>%
mutate(contrast_name = if_else(n == number, contrast, NULL))
} else if(name_pos == "none"){
deg_numbers <- deg_numbers %>%
mutate(contrast_name = "")
}
# Do the plot
updown_bar <- deg_numbers %>%
ggplot(aes(number, contrast, fill = DEG)) +
geom_col(color = "black", width = 0.5, alpha = alpha) +
# Add the number of DEGs to each bar
geom_text(mapping = aes(label = n, x = pos_num, hjust = hjust_num), size = 3, na.rm=TRUE) +
# Add the name of the contrast
geom_text(mapping = aes(label = contrast_name, x = contrast_pos, hjust = hjust_num), size = 3)  +
# Change default colors
scale_fill_manual(values = c(colors[1], colors[2])) +
# Add vertical line at 0
geom_vline(aes(xintercept = 0), size = 0.5) +
# Custom theme
theme_pubr(border = F, margin = T, legend = "bottom") +
theme(axis.title = element_blank(),
legend.title = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank())
if(!xaxis){ updown_bar <- updown_bar + theme(axis.text.x = element_blank()) }
if(!yaxis){ updown_bar <- updown_bar + theme(axis.text.y = element_blank()) }
# Change limits of xaxis
if(!is.null(xlim)){updown_bar <- updown_bar + coord_cartesian(xlim = c(xlim[1], xlim[2]))}
# Return plot
return(updown_bar)
}
barDEGs(deg_list = deg_list, pval = 0.1, log2FC = 1)
barDEGs <- function(deg_list, deg_names = names(deg_list),
name_pos = "min", xlim = NULL, position_num = 10,
xaxis = F, yaxis = F,
colors = c("green", "red"), alpha = 0.5,
log2FC = 1, pval = 0.05){
# Load packages
require(dplyr)
require(purrr)
require(ggplot2)
require(ggpubr)
# Check that inputs are OK
if(!is.list(deg_list)){ stop("'deg_list' must be a named list of data frames.") }
else if(!is.character(deg_names)){ stop("'deg_names' must be a character vector.") }
else if(length(deg_list) != length(deg_names)){ stop("'deg_list' and 'deg_names' must have the same lenght.") }
else if(!name_pos %in% c('min', 'left', 'right', 'none')){ stop("'name_pos' must be one of c('min', 'left', 'right', 'none').") }
else if(!is.null(xlim) & !is.numeric(xlim)){ stop("'xlim' must be NULL or a numeric vector of length 2.") }
else if(!is.logical(xaxis) | !is.logical(yaxis)){ stop("Both 'xaxis' and 'yaxis' must be a logical vector of length 1.") }
else if(!is.character(colors) | length(colors) != 2){ stop("'colors' must be a character vector of length 2 with valid color names/codes.") }
else if(!is.numeric(alpha) | alpha < 0 | alpha > 1){ stop("'alpha' must be a numeric vector of length 1 with a value between 0 and 1")}
# Mutate deg_list to be able to change the log2FC and pvalue thresholds for defining the DEGs
deg_list <- deg_list %>% purrr::map(~dplyr::mutate(.x, DEG = if_else(log2FoldChange >= log2FC & padj <= pval, "Upregulated",
if_else(log2FoldChange <= -log2FC & padj <= pval, "Downregulated", "NS"))))
# Named list of DEGs
deg_numbers <- deg_list %>%
# Add names to each element in the list
purrr::set_names(deg_names) %>%
# Count number of upregulated and downregulated genes in each contrast
purrr::map(~dplyr::count(.x, DEG)) %>%
purrr::map(~dplyr::filter(.x, DEG != "NS")) %>%
# Add a contrast variable using the name of each element in the list
purrr::imap(~dplyr::mutate(.x, contrast = .y)) %>%
# Bind all dataframes in one
bind_rows() %>%
# Change the number of downregulated genes to negative
mutate(number = if_else(DEG == "Downregulated", -n, n)) %>%
# Add a variable for the position of the number of DEGs and the hjust
mutate(pos_num   = if_else(DEG == "Downregulated", -position_num, position_num)) %>%
mutate(hjust_num = if_else(DEG == "Downregulated", 1, 0)) %>%
# Add a variable for the position of the name of the contrast
mutate(contrast_pos = if_else(DEG == "Downregulated", number-position_num, number+position_num))
# Set at which site will the contrast name be written
if(name_pos == "min"){
deg_numbers <- deg_numbers %>%
group_by(contrast) %>%
mutate(contrast_name = if_else(n == min(n), contrast, NULL)) %>%
ungroup()
} else if(name_pos == "left"){
deg_numbers <- deg_numbers %>%
mutate(contrast_name = if_else(n == -number, contrast, NULL))
} else if(name_pos == "right"){
deg_numbers <- deg_numbers %>%
mutate(contrast_name = if_else(n == number, contrast, NULL))
} else if(name_pos == "none"){
deg_numbers <- deg_numbers %>%
mutate(contrast_name = "")
}
# Do the plot
updown_bar <- deg_numbers %>%
ggplot(aes(number, contrast, fill = DEG)) +
geom_col(color = "black", width = 0.5, alpha = alpha) +
# Add the number of DEGs to each bar
geom_text(mapping = aes(label = n, x = pos_num, hjust = hjust_num), size = 3, na.rm = TRUE) +
# Add the name of the contrast
geom_text(mapping = aes(label = contrast_name, x = contrast_pos, hjust = hjust_num), size = 3, na.rm = TRUE)  +
# Change default colors
scale_fill_manual(values = c(colors[1], colors[2])) +
# Add vertical line at 0
geom_vline(aes(xintercept = 0), size = 0.5) +
# Custom theme
theme_pubr(border = F, margin = T, legend = "bottom") +
theme(axis.title = element_blank(),
legend.title = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank())
if(!xaxis){ updown_bar <- updown_bar + theme(axis.text.x = element_blank()) }
if(!yaxis){ updown_bar <- updown_bar + theme(axis.text.y = element_blank()) }
# Change limits of xaxis
if(!is.null(xlim)){updown_bar <- updown_bar + coord_cartesian(xlim = c(xlim[1], xlim[2]))}
# Return plot
return(updown_bar)
}
barDEGs(deg_list = deg_list, pval = 0.1, log2FC = 1)
volcanoPlot(df = deg_list[[1]], main = "This is a title", sub = "This is a subtitle",
xlab = "This is the X-axis label", ylab = "This is the Y-axis label",
mainSize = 19, subSize = 15, axisLabelSize = 14, axisTextSize = 10)
volcanoPlot(df = deg_list[[1]], main = "This is a title", sub = "This is a subtitle",
xlab = "This is the X-axis label", ylab = "This is the Y-axis label",
mainSize = 19, subSize = 15, axisLabelSize = 14, axisTextSize = 15)
volcanoPlot(df = deg_list[[1]], labelPos = 30)
volcanoPlot(df = deg_list[[1]], labelSize = 12)
volcanoPlot(df = deg_list[[1]], pointColor = c("cornflowerblue", "gray", "gold3"))
volcanoPlot(df = deg_list[[1]], degsLabel = T)
volcanoPlot(df = deg_list[[1]], degsLabel = T, degsLabelNum = 20)
volcanoPlot(df = deg_list[[1]], degsLabel = T, degsLabelSize = 10)
genes_to_show <- c("Lef1", "Tp53", "Mtor", "Ctnna1")
volcanoPlot(df = deg_list[[1]], degsLabel = T, degsLabelSize = 5, degsLabelNum = genes_to_show)
volcanoPlot(df = deg_list[[1]], degsLabel = genes_to_show, degsLabelSize = 5)
pkgdown::build_articles()
pkgdown::build_site()
devtools::load_all()
pkgdown::build_site()
pkgdown::build_reference()
devtools::document()
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4)
devtools::load_all("..")
# install devtools if not installed
if(!require(devtools)){ install.packages("devtools") }
# install plotmics if not installed
if(!require(plotmics)){ devtools::install_github("amitjavilaventura/plotmics") }
library(plotmics)
pkgdown::build_site()
devtools::document()
devtools::load_all()
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4)
devtools::load_all("..")
library(dplyr)
library(purrr)
# read the dataframes into a list
deg_list <- list.files("../testdata", "diff_exp", full.names = T, recursive = T) %>%
purrr::set_names(paste("cond", 1:3, sep = "")) %>%
purrr::map(~read.delim(.x))
deg_list[[1]] %>% head()
DEcompare(deg_list = deg_list[1:2])
DEcompare(deg_list = deg_list[1:2])
DEcompare(deg_list = deg_list[1:2], threshold = 1)
DEcompare(deg_list = deg_list[1:2], threshold = 0.1)
DEcompare(deg_list = deg_list[1:2], xlim = c(-5,5), ylim = c(-5, 7))
DEcompare(deg_list = deg_list[1:2], main = "This is a title", sub = "This is a subtitle",
xlab = "This is the X-axis label", ylab = "This is the Y-axis label")
DEcompare(deg_list = deg_list[1:2], color_corners = c("Green", "Yellow", "Gray10", "White"))
DEcompare(deg_list = deg_list[1:2], color_corners = c("Gray50", "Gray70", "Gray90", "White"))
DEcompare(deg_list = deg_list[1:2], color_corners = c("Gray50", "Gray70", "White"))
DEcompare(deg_list = deg_list[1:2], color_corners = c("Gray50", "White"))
DEcompare(deg_list = deg_list[1:2], color_corners = c( "White"))
DEcompare(deg_list = deg_list[1:2], color_corners = c("Gray50", "Gray70", "Gray90", "White"), alpha_corners = .2)
DEcompare(deg_list = deg_list[1:2], alpha_corners = .2)
DEcompare(deg_list = deg_list[1:2], alpha_corners = c(1, .1, .4, .7))
pkgdown::build_articles()
devtools::load_all()
pkgdown::build_articles()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_article(name = "vignettes/04-DEcompare.Rmd")
pkgdown::build_articles()
library(plotmics)
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_articles()
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4)
devtools::load_all("..")
library(dplyr)
library(purrr)
# read the peak annotation into a list
deg_list <- list.files("../testdata", "peak", full.names = T, recursive = T) %>%
purrr::set_names(c("PeakX", "PeakY")) %>%
purrr::map(~read.delim(.x))
# read the peak annotation into a list
peak_list <- list.files("../testdata", "peak", full.names = T, recursive = T) %>%
purrr::set_names(c("PeakX", "PeakY")) %>%
purrr::map(~read.delim(.x))
peak_list[[1]] %>% head()
peak_list[[1]][1:5, 1:7]
barAnno(anno_list = peak_list)
barAnno(anno_list = peak_list)
barAnno(anno_list = peak_list, fill_position = F)
barAnno(anno_list = peak_list,
anno_names = c("Condition X", "Condition Y"),
names_order = c("Condition Y", "Condition X"))
barAnno(anno_list = peak_list, anno_names = c("Cond1", "Cond1"), protein = c("protX", "protY"))
barAnno(anno_list = peak_list, anno_names = c("Cond1", "Cond1"),
protein = c("protX", "protY"), protein_order = c("protY", "protX"))
barAnno(anno_list = peak_list, anno_num = 3)
barAnno(anno_list = peak_list, anno_num = "all")
barAnno(anno_list = peak_list, anno_names = c("Cond1", "Cond2"), protein = c("protX", "protY"))
barAnno(anno_list = peak_list, legend_position = "none")
barAnno(anno_list = peak_list, legend_position = "left")
barAnno(anno_list = peak_list, legend_position = "bottom")
barAnno(anno_list = peak_list, legend_position = "top")
barAnno(anno_list = peak_list, color_palette = "Set4")
barAnno(anno_list = peak_list, color_palette = "Set3")
barAnno(anno_list = peak_list, color_palette = "Set1")
barAnno
barAnno(anno_list = peak_list, color_palette = "Set1")
barAnno(anno_list = peak_list, color_palette = "Dark2")
barAnno(anno_list = peak_list, color_palette = "Blues")
barAnno(anno_list = peak_list, color_palette = "Dark1")
barAnno(anno_list = peak_list, color_palette = "Pastel2")
barAnno(anno_list = peak_list, color_palette = "GnBu")
barAnno(anno_list = peak_list, color_palette = "Oranges")
barAnno(anno_list = peak_list, xangle = 90)
barAnno(anno_list = peak_list, xangle = 80)
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4)
devtools::load_all("..")
library(dplyr)
library(purrr)
venn_counts <- getVennCounts(peak_list)
upsetPeaks(peak_list)
venn_counts$matrix
venn_counts$vennCounts
venn_counts$matrix[1:5,]
upsetPeaks(peak_list)
upsetPeaks(peak_list, order.by = "freq")
upsetPeaks(peak_list, order.by = "xx")
upsetPeaks(peak_list, conds = c("Condition 1", "Condition 2"), conds_order = c("Condition 2", "Condition 1"))
upsetPeaks(peak_list, order.by = c("freq", "degree"))
upsetPeaks(peak_list, order.by = "degree")
upsetPeaks(peak_list, order.by = "freq") # default
upsetPeaks(peak_list, order.by = "degree")
upsetPeaks(peak_list, order.by = c("freq", "degree"))
upsetPeaks(peak_list, mainbar.y.label = "This is an Y label for the main barplot",
sets.x.label = "This is the X label for the set size bar plot")
upsetPeaks(peak_list, mainbar.y.label = "This is an Y label for the main barplot",
sets.x.label = "This is the X label for the set size")
ggUpsetPeaks(peak_list)
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4)
devtools::load_all("..")
library(dplyr)
library(purrr)
ggUpsetPeaks(peak_list)
ggUpsetPeaks(peak_list)
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4)
devtools::load_all("..")
library(dplyr)
library(purrr)
ggVennPeaks(peak_list)
ggVennPeaks(peak_list)
ggUpsetPeaks(peak_list, conds = c("Condition 1", "Condition 2"))
ggUpsetPeaks(peak_list, conds = c("Condition_1", "Condition_2"), conds_order = c("Condition_2", "Condition_1"))
ggUpsetPeaks(peak_list, conds = c("Condition_1", "Condition_2"))
ggUpsetPeaks(peak_list, conds = c("Condition_1", "Condition_2"))
ggUpsetPeaks(peak_list, order_by_freq = F)
ggUpsetPeaks(peak_list, num_size = T)
ggUpsetPeaks(peak_list, num_size = 100)
ggUpsetPeaks(peak_list, num_size = 10)
ggVennPeaks(peak_list, in_fill = c("Blue"))
ggVennPeaks(peak_list, in_fill = c("Green", "Darkred"), alpha = .2)
ggVennPeaks(peak_list, out_color = c("blue", "darkred"))
ggVennPeaks(peak_list, out_color = c("blue"))
ggVennPeaks(peak_list, text_color = "blue")
ggVennPeaks(peak_list, peak_names = c("Condition 1", "Condition 2"), name_size = 4)
ggVennPeaks(peak_list, peak_names = c("Condition 1", "Condition 2"), name_size = 7)
ggVennPeaks(peak_list, peak_names = c("Condition 1", "Condition 2"), name_size = 10)
ggVennPeaks(peak_list, out_color = "blue", text_color = "red", name_color = c("red", "blue"))
ggVennPeaks(peak_list, label_size = 10)
ggVennPeaks(peak_list, name_size = 10)
devtools::document()
devtools::load_all()
pkgdown::build_articles()
pkgdown::build_site()
pkgdown::build_site()
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4)
devtools::load_all("..")
library(dplyr)
library(purrr)
peak_list <- list.files("../testdata", "peak", full.names = T, recursive = T) %>%
purrr::set_names(c("PeakX", "PeakY")) %>%
purrr::map(~read.delim(.x))
upsetPeaks(peak_list)
venn_counts <- getVennCounts(peak_list)
venn_counts <- getVennCounts(peak_list)
pkgdown::build_articles()
getVennCounts
peak_list[[1]][1:5, 1:7]
peak_list %>%
purrr::map(~as_granges(.x))
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4)
devtools::load_all("..")
library(dplyr)
library(purrr)
peak_list <- list.files("../testdata", "peak", full.names = T, recursive = T) %>%
purrr::set_names(c("PeakX", "PeakY")) %>%
purrr::map(~read.delim(.x))
upsetPeaks(peak_list)
list.files("../testdata", "peak", full.names = T, recursive = T) %>%
purrr::set_names(c("PeakX", "PeakY")) %>%
purrr::map(~read.delim(.x))
peak_list
getVennCounts(peaks = peak_list)
getVennCounts(peaks = peak_list)
getVennCounts
getVennCounts(peaks = peak_list)
getVennCounts(peaks = peak_list)
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4)
devtools::load_all("..")
library(dplyr)
library(purrr)
peak_list <- list.files("../testdata", "peak", full.names = T, recursive = T) %>%
purrr::set_names(c("PeakX", "PeakY")) %>%
purrr::map(~read.delim(.x))
upsetPeaks(peak_list)
getVennCounts
devtools::load_all("..")
conds = names(peaks)
peaks = peak_list
conds = names(peaks)
conds_order = conds
plot = F
len <- length(peaks)
peaks <- peaks %>% set_names(nm = conds)
overlaps <- peaks[conds_order] %>%
purrr::map(~as_granges(.x)) %>%
makeVennDiagram(Peaks = ., plot = plot) %>%
suppress_messages() %>% suppress_warnings()
overlaps <- overlaps$vennCounts
matrix <- matrix(data = rep(0, len), ncol = len, byrow=T) %>% set_colnames(conds_order)
for(row in 1:nrow(overlaps)){
counts <- overlaps[row, len+1]
m <- matrix(rep(overlaps[row, 1:len], counts), ncol = len, byrow = T)
matrix <- rbind(matrix, m)
}
x <- matrix %>%
na.omit %>%
as.data.frame() %>%
dplyr::mutate(rowSum = rowSums(.)) %>%
dplyr::filter(rowSum != 0) %>%
dplyr::mutate(peak = paste("peak", 1:nrow(.), sep = "")) %>%
dplyr::select(peak, everything(), -rowSum)
peaks[conds_order] %>%
purrr::map(~plyranges::as_granges(.x))
devtools::document()
devtools::load_all()
peaks
peak_list <- list.files("../testdata", "peak", full.names = T, recursive = T) %>%
purrr::set_names(c("PeakX", "PeakY")) %>%
purrr::map(~read.delim(.x))
peak_list
venn_counts <- getVennCounts(peaks = peak_list)
peaks %>%
purrr::map(~plyranges::as_granges(.x))
peaks
pkgdown::build_articles()
pkgdown::build_articles()
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4)
devtools::load_all("..")
library(dplyr)
library(purrr)
peak_list <- list.files("../testdata", "peak", full.names = T, recursive = T) %>%
purrr::set_names(c("PeakX", "PeakY"))  %>%
purrr::map(~read.delim(.x))
ggVennPeaks(peak_list)
venn_counts <- getVennCounts(peak_list)
venn_counts$vennCounts
venn_counts$matrix[1:5,]
venn_counts$matrix[1:5,] %>% as.matrix()
venn_counts$matrix[1:5,] %>% knitr::kable()
pkgdown::build_articles()
getVennCounts
peak_list
class(```{r eval=FALSE}
venn_counts <- getVennCounts(peak_list)
```
```{r eval=FALSE}
venn_counts$vennCounts
#      PeakX PeakY Counts
# [1,]     0     0      0
# [2,]     0     1     70
# [3,]     1     0    977
# [4,]     1     1     23
# attr(,"class")
# [1] "VennCounts"
```
```{r eval=FALSE}
venn_counts$matrix[1:5,] %>% knitr::kable()
# peak    PeakX   PeakY
# peak1   0       1
# peak2	  0	      1
# peak3	  0	      1
# peak4	  0	      1
# peak5	  0	      1
```)
class(peak_list)
typeof(peak_list)
is.list(peak_list)
is.list(peak_list)
typeof(peak_list[[1]])
peaks = peak_list
venn_counts <- getVennCounts(peak_list)
venn_counts
peaks %>%
purrr::map(~plyranges::as_granges(.x))
plot = F
peaks %>%
purrr::map(~plyranges::as_granges(.x)) %>%
makeVennDiagram(Peaks = ., plot = plot)
getVennCounts <- function(peaks, conds = names(peaks), conds_order = conds, plot = F){
require(pkgcond)
require(purrr) %>% suppress_messages() %>% suppress_warnings()
require(dplyr) %>% suppress_messages() %>% suppress_warnings()
require(plyranges) %>% suppress_messages() %>% suppress_warnings()
require(magrittr) %>% suppress_messages() %>% suppress_warnings()
require(ChIPpeakAnno) %>% suppress_messages() %>% suppress_warnings()
if(!is.list(peaks)){ stop("'peaks' must be a (named) list of dataframes with the columns 'seqnames', 'start' and 'end'.") }
else if(is.null(conds)){ stop("'conds' must a not-NULL character vector with the conditions of the data frames in 'peaks.") }
else if(length(peaks) != length(conds)){ stop("'peaks' and 'conds' must have the same length.") }
len <- length(peaks)
peaks <- peaks %>% purrr::set_names(nm = conds)
overlaps <- peaks %>%
purrr::map(~plyranges::as_granges(.x)) %>%
makeVennDiagram(Peaks = ., NameOfPeaks = conds, plot = plot) %>%
suppress_messages() %>% suppress_warnings()
overlaps <- overlaps$vennCounts
matrix <- matrix(data = rep(0, len), ncol = len, byrow=T) %>% set_colnames(conds)
for(row in 1:nrow(overlaps)){
counts <- overlaps[row, len+1]
m <- matrix(rep(overlaps[row, 1:len], counts), ncol = len, byrow = T)
matrix <- rbind(matrix, m)
}
x <- matrix %>%
na.omit %>%
as.data.frame() %>%
dplyr::mutate(rowSum = rowSums(.)) %>%
dplyr::filter(rowSum != 0) %>%
dplyr::mutate(peak = paste("peak", 1:nrow(.), sep = "")) %>%
dplyr::select(peak, everything(), -rowSum)
return(list("matrix" = x, "vennCounts" = overlaps))
}
venn_counts <- getVennCounts(peak_list)
venn_counts
devtools::document()
library(plotmics)
devtools::document()
pkgdown
pkgdown::build_articles()
