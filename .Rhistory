magrittr::set_colnames(c("id", "extra", "region")) %>%
dplyr::mutate(region = factor(region, levels = names_vector))
} else if(any(extrainfo %>% purrr::map(~class(.x)) %>% unlist()) %in% c("data.frame", "character")) {
stop("'extrainfo' must be a list with paths to regions files or data frames with the id and extra information to color the regions")
}
}
## Chromosomes to exclude
if(!class(chr_exclude) == "character") { stop("'chr_exclude' must be a character vector with regular expressions that match the chromosomes to exclude") }
## Order of the chromosomes
if(!class(chr_order) == "character") { stop("'chr_order' must be a character vector with the names of the chromosomes in the desired order") }
## Check color_by
if(tolower(color_by) %in% c("regions", "region")){ color_by <- "region" }
else if(tolower(color_by) %in% c("strands", "strand")){ color_by <- "strand" }
else if(!(tolower(color_by) %in% c("strands", "strand","regions", "region")) & !is.null(extra_info)){ color_by <- "extra" }
else { stop("'color_by' must be one of 'region' or 'strand' and, if an 'extra_info' list is provided, it can be 'extra'.") }
# Filter and format chromsizes and regions ------------------------------------------------------
chrom_filt <- chromsizes %>%
# Filter chromosomes to exclude undesired ones.
dplyr::filter(!stringr::str_detect(seqnames, pattern = paste(chr_exclude, collapse = "|"))) %>%
# Convert seqnames to factor with desired order of chromosomes
dplyr::mutate(seqnames = factor(seqnames, levels = chr_order)) %>%
# Arrange by chromsosomes
dplyr::arrange(seqnames) %>%
# Calculate sizes
dplyr::group_by(region) %>%
dplyr::mutate(cum_size = cumsum(as.numeric(size)),
prev_size = lag(as.numeric(size)),
prev_size = ifelse(is.na(prev_size), 0, prev_size),
total_size = sum(as.numeric(size))) %>%
dplyr::ungroup()
regions_filt <- regions %>%
# Filter regions to exclude undesired chromosomes.
dplyr::filter(!stringr::str_detect(seqnames, pattern = paste(chr_exclude, collapse = "|"))) %>%
# Convert seqnames and regions to factor with the desired order.
dplyr::mutate(seqnames = factor(seqnames, levels = chr_order),
region   = factor(region, levels = names_vector))
# Join extra info to regions
if(!is.null(extra_info)){
regions_filt <- dplyr::left_join(regions_filt, extrainfo, by = c("id", "region")) %>%
dplyr::mutate(extra = factor(extra))
}
# Left join of chrom_filt and regions_filt -----
regions_chrom <- dplyr::left_join(chrom_filt, regions_filt, by = c("seqnames", "region")) %>%
# Group by chromosome
# remove all the redundant "size" values
# remove all the redundant "prev_size" values
# ungroup
# convert sequnames to factor and arrange by seqnames
dplyr::group_by(seqnames, region) %>%
dplyr::mutate(row = row_number(),
size2 = max(size),
size = if_else(row == 1, size, NULL),
prev_size2 = max(prev_size),
prev_size = if_else(row == 1, prev_size, NULL),
num_regions = n()) %>%
dplyr::ungroup() %>%
dplyr::mutate(group = group_indices(., .dots = "region")) %>%
dplyr::mutate(seqnames = factor(seqnames, levels = chr_order)) %>%
dplyr::arrange(seqnames) %>%
dplyr::mutate(region = factor(region, levels = names_vector))
if(length(chromsizes_list)>1 & identical(chromsizes_list[1], chromsizes_list[1])){
regions_chrom_filt <- regions_chrom %>%
dplyr::mutate(seqnames = if_else(region == names_vector[1], seqnames, NULL))
} else {
regions_chrom_filt <- regions_chrom
}
# DRAW PLOT -------------------------------------------------------------------------------------
# Initialize plot
g <- ggplot(data = regions_chrom) +
# Draw chromosomes and labels
geom_col(aes(x = 11-group*2, y = size, group = seqnames), color = "black", fill = NA, width = .5, na.rm = T, position = "stack") +
geom_text(data = regions_chrom_filt, aes(x = 11-group*2+1, y = size, label = seqnames, group = seqnames),
position = position_stack(vjust = .5), show.legend = F,  na.rm = T, size = 2.5, hjust = .5, color = chr_color, alpha = 0.8)
# Draw line to separate chromosomes
if(chr_line){
g <- g + geom_hline(data = regions_chrom %>% dplyr::filter(region == names_vector[1]), aes(yintercept = total_size-cum_size+size2), linetype = 2, size = 0.1, na.rm = T)
}
# Draw segments and points for each region
g <- g + geom_segment(data = regions_chrom, aes(x = 11-group*2-.25, xend = 11-group*2+.25, y = total_size-cum_size+size2-start,
yend = total_size-cum_size+size2-end, color = .data[[color_by]]), na.rm = T)
# Draw points for each region
if(draw_points){ g <- g + geom_point(data = regions_chrom, aes(x = 11-group*2, y = total_size-cum_size+size2-start-length/2, color = .data[[color_by]], group = id), size = .4, na.rm = T) }
else{  g <- g + geom_point(data = regions_chrom, aes(x = 11-group*2, y = total_size-cum_size+size2-start-length/2, group = id), size = .4, na.rm = T, color = NA) }
# Draw paired lines
if(paired){
g <- g + geom_line(aes(x = 11-group*2, y = total_size-cum_size+size2-start-length/2, group = id), size = .1, color = paired_color, alpha = 0.8)
}
# Change colors and remove NAs from legend
g <- g + scale_color_manual(values = colors, na.translate = F)
# Make plot circular
g <- g + coord_polar(theta = "y", direction = -1, start = 0) + xlim(0,10)
# Add labels and titles
if(!is.null(title)){ g <- g + ggtitle(label = title, subtitle = subtitle) }
if(!is.null(caption)){ g <- g + labs(caption = caption) }
# Customize plot theme
g <- g +
theme_pubr(legend = legend) + # Add theme pubr from ggpubr with options for legend
theme(axis.text = element_blank(), # Remove axis text
axis.ticks = element_blank(), # Remove axis ticks
axis.title = element_blank(), # Remove axis titles
axis.line = element_blank(), # Remove axis lines
legend.title = element_blank(), # Remove legend title
plot.title = element_text(hjust = .5),
plot.subtitle = element_text(hjust = .5, face = "italic"))
# Return plot
return(g)
}
regions_filt
regions_filt %>% dplyr::count(region)
regions_num <- regions_filt %>% dplyr::count(region) %>% dplyr::mutate(Num = paste(region, ": ", n, sep = "")) %>% dplyr::pull(Num)
g + labs(caption = paste(regions_num, collapse = "; "))
source("~/Desktop/Packages/plotmics/R/chromRegions.R")
source("~/Desktop/Packages/plotmics/R/circleRegions.R")
circleRegions(chromsizes_list = list(chrom_sizes,chrom_sizes,chrom_sizes) %>% purrr::set_names("Regions1", "2", "Reg3"),
regions_list = list(regions_file,regions_file,regions_file) %>% purrr::set_names("Regions1", "2", "Reg3"),
color_by = "extra", legend = "bottom", extra_info = list(extra,extra,extra), colors = rainbow(4))
source("~/Desktop/Packages/plotmics/R/circleRegions.R")
circleRegions
circleRegions(chromsizes_list = list(chrom_sizes,chrom_sizes,chrom_sizes) %>% purrr::set_names("Regions1", "2", "Reg3"),
regions_list = list(regions_file,regions_file,regions_file) %>% purrr::set_names("Regions1", "2", "Reg3"),
color_by = "extra", legend = "bottom", extra_info = list(extra,extra,extra), colors = rainbow(4))
circleRegions(chromsizes_sets = list(chrom_sizes,chrom_sizes,chrom_sizes) %>% purrr::set_names("Regions1", "2", "Reg3"),
regions_sets = list(regions_file,regions_file,regions_file) %>% purrr::set_names("Regions1", "2", "Reg3"),
color_by = "extra", legend = "bottom", extra_info = list(extra,extra,extra), colors = rainbow(4))
circleRegions(chromsizes_sets = list(chrom_sizes,chrom_sizes,chrom_sizes) %>% purrr::set_names("Regions1", "2", "Reg3"),
regions_sets = list(regions_file,regions_file,regions_file) %>% purrr::set_names("Regions1", "2", "Reg3"),
color_by = "region", legend = "bottom", extra_info = list(extra,extra,extra), colors = rainbow(4))
circleRegions(chromsizes_sets = list(chrom_sizes,chrom_sizes,chrom_sizes) %>% purrr::set_names("Regions1", "2", "Reg3"),
regions_sets = list(regions_file,regions_file,regions_file) %>% purrr::set_names("Regions1", "2", "Reg3"),
color_by = "stran", legend = "bottom", extra_info = list(extra,extra,extra), colors = rainbow(4))
source("~/Desktop/Packages/plotmics/R/chromRegions.R")
knitr::opts_chunk$set(echo = TRUE, warning = F, error = F, message = F,
fig.align = "center", fig.width = 6, fig.height = 4)
devtools::load_all("..")
library(dplyr)
chrom_sizes = "../testdata/mm10.chrom.sizes"
regions_list <- list("Regions1" = "../testdata/mm10.regions.tsv",
"Regions2" = "../testdata/mm10.regions2.tsv",
"Regions3" = "../testdata/mm10.regions3.tsv")
plotmics::chromRegions(chrom_sizes = chrom_sizes, regions_list = regions_list)
chrom_sizes = "../testdata/mm10.chrom.sizes"
chrom_sizes %>% read.delim(header = F) %>% head()
regions_list <- list("Regions1" = "../testdata/mm10.regions.tsv",
"Regions2" = "../testdata/mm10.regions2.tsv",
"Regions3" = "../testdata/mm10.regions3.tsv")
regions_list[[1]] %>% read.delim(header = F) %>% head()
chromRegions(chrom_sizes = "../testdata/mm10.chrom.sizes", regions_list = regions_list)
chromRegions(chrom_sizes = "../testdata/mm10.chrom.sizes", regions_list = regions_list, color_by = "extra")
chromRegions(chrom_sizes = "../testdata/mm10.chrom.sizes", regions_list = regions_list, color_by = "regions")
chromRegions(chrom_sizes = "../testdata/mm10.chrom.sizes", regions_list = regions_list, color_by = "strand")
source("~/Desktop/Packages/plotmics/R/chromRegions.R")
chromRegions(chrom_sizes = "../testdata/mm10.chrom.sizes", regions_list = regions_list, color_by = "strand")
# Customize plot
g <- g +
## Remove space between axis and plot
scale_y_continuous(expand = c(0,0)) +
## Theme pubr to remove border and choose the legend position
theme_pubr(border = F, margin = T, legend = legend) +
# Further costumization
theme(plot.title = element_text(hjust = .5, face = "bold"), # title
plot.subtitle = element_text(hjust = .5, face = "italic"), # subtitle
axis.title = element_text(hjust = .5, face = "bold"), # axis titles
legend.title = element_blank(), # remove legend title
legend.key.size = unit(4, "mm"), #
axis.ticks = element_blank(), axis.line = element_blank(),
axis.text = element_text(size = 4))
source("~/Desktop/Packages/plotmics/R/chromRegions.R")
chromRegions(chrom_sizes = "../testdata/mm10.chrom.sizes", regions_list = regions_list, color_by = "strand")
source("~/Desktop/Packages/plotmics/R/chromRegions.R")
chromRegions(chrom_sizes = "../testdata/mm10.chrom.sizes", regions_list = regions_list, color_by = "strand")
chromRegions(chrom_sizes = "../testdata/mm10.chrom.sizes", regions_list = regions_list)
source("~/Desktop/Packages/plotmics/R/chromRegions.R")
chromRegions(chrom_sizes = "../testdata/mm10.chrom.sizes", regions_list = regions_list)
source("~/Desktop/Packages/plotmics/R/chromRegions.R")
chromRegions(chrom_sizes = "../testdata/mm10.chrom.sizes", regions_list = regions_list, size_y_text = NULL)
chromRegions(chrom_sizes = "../testdata/mm10.chrom.sizes", regions_list = regions_list, size_y_text = 10)
chromRegions(chrom_sizes = "../testdata/mm10.chrom.sizes", regions_list = regions_list)
require(scales)
source("~/Desktop/Packages/plotmics/R/chromRegions.R")
chromRegions(chrom_sizes = "../testdata/mm10.chrom.sizes", regions_list = regions_list)
chromRegions(chrom_sizes = "../testdata/mm10.chrom.sizes", regions_list = regions_list)
source("~/Desktop/Packages/plotmics/R/chromRegions.R")
chromRegions(chrom_sizes = "../testdata/mm10.chrom.sizes", regions_list = regions_list)
source("~/Desktop/Packages/plotmics/R/chromRegions.R")
chromRegions(chrom_sizes = "../testdata/mm10.chrom.sizes", regions_list = regions_list)
chromRegions(chrom_sizes = "../testdata/mm10.chrom.sizes", regions_list = regions_list)
source("~/Desktop/Packages/plotmics/R/chromRegions.R")
chromRegions(chrom_sizes = "../testdata/mm10.chrom.sizes", regions_list = regions_list)
chromRegions(chrom_sizes = "../testdata/mm10.chrom.sizes", regions_list = regions_list, size_y_text = 10)
source("~/Desktop/Packages/plotmics/R/chromRegions.R")
chromRegions(chrom_sizes = "../testdata/mm10.chrom.sizes", regions_list = regions_list)
chromRegions(chrom_sizes = "../testdata/mm10.chrom.sizes", regions_list = regions_list, size_y_text = 10)
source("~/Desktop/Packages/plotmics/R/chromRegions.R")
chromRegions(chrom_sizes = "../testdata/mm10.chrom.sizes", regions_list = regions_list, size_y_text = 10)
chromRegions(chrom_sizes = "../testdata/mm10.chrom.sizes", regions_list = regions_list)
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4)
devtools::load_all("..")
sessionInfo()
chromRegions(chrom_sizes = "../testdata/mm10.chrom.sizes", regions_list = regions_list)
# Read the data
chrom_sizes = "../testdata/mm10.chrom.sizes"%>% read.delim(header = F)
regions = regions_list %>% purrr::map(~read.delim(.x, header = F))
chromRegions(chrom_sizes = chrom_sizes, regions_list = regions)
chromRegions(chrom_sizes  = "../testdata/mm10.chrom.sizes",
regions_list = regions_list,
chr_order    = c(1,3,4,2,5,6,7,9,8,19,11,10,12,13,15,14,16,17,18,"X","Y","M", "MT") )
chromRegions(chrom_sizes  = "../testdata/mm10.chrom.sizes",
regions_list = regions_list,
chr_exclude  = c("\\."))
chromRegions(chrom_sizes  = "../testdata/mm10.chrom.sizes",
regions_list = regions_list,
chr_exclude  = c(" "))
chromRegions(chrom_sizes  = "../testdata/mm10.chrom.sizes",
regions_list = regions_list,
coord_flip   = T)
chromRegions(chrom_sizes  = "../testdata/mm10.chrom.sizes",
regions_list = regions_list,
draw_points  = F)
chromRegions(chrom_sizes  = "../testdata/mm10.chrom.sizes",
regions_list = regions_list,
colors       = c("Black", "Yellow", "Green"))
chromRegions(chrom_sizes   = "../testdata/mm10.chrom.sizes",
regions_list  = regions_list,
colors        = c("Darkgreen", "Darkred"),
color_by      = "strand")
# Read and format regions file to have strand as "."
regions_no_strand <- list("Regions1" = read.delim("../testdata/mm10.regions.tsv", header = F) %>% dplyr::mutate(V6 = "."))
# Draw the plot
chromRegions(chrom_sizes   = "../testdata/mm10.chrom.sizes",
regions_list  = regions_no_strand,
color_by      = "strand",
colors        = c("Gold3", "Darkgreen"))
chromRegions(chrom_sizes   = "../testdata/mm10.chrom.sizes",
regions_list  = regions_list,
title         = "This is a title",
subtitle      = "This is a subtitle")
chromRegions(chrom_sizes   = "../testdata/mm10.chrom.sizes",
regions_list  = regions_list,
xlab          = NULL,
ylab          = NULL)
chromRegions(chrom_sizes   = "../testdata/mm10.chrom.sizes",
regions_list  = regions_list,
caption       = "This is a caption")
chromRegions(chrom_sizes   = "../testdata/mm10.chrom.sizes",
regions_list  = regions_list,
caption       = TRUE)
chromRegions(chrom_sizes   = "../testdata/mm10.chrom.sizes",
regions_list  = regions_list,
legend        = "right")
chromRegions(chrom_sizes   = "../testdata/mm10.chrom.sizes",
regions_list  = regions_list,
legend        = "none")
chromRegions(chrom_sizes   = "../testdata/mm10.chrom.sizes",
regions_list  = regions_list,
size_y_text   = 10)
chromRegions(chrom_sizes   = "../testdata/mm10.chrom.sizes",
regions_list  = regions_list,
xlab          = NULL,
ylab          = "Position in the chromosome")
source("~/Desktop/Packages/plotmics/R/circleRegions.R")
devtools::document()
devtools::document()
knitr::opts_chunk$set(echo = TRUE, warning = F, error = F, message = F,
fig.align = "center", fig.width = 6, fig.height = 4)
devtools::load_all("..")
plotmics::circleRegions(chromsizes_sets = chromsizes_sets, regions_sets = regions_sets)
# load plotmics
library(plotmics)
source("~/Desktop/Packages/plotmics/R/circleRegions.R")
chromsizes_sets <- list("Regions1" = "../testdata/mm10.chrom.sizes",
"Regions2" = "../testdata/mm10.chrom.sizes",
"Regions3" = "../testdata/mm10.chrom.sizes")
chromsizes_sets[[1]] %>% read.delim(header = F) %>% head()
regions_sets <- list("Regions1" = "../testdata/mm10.regions.tsv",
"Regions2" = "../testdata/mm10.regions2.tsv",
"Regions3" = "../testdata/mm10.regions3.tsv")
regions_sets[[1]] %>% read.delim(header = F) %>% head()
circleRegions(chromsizes_sets = chromsizes_sets, regions_sets = regions_sets)
circleRegions(chromsizes_sets = chromsizes_sets, regions_sets = regions_sets, color_by = "region")
# Read the data
chromsizes = chromsizes_sets %>% purrr::map(~read.delim(.x, header = F))
circleRegions(chromsizes_sets = chromsizes_sets, regions_sets = regions, color_by = "region")
regions = regions_sets %>% purrr::map(~read.delim(.x, header = F))
circleRegions(chromsizes_sets = chromsizes_sets, regions_sets = regions, color_by = "region")
circleRegions(chromsizes_sets = chromsizes_sets, regions_sets = regions_sets, color_by = "region")
circleRegions(chromsizes_sets = chromsizes_sets, regions_sets = regions_sets, color_by = "region", chr_exclude = "")
circleRegions(chromsizes_sets = chromsizes_sets, regions_sets = regions_sets, color_by = "region", chr_exclude = " ")
chromRegions(chrom_sizes  = "../testdata/mm10.chrom.sizes",
regions_list = regions_list,
draw_points  = F)
circleRegions(chromsizes_sets = chromsizes_sets, regions_sets = regions_sets, draw_points = F)
source("~/Desktop/Packages/plotmics/R/circleRegions.R")
circleRegions(chromsizes_sets = chromsizes_sets, regions_sets = regions_sets, draw_points = F)
circleRegions(chromsizes_sets = chromsizes_sets, regions_sets = regions_sets, color_by = "strand")
circleRegions(chromsizes_sets = chromsizes_sets, regions_sets = regions_sets, color_by = "strand")
# Draw the plot
circleRegions(chromsizes_sets = chromsizes_sets,
regions_sets = list(regions_no_strand, regions_no_strand, regions_no_strand),
sets_names   = c(paste("Regions", 1:3)),
color_by = "strand")
# Read and format regions file to have strand as "."
regions_no_strand <- list("Regions1" = read.delim("../testdata/mm10.regions.tsv", header = F) %>% dplyr::mutate(V6 = "."))
# Draw the plot
circleRegions(chromsizes_sets = chromsizes_sets,
regions_sets = list(regions_no_strand, regions_no_strand, regions_no_strand),
sets_names   = c(paste("Regions", 1:3)),
color_by = "strand")
# Read and format regions file to have strand as "."
regions_no_strand <- read.delim("../testdata/mm10.regions.tsv", header = F) %>% dplyr::mutate(V6 = ".")
# Draw the plot
circleRegions(chromsizes_sets = chromsizes_sets,
regions_sets = list(regions_no_strand, regions_no_strand, regions_no_strand),
sets_names   = c(paste("Regions", 1:3)),
color_by = "strand")
circleRegions(chromsizes_sets = chromsizes_sets[1], regions_sets = regions_sets[1], color_by = "region")
circleRegions(chromsizes_sets = chromsizes_sets[1], regions_sets = regions_sets[1])
circleRegions(chromsizes_sets = chromsizes_sets, regions_sets = regions_sets)
circleRegions(chromsizes_sets = chromsizes_sets[1], regions_sets = regions_sets[1], color_by = "region")
# Read and format regions file to have strand as
extra <- purrr::map(regions_sets, read.delim, header = FALSE)
purrr::map(regions_sets, read.delim, header = FALSE)
# Read and format regions files
extra <- purrr::map(regions_sets, read.delim, header = FALSE) %>%
purrr::set_names(c("extra1", "2extra", "3")) %>% # this is to set the names of the extra info, which will be used as "extra" column
purrr::map(~dplyr::select(.x, "id" = V4)) %>%
purrr::imap(~dplyr::mutate(.x, extra = .y))
# Draw the plot
circleRegions(chromsizes_sets = chromsizes_sets[1:2],
regions_sets = regions_sets[1:2],
sets_names   = c(paste("Regions", 1:2)), # set colnames because they are mandatory.
extra_info = extra,
color_by = "extra")
regions_sets
# Read and format regions files
extra <- purrr::map(regions_sets, read.delim, header = FALSE) %>%
purrr::set_names(nm = c("extra1", "2extra", "3")) %>% # this is to set the names of the extra info, which will be used as "extra" column
purrr::map(~dplyr::select(.x, "id" = V4)) %>%
purrr::imap(~dplyr::mutate(.x, extra = .y))
# Draw the plot
circleRegions(chromsizes_sets = chromsizes_sets[1:2],
regions_sets = regions_sets[1:2],
sets_names   = c(paste("Regions", 1:2)), # set colnames because they are mandatory.
extra_info = extra,
color_by = "extra")
extra
# Read and format regions files
extra <- purrr::map(regions_sets, read.delim, header = FALSE) %>%
purrr::set_names(nm = c("extra1", "2extra", "3")) %>% # this is to set the names of the extra info, which will be used as "extra" column
purrr::map(~dplyr::select(.x, "id" = V4)) %>%
purrr::imap(~dplyr::mutate(.x, extra = .y)) %>% bind_rows()
# Draw the plot
circleRegions(chromsizes_sets = chromsizes_sets[1:2],
regions_sets = regions_sets[1:2],
sets_names   = c(paste("Regions", 1:2)), # set colnames because they are mandatory.
extra_info = extra,
color_by = "extra")
# Read and format regions files
extra <- purrr::map(regions_sets, read.delim, header = FALSE) %>%
purrr::set_names(nm = c("extra1", "2extra", "3")) %>% # this is to set the names of the extra info, which will be used as "extra" column
purrr::map(~dplyr::select(.x, "id" = V4)) %>%
purrr::imap(~dplyr::mutate(.x, extra = .y))
# Draw the plot
circleRegions(chromsizes_sets = chromsizes_sets[1:3],
regions_sets = regions_sets,
sets_names   = c(paste("Regions", 1:3)), # set colnames because they are mandatory.
extra_info = extra,
color_by = "extra")
head(extra[[1]])
# Draw the plot
circleRegions(chromsizes_sets = chromsizes_sets[1:3],
regions_sets = regions_sets,
sets_names   = c(paste("Regions", 1:3)), # set colnames because they are mandatory.
extra_info = extra,
color_by = "extra")
circleRegions(chromsizes_sets = chromsizes_sets, regions_sets = regions_sets, color_by = "strand")
circleRegions(chromsizes_sets = chromsizes_sets, regions_sets = regions_sets, color_by = "strand", title = "This is a title", subtitle = "This is a subtitle")
circleRegions(chromsizes_sets = chromsizes_sets,
regions_sets    = regions_sets,
caption         = "This is a caption")
chromRegions(chrom_sizes   = "../testdata/mm10.chrom.sizes",
regions_sets  = regions_sets,
caption       = TRUE)
circleRegions(chromsizes_sets = chromsizes_sets,
regions_sets    = regions_sets,
caption         = TRUE)
circleRegions(chromsizes_sets = chromsizes_sets,
regions_sets    = regions_sets,
legend          = "none")
circleRegions(chromsizes_sets = chromsizes_sets,
regions_sets    = regions_sets,
legend          = "top")
circleRegions(chromsizes_sets = chromsizes_sets,
regions_sets    = regions_sets,
legend          = "top")
# Read the data
chromsizes = chromsizes_sets %>% purrr::map(~read.delim(.x, header = F))
regions = regions_sets %>% purrr::map(~read.delim(.x, header = F))
circleRegions(chromsizes_sets = chromsizes, regions_sets = regions)
regions[[1]] %>% subset()
# Subset one of the regions and enter it as element of regions_sets
regions[[2]] <- regions[[1]][sample(1:100, 20, replace = F),]
circleRegions(chromsizes_sets = chromsizes,
regions_sets = regions,
paired = T, paired_color = "Black")
# Read the data
chromsizes = chromsizes_sets %>% purrr::map(~read.delim(.x, header = F))
regions = regions_sets %>% purrr::map(~read.delim(.x, header = F))
# Subset one of the regions and enter it as element of regions_sets
regions[[2]] <- regions[[1]][sample(1:100, 20, replace = F),]
regions[[3]] <- regions[[1]][sample(1:100, 20, replace = F),]
circleRegions(chromsizes_sets = chromsizes,
regions_sets = regions,
paired = T, paired_color = "Black")
circleRegions(chromsizes_sets = chromsizes,
regions_sets = regions,
paired = T, paired_color = "Blue")
circleRegions(chromsizes_sets = chromsizes,
regions_sets = regions,
paired = T, paired_color = "Darkblue")
source("~/Desktop/Packages/plotmics/R/circleRegions.R")
source("~/Desktop/Packages/plotmics/R/circleRegions.R")
# Read the data
chromsizes = chromsizes_sets %>% purrr::map(~read.delim(.x, header = F))
regions = regions_sets %>% purrr::map(~read.delim(.x, header = F))
# Subset one of the regions and enter it as element of regions_sets
regions[[2]] <- regions[[1]][sample(1:100, 20, replace = F),]
regions[[3]] <- regions[[1]][sample(1:100, 20, replace = F),]
circleRegions(chromsizes_sets = chromsizes,
regions_sets = regions,
paired = T, paired_color = "Darkblue")
circleRegions(chromsizes_sets = chromsizes_sets, regions_sets = regions_sets, chr_line = T)
source("~/Desktop/Packages/plotmics/R/circleRegions.R")
circleRegions(chromsizes_sets = chromsizes,
regions_sets = regions,
paired = T)
circleRegions(chromsizes_sets = chromsizes,
regions_sets = regions,
paired = T, paired_color = "Darkblue")
chromsizes_sets2 <- list("Regions1" = "../testdata/mm10.chrom.sizes",
"Regions2" = "../testdata/mm10.chrom.sizes2")
circleRegions(chromsizes_sets = chromsizes_sets2, regions_sets = regions_sets[1:2], chr_label = "black")
regions_sets
circleRegions(chromsizes_sets = chromsizes_sets2, regions_sets = regions_sets[1:2])
identical(chromsizes_sets[1], chromsizes_sets[2:length(chromsizes_sets)
])
chromsizes_sets
chromsizes_sets[2:length(chromsizes_sets)]
identical(chromsizes_sets[1], chromsizes_sets[2:length(chromsizes_sets)])
source("~/Desktop/Packages/plotmics/R/circleRegions.R")
chromsizes_sets2 <- list("Regions1" = "../testdata/mm10.chrom.sizes",
"Regions2" = "../testdata/mm10.chrom.sizes2")
circleRegions(chromsizes_sets = chromsizes_sets2, regions_sets = regions_sets[1:2])
circleRegions(chromsizes_sets = chromsizes_sets2, regions_sets = regions_sets[1:2], chr_label = "Red")
devtools::document()
pkgdown::build_site()
## Required packages
packages <- c("plyr", "dplyr", "tidyr", "stringr", "purrr", "magrittr", "reshape2",
"plyranges", "ChIPpeakAnno", "pkgcond", "Rsamtools", "UpSetR", "gridExtra", "grid",
"ggplot", "ggpubr", "ggrepel", "ggh4x", "ggdendro",  "ggforestplot")
library(packages)
## Required packages
packages <- c("plyr", "dplyr", "tidyr", "stringr", "purrr", "magrittr", "reshape2",
"plyranges", "ChIPpeakAnno", "pkgcond", "Rsamtools", "UpSetR", "gridExtra", "grid",
"ggplot", "ggpubr", "ggrepel", "ggh4x", "ggdendro",  "ggforestplot")
for (i in packages) { library(i, character.only = T) }
## Required packages
packages <- c("plyr", "dplyr", "tidyr", "stringr", "purrr", "magrittr", "reshape2",
"plyranges", "ChIPpeakAnno", "pkgcond", "Rsamtools", "UpSetR", "gridExtra", "grid",
"ggplot2", "ggpubr", "ggrepel", "ggh4x", "ggdendro",  "ggforestplot")
sessionInfo()
devtools::document()
pkgdown::build_site()
pkgdown::build_home()
remove.packages("plotmics", lib="~/R/x86_64-pc-linux-gnu-library/4.1")
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4,
warning = FALSE, error = FALSE, message = FALSE)
## Required packages
packages <- c("plyr", "dplyr", "tidyr", "stringr", "purrr", "magrittr", "reshape2",
"plyranges", "ChIPpeakAnno", "pkgcond", "Rsamtools", "UpSetR", "gridExtra", "grid",
"ggplot2", "ggpubr", "ggrepel", "ggh4x", "ggdendro",  "ggforestplot", "ggvenn")
for (i in packages) { library(i, character.only = T) }
# install plotmics if not installed
if(!require(plotmics)){ devtools::install_github("amitjavilaventura/plotmics") }
devtools::install_github("amitjavilaventura/plotmics")
# load plotmics
library(plotmics)
circleRegions(chromsizes_sets = chromsizes_sets[1], regions_sets = regions_sets[1], color_by = "region")
chromsizes_sets <- list("Regions1" = "../testdata/mm10.chrom.sizes",
"Regions2" = "../testdata/mm10.chrom.sizes",
"Regions3" = "../testdata/mm10.chrom.sizes")
chromsizes_sets[[1]] %>% read.delim(header = F) %>% head()
regions_sets <- list("Regions1" = "../testdata/mm10.regions.tsv",
"Regions2" = "../testdata/mm10.regions2.tsv",
"Regions3" = "../testdata/mm10.regions3.tsv")
regions_sets[[1]] %>% read.delim(header = F) %>% head()
circleRegions(chromsizes_sets = chromsizes_sets[1], regions_sets = regions_sets[1], color_by = "region")
circleRegions(chromsizes_sets = chromsizes_sets, regions_sets = regions_sets)
# Read the data
chromsizes = chromsizes_sets %>% purrr::map(~read.delim(.x, header = F))
regions = regions_sets %>% purrr::map(~read.delim(.x, header = F))
circleRegions(chromsizes_sets = chromsizes, regions_sets = regions)
circleRegions(chromsizes_sets = chromsizes_sets, regions_sets = regions_sets, color_by = "region", chr_exclude = "\\.")
circleRegions(chromsizes_sets = chromsizes_sets, regions_sets = regions_sets, chr_exclude = " ")
identical(chromsizes_sets[1], chromsizes_sets[2])
chromsizes_sets
(chromsizes_sets[1]==chromsizes_sets[2])
(chromsizes_sets[[1]]==chromsizes_sets[[2]])
identical(chromsizes_sets[[1]]==chromsizes_sets[[2:3]])
identical(chromsizes_sets[[1]]==chromsizes_sets[[2]])
identical(chromsizes_sets[[1]], chromsizes_sets[[2]])
source("~/Desktop/Packages/plotmics/R/circleRegions.R")
circleRegions(chromsizes_sets = chromsizes_sets, regions_sets = regions_sets, chr_exclude = " ")
