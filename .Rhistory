barAnno(anno_list = peak_list,
anno_names = c("Condition X", "Condition Y"),
names_order = c("Condition Y", "Condition X"))
barAnno(anno_list = peak_list, anno_names = c("Cond1", "Cond1"), protein = c("protX", "protY"))
barAnno(anno_list = peak_list, anno_names = c("Cond1", "Cond1"),
protein = c("protX", "protY"), protein_order = c("protY", "protX"))
barAnno(anno_list = peak_list, anno_num = 3)
barAnno(anno_list = peak_list, anno_num = "all")
barAnno(anno_list = peak_list, anno_names = c("Cond1", "Cond2"), protein = c("protX", "protY"))
barAnno(anno_list = peak_list, legend_position = "none")
barAnno(anno_list = peak_list, legend_position = "left")
barAnno(anno_list = peak_list, legend_position = "bottom")
barAnno(anno_list = peak_list, legend_position = "top")
barAnno(anno_list = peak_list, color_palette = "Set4")
barAnno(anno_list = peak_list, color_palette = "Set3")
barAnno(anno_list = peak_list, color_palette = "Set1")
barAnno
barAnno(anno_list = peak_list, color_palette = "Set1")
barAnno(anno_list = peak_list, color_palette = "Dark2")
barAnno(anno_list = peak_list, color_palette = "Blues")
barAnno(anno_list = peak_list, color_palette = "Dark1")
barAnno(anno_list = peak_list, color_palette = "Pastel2")
barAnno(anno_list = peak_list, color_palette = "GnBu")
barAnno(anno_list = peak_list, color_palette = "Oranges")
barAnno(anno_list = peak_list, xangle = 90)
barAnno(anno_list = peak_list, xangle = 80)
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4)
devtools::load_all("..")
library(dplyr)
library(purrr)
venn_counts <- getVennCounts(peak_list)
upsetPeaks(peak_list)
venn_counts$matrix
venn_counts$vennCounts
venn_counts$matrix[1:5,]
upsetPeaks(peak_list)
upsetPeaks(peak_list, order.by = "freq")
upsetPeaks(peak_list, order.by = "xx")
upsetPeaks(peak_list, conds = c("Condition 1", "Condition 2"), conds_order = c("Condition 2", "Condition 1"))
upsetPeaks(peak_list, order.by = c("freq", "degree"))
upsetPeaks(peak_list, order.by = "degree")
upsetPeaks(peak_list, order.by = "freq") # default
upsetPeaks(peak_list, order.by = "degree")
upsetPeaks(peak_list, order.by = c("freq", "degree"))
upsetPeaks(peak_list, mainbar.y.label = "This is an Y label for the main barplot",
sets.x.label = "This is the X label for the set size bar plot")
upsetPeaks(peak_list, mainbar.y.label = "This is an Y label for the main barplot",
sets.x.label = "This is the X label for the set size")
ggUpsetPeaks(peak_list)
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4)
devtools::load_all("..")
library(dplyr)
library(purrr)
ggUpsetPeaks(peak_list)
ggUpsetPeaks(peak_list)
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4)
devtools::load_all("..")
library(dplyr)
library(purrr)
ggVennPeaks(peak_list)
ggVennPeaks(peak_list)
ggUpsetPeaks(peak_list, conds = c("Condition 1", "Condition 2"))
ggUpsetPeaks(peak_list, conds = c("Condition_1", "Condition_2"), conds_order = c("Condition_2", "Condition_1"))
ggUpsetPeaks(peak_list, conds = c("Condition_1", "Condition_2"))
ggUpsetPeaks(peak_list, conds = c("Condition_1", "Condition_2"))
ggUpsetPeaks(peak_list, order_by_freq = F)
ggUpsetPeaks(peak_list, num_size = T)
ggUpsetPeaks(peak_list, num_size = 100)
ggUpsetPeaks(peak_list, num_size = 10)
ggVennPeaks(peak_list, in_fill = c("Blue"))
ggVennPeaks(peak_list, in_fill = c("Green", "Darkred"), alpha = .2)
ggVennPeaks(peak_list, out_color = c("blue", "darkred"))
ggVennPeaks(peak_list, out_color = c("blue"))
ggVennPeaks(peak_list, text_color = "blue")
ggVennPeaks(peak_list, peak_names = c("Condition 1", "Condition 2"), name_size = 4)
ggVennPeaks(peak_list, peak_names = c("Condition 1", "Condition 2"), name_size = 7)
ggVennPeaks(peak_list, peak_names = c("Condition 1", "Condition 2"), name_size = 10)
ggVennPeaks(peak_list, out_color = "blue", text_color = "red", name_color = c("red", "blue"))
ggVennPeaks(peak_list, label_size = 10)
ggVennPeaks(peak_list, name_size = 10)
devtools::document()
devtools::load_all()
pkgdown::build_articles()
pkgdown::build_site()
pkgdown::build_site()
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4)
devtools::load_all("..")
library(dplyr)
library(purrr)
peak_list <- list.files("../testdata", "peak", full.names = T, recursive = T) %>%
purrr::set_names(c("PeakX", "PeakY")) %>%
purrr::map(~read.delim(.x))
upsetPeaks(peak_list)
venn_counts <- getVennCounts(peak_list)
venn_counts <- getVennCounts(peak_list)
pkgdown::build_articles()
getVennCounts
peak_list[[1]][1:5, 1:7]
peak_list %>%
purrr::map(~as_granges(.x))
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4)
devtools::load_all("..")
library(dplyr)
library(purrr)
peak_list <- list.files("../testdata", "peak", full.names = T, recursive = T) %>%
purrr::set_names(c("PeakX", "PeakY")) %>%
purrr::map(~read.delim(.x))
upsetPeaks(peak_list)
list.files("../testdata", "peak", full.names = T, recursive = T) %>%
purrr::set_names(c("PeakX", "PeakY")) %>%
purrr::map(~read.delim(.x))
peak_list
getVennCounts(peaks = peak_list)
getVennCounts(peaks = peak_list)
getVennCounts
getVennCounts(peaks = peak_list)
getVennCounts(peaks = peak_list)
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4)
devtools::load_all("..")
library(dplyr)
library(purrr)
peak_list <- list.files("../testdata", "peak", full.names = T, recursive = T) %>%
purrr::set_names(c("PeakX", "PeakY")) %>%
purrr::map(~read.delim(.x))
upsetPeaks(peak_list)
getVennCounts
devtools::load_all("..")
conds = names(peaks)
peaks = peak_list
conds = names(peaks)
conds_order = conds
plot = F
len <- length(peaks)
peaks <- peaks %>% set_names(nm = conds)
overlaps <- peaks[conds_order] %>%
purrr::map(~as_granges(.x)) %>%
makeVennDiagram(Peaks = ., plot = plot) %>%
suppress_messages() %>% suppress_warnings()
overlaps <- overlaps$vennCounts
matrix <- matrix(data = rep(0, len), ncol = len, byrow=T) %>% set_colnames(conds_order)
for(row in 1:nrow(overlaps)){
counts <- overlaps[row, len+1]
m <- matrix(rep(overlaps[row, 1:len], counts), ncol = len, byrow = T)
matrix <- rbind(matrix, m)
}
x <- matrix %>%
na.omit %>%
as.data.frame() %>%
dplyr::mutate(rowSum = rowSums(.)) %>%
dplyr::filter(rowSum != 0) %>%
dplyr::mutate(peak = paste("peak", 1:nrow(.), sep = "")) %>%
dplyr::select(peak, everything(), -rowSum)
peaks[conds_order] %>%
purrr::map(~plyranges::as_granges(.x))
devtools::document()
devtools::load_all()
peaks
peak_list <- list.files("../testdata", "peak", full.names = T, recursive = T) %>%
purrr::set_names(c("PeakX", "PeakY")) %>%
purrr::map(~read.delim(.x))
peak_list
venn_counts <- getVennCounts(peaks = peak_list)
peaks %>%
purrr::map(~plyranges::as_granges(.x))
peaks
pkgdown::build_articles()
pkgdown::build_articles()
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4)
devtools::load_all("..")
library(dplyr)
library(purrr)
peak_list <- list.files("../testdata", "peak", full.names = T, recursive = T) %>%
purrr::set_names(c("PeakX", "PeakY"))  %>%
purrr::map(~read.delim(.x))
ggVennPeaks(peak_list)
venn_counts <- getVennCounts(peak_list)
venn_counts$vennCounts
venn_counts$matrix[1:5,]
venn_counts$matrix[1:5,] %>% as.matrix()
venn_counts$matrix[1:5,] %>% knitr::kable()
pkgdown::build_articles()
getVennCounts
peak_list
class(```{r eval=FALSE}
venn_counts <- getVennCounts(peak_list)
```
```{r eval=FALSE}
venn_counts$vennCounts
#      PeakX PeakY Counts
# [1,]     0     0      0
# [2,]     0     1     70
# [3,]     1     0    977
# [4,]     1     1     23
# attr(,"class")
# [1] "VennCounts"
```
```{r eval=FALSE}
venn_counts$matrix[1:5,] %>% knitr::kable()
# peak    PeakX   PeakY
# peak1   0       1
# peak2	  0	      1
# peak3	  0	      1
# peak4	  0	      1
# peak5	  0	      1
```)
class(peak_list)
typeof(peak_list)
is.list(peak_list)
is.list(peak_list)
typeof(peak_list[[1]])
peaks = peak_list
venn_counts <- getVennCounts(peak_list)
venn_counts
peaks %>%
purrr::map(~plyranges::as_granges(.x))
plot = F
peaks %>%
purrr::map(~plyranges::as_granges(.x)) %>%
makeVennDiagram(Peaks = ., plot = plot)
getVennCounts <- function(peaks, conds = names(peaks), conds_order = conds, plot = F){
require(pkgcond)
require(purrr) %>% suppress_messages() %>% suppress_warnings()
require(dplyr) %>% suppress_messages() %>% suppress_warnings()
require(plyranges) %>% suppress_messages() %>% suppress_warnings()
require(magrittr) %>% suppress_messages() %>% suppress_warnings()
require(ChIPpeakAnno) %>% suppress_messages() %>% suppress_warnings()
if(!is.list(peaks)){ stop("'peaks' must be a (named) list of dataframes with the columns 'seqnames', 'start' and 'end'.") }
else if(is.null(conds)){ stop("'conds' must a not-NULL character vector with the conditions of the data frames in 'peaks.") }
else if(length(peaks) != length(conds)){ stop("'peaks' and 'conds' must have the same length.") }
len <- length(peaks)
peaks <- peaks %>% purrr::set_names(nm = conds)
overlaps <- peaks %>%
purrr::map(~plyranges::as_granges(.x)) %>%
makeVennDiagram(Peaks = ., NameOfPeaks = conds, plot = plot) %>%
suppress_messages() %>% suppress_warnings()
overlaps <- overlaps$vennCounts
matrix <- matrix(data = rep(0, len), ncol = len, byrow=T) %>% set_colnames(conds)
for(row in 1:nrow(overlaps)){
counts <- overlaps[row, len+1]
m <- matrix(rep(overlaps[row, 1:len], counts), ncol = len, byrow = T)
matrix <- rbind(matrix, m)
}
x <- matrix %>%
na.omit %>%
as.data.frame() %>%
dplyr::mutate(rowSum = rowSums(.)) %>%
dplyr::filter(rowSum != 0) %>%
dplyr::mutate(peak = paste("peak", 1:nrow(.), sep = "")) %>%
dplyr::select(peak, everything(), -rowSum)
return(list("matrix" = x, "vennCounts" = overlaps))
}
venn_counts <- getVennCounts(peak_list)
venn_counts
devtools::document()
library(plotmics)
devtools::document()
pkgdown
pkgdown::build_articles()
# Load required packages
require(Rsamtools)
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
pkgdown::build_favicon()
pkgdown::build_favicons()
pkgdown::build_site
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
degs_all <- list.files("testdata", "diff", full.names = T, recursive = T) %>%
purrr::map(~read.delim(.x)) %>%
purrr::set_names(c("Cond1", "Cond2", "Cond3"))
library(dplyr)
library(ComplexHeatmap)
library(purrr)
all_lfc <- degs_all %>%
purrr::map(~dplyr::select(.x, Geneid, log2FoldChange)) %>%
purrr::imap(~magrittr::set_colnames(.x, value = c("Geneid", .y))) %>%
plyr::join_all(by = "Geneid") %>%
#dplyr::select(-c("Orgs-APC_vs_bCAT","Lgr5-APC_vs_bCAT","Orgs-WTp_vs_WTn" )) %>%
na.omit()
degs_all <- list.files("testdata", "diff", full.names = T, recursive = T) %>%
purrr::map(~read.delim(.x)) %>%
purrr::set_names(c("Cond1", "Cond2", "Cond3"))
genes <- c("Tcf7", "Tcf7l1", "Tcf7l2", "Lef1")
degs_all <- list.files("testdata", "diff", full.names = T, recursive = T) %>%
purrr::map(~read.delim(.x)) %>%
purrr::set_names(c("Cond1", "Cond2", "Cond3"))
all_lfc <- degs_all %>%
purrr::map(~dplyr::select(.x, Geneid, log2FoldChange)) %>%
purrr::map(~dplyr::filter(.x, Geneid %in% genes))
all_lfc <- degs_all %>%
purrr::map(~dplyr::select(.x, Geneid, log2FoldChange)) %>%
purrr::map(~dplyr::filter(.x, Geneid %in% genes)) %>%
purrr::imap(~magrittr::set_colnames(.x, value = c("Geneid", .y))) %>%
plyr::join_all(by = "Geneid") %>%
#dplyr::select(-c("Orgs-APC_vs_bCAT","Lgr5-APC_vs_bCAT","Orgs-WTp_vs_WTn" )) %>%
na.omit()
degs_all %>%
purrr::map(~dplyr::select(.x, Geneid, log2FoldChange)) %>%
purrr::map(~dplyr::filter(.x, Geneid %in% genes)) %>%
purrr::imap(~magrittr::set_colnames(.x, value = c("Geneid", .y))) %>%
plyr::join_all(by = "Geneid") %>%
#dplyr::select(-c("Orgs-APC_vs_bCAT","Lgr5-APC_vs_bCAT","Orgs-WTp_vs_WTn" )) %>%
na.omit()
draw(
ComplexHeatmap::Heatmap(matrix = all_lfc, name = "Log2FC",
row_title = "Tcf/Lef genes", row_title_side = "right", show_row_names = T, height = nrow(all_lfc)*unit(10, "mm"),
column_title = "Log2FC of Tcf/Lef genes", column_title_side = "top", show_column_names = T,
width = ncol(all_lfc)*unit(10, "mm"), cluster_columns = F, col = col_fun, border = T, top_annotation = top_anno,
rect_gp = gpar(col = "gray", lwd = 1),
cell_fun = function(j, i, x, y, width, height, fill) { grid.text(sprintf("%.1f", all_lfc[i, j]), x, y, gp = gpar(fontsize = 10)) }))
cn = colnames(all_lfc)
col_fun =  colorRamp2(c(-1.5, 0, 1.5), c("cornflowerblue", "white", "gold3"))
library(circlize)
cn = colnames(all_lfc)
col_fun =  colorRamp2(c(-1.5, 0, 1.5), c("cornflowerblue", "white", "gold3"))
top_anno_df <- data.frame(cn = cn,
cell = c("Organoids", "Organoids", "Organoids", "Organoids", "Organoids",  "Organoids", "Lgr5+", "Lgr5+", "Lgr5+"))
top_anno <- HeatmapAnnotation(Cell = top_anno_df$cell, col = list(Cell = c("Lgr5+"="Darkgreen", "Organoids"="lightgreen")), show_legend = T, gp = gpar(col = "gray"))
draw(
ComplexHeatmap::Heatmap(matrix = all_lfc, name = "Log2FC",
row_title = "Tcf/Lef genes", row_title_side = "right", show_row_names = T, height = nrow(all_lfc)*unit(10, "mm"),
column_title = "Log2FC of Tcf/Lef genes", column_title_side = "top", show_column_names = T,
width = ncol(all_lfc)*unit(10, "mm"), cluster_columns = F, col = col_fun, border = T,
rect_gp = gpar(col = "gray", lwd = 1),
cell_fun = function(j, i, x, y, width, height, fill) { grid.text(sprintf("%.1f", all_lfc[i, j]), x, y, gp = gpar(fontsize = 10)) }))
draw(
ComplexHeatmap::Heatmap(matrix = all_lfc, name = "Log2FC",
row_title = "genes", row_title_side = "right", show_row_names = T, height = nrow(all_lfc)*unit(10, "mm"),
column_title = "Log2FC of genes", column_title_side = "top", show_column_names = T,
width = ncol(all_lfc)*unit(10, "mm"), cluster_columns = F, col = col_fun, border = T,
rect_gp = gpar(col = "gray", lwd = 1),
cell_fun = function(j, i, x, y, width, height, fill) { grid.text(sprintf("%.1f", all_lfc[i, j]), x, y, gp = gpar(fontsize = 10)) }))
all_lfc <- degs_all %>%
purrr::map(~dplyr::select(.x, Geneid, log2FoldChange)) %>%
purrr::map(~dplyr::filter(.x, Geneid %in% genes)) %>%
purrr::imap(~magrittr::set_colnames(.x, value = c("Geneid", .y))) %>%
plyr::join_all(by = "Geneid") %>%
#dplyr::select(-c("Orgs-APC_vs_bCAT","Lgr5-APC_vs_bCAT","Orgs-WTp_vs_WTn" )) %>%
na.omit() %>%
tibble::column_to_rownames("Geneid")
cn = colnames(all_lfc)
col_fun =  colorRamp2(c(-1.5, 0, 1.5), c("cornflowerblue", "white", "gold3"))
draw(
ComplexHeatmap::Heatmap(matrix = all_lfc, name = "Log2FC",
row_title = "genes", row_title_side = "right", show_row_names = T, height = nrow(all_lfc)*unit(10, "mm"),
column_title = "Log2FC of genes", column_title_side = "top", show_column_names = T,
width = ncol(all_lfc)*unit(10, "mm"), cluster_columns = F, col = col_fun, border = T,
rect_gp = gpar(col = "gray", lwd = 1),
cell_fun = function(j, i, x, y, width, height, fill) { grid.text(sprintf("%.1f", all_lfc[i, j]), x, y, gp = gpar(fontsize = 10)) }))
cell_width = 10
cell_height = 10
num_size    = 10
rowtitle    = "genes"
coltitle    = "Lfc of genes"
show_row_names = T
cluster_columns = F
min_lfc = -1.5
mid_lfc = 0
max_lfc = 1.5
range_lfc = c(-1.5, 0, 1.5)
colors = c("cornflowerblue", "white", "gold3")
library(plyranges)
library(dplyr)
query <- data.frame(start = c(5,10, 15,20),
width = 5,
gc = runif(4)) %>%
as_iranges()
subject <- data.frame(start = c(2:6, 24),
width = 3:8,
label = letters[1:6]) %>%
as_iranges()
add_nearest_distance(query, subject)
subject
query
distanceToNearest(query, subject)
library(plotmics)
devtools::document()
library(plotmics)
pkgdown::build_site()
ggVennPeaks <- function(peak_list, peak_names = names(peak_list), percent = T,
in_fill = c("blue", "gold3"), alpha = .4,
out_color = "black", name_color = "black", text_color = "black",
name_size = 5, label_size = 3, title = "", subtitle = ""){
# Load requireed packages
require(ggvenn)
require(dplyr)
require(reshape2)
require(magrittr)
require(purrr)
require(tidyr)
# Check that inputs are OK
if(!is.list(peak_list)){ stop("'peak_list' must be a (named) list of dataframes with the columns 'seqnames', 'start' and 'end'.") }
else if(length(peak_list) != length(peak_names)){ stop("'peak_names' must be a character vector with the same length as 'peak_list'.") }
# Get Venn Counts and the peaks in each set
x <- getVennCounts(peak_list)
# Transform the matrix of thee peaks in each set in ordeer to plot the Venn
y <- x$matrix %>%
as_tibble() %>%
magrittr::set_colnames(c("Peak", paste("cond", 1:length(peak_list), sep = ""))) %>%
reshape2::melt() %>% mutate(value = if_else(value == 1, Peak, NULL)) %>%
tidyr::pivot_wider(names_from = "variable", values_from = "value") %>%
dplyr::select(-Peak) %>%
dplyr::as_tibble() %>%
as.list() %>%
purrr::set_names(peak_names)
# Draw the Venn diagram with ggvenn
venn <- ggvenn::ggvenn(data = y, show_percentage = percent,
fill_color = in_fill, fill_alpha = alpha,
stroke_color =  out_color,
set_name_color = name_color, set_name_size = name_size,
text_color = text_color, text_size = label_size)
if(!is.null(title)){ venn <- venn + labs(title = title, subtitle = subtitle)}
# Return the Venn diagram.
return(venn)
}
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4)
devtools::load_all("..")
library(dplyr)
library(purrr)
peak_list <- list.files("../testdata", "peak", full.names = T, recursive = T) %>%
purrr::set_names(c("PeakX", "PeakY"))  %>%
purrr::map(~read.delim(.x))
ggVennPeaks(peak_list)
# read the peak annotation into a list
peak_list <- list.files("../testdata", "peak", full.names = T, recursive = T) %>%
purrr::set_names(c("PeakX", "PeakY")) %>%
purrr::map(~read.delim(.x))
peak_list[[1]][1:5, 1:7]
venn_counts <- getVennCounts(peak_list)
ggVennPeaks(peak_list)
peak_list
getVennCounts <- function(peaks, conds = names(peaks), conds_order = conds, plot = F){
require(pkgcond)
require(purrr) %>% suppress_messages() %>% suppress_warnings()
require(dplyr) %>% suppress_messages() %>% suppress_warnings()
require(plyranges) %>% suppress_messages() %>% suppress_warnings()
require(magrittr) %>% suppress_messages() %>% suppress_warnings()
require(ChIPpeakAnno) %>% suppress_messages() %>% suppress_warnings()
if(!is.list(peaks)){ stop("'peaks' must be a (named) list of dataframes with the columns 'seqnames', 'start' and 'end'.") }
else if(is.null(conds)){ stop("'conds' must a not-NULL character vector with the conditions of the data frames in 'peaks.") }
else if(length(peaks) != length(conds)){ stop("'peaks' and 'conds' must have the same length.") }
len <- length(peaks)
peaks <- peaks %>% purrr::set_names(nm = conds)
overlaps <- peaks %>%
purrr::map(~plyranges::as_granges(.x)) %>%
makeVennDiagram(Peaks = ., NameOfPeaks = conds, plot = plot) %>%
suppress_messages() %>% suppress_warnings()
overlaps <- overlaps$vennCounts
matrix <- matrix(data = rep(0, len), ncol = len, byrow=T) %>% set_colnames(conds)
for(row in 1:nrow(overlaps)){
counts <- overlaps[row, len+1]
m <- matrix(rep(overlaps[row, 1:len], counts), ncol = len, byrow = T)
matrix <- rbind(matrix, m)
}
x <- matrix %>%
na.omit %>%
as.data.frame() %>%
dplyr::mutate(rowSum = rowSums(.)) %>%
dplyr::filter(rowSum != 0) %>%
dplyr::mutate(peak = paste("peak", 1:nrow(.), sep = "")) %>%
dplyr::select(peak, everything(), -rowSum)
return(list("matrix" = x, "vennCounts" = overlaps))
}
venn_counts <- getVennCounts(peak_list)
ggVennPeaks(peak_list)
ggVennPeaks <- function(peak_list, peak_names = names(peak_list), percent = T,
in_fill = c("blue", "gold3"), alpha = .4,
out_color = "black", name_color = "black", text_color = "black",
name_size = 5, label_size = 3, title = "", subtitle = ""){
# Load requireed packages
require(ggvenn)
require(dplyr)
require(reshape2)
require(magrittr)
require(purrr)
require(tidyr)
# Check that inputs are OK
if(!is.list(peak_list)){ stop("'peak_list' must be a (named) list of dataframes with the columns 'seqnames', 'start' and 'end'.") }
else if(length(peak_list) != length(peak_names)){ stop("'peak_names' must be a character vector with the same length as 'peak_list'.") }
# Get Venn Counts and the peaks in each set
x <- getVennCounts(peak_list)
# Transform the matrix of thee peaks in each set in ordeer to plot the Venn
y <- x$matrix %>%
as_tibble() %>%
magrittr::set_colnames(c("Peak", paste("cond", 1:length(peak_list), sep = ""))) %>%
reshape2::melt() %>% mutate(value = if_else(value == 1, Peak, NULL)) %>%
tidyr::pivot_wider(names_from = "variable", values_from = "value") %>%
dplyr::select(-Peak) %>%
dplyr::as_tibble() %>%
as.list() %>%
purrr::set_names(peak_names)
# Draw the Venn diagram with ggvenn
venn <- ggvenn::ggvenn(data = y, show_percentage = percent,
fill_color = in_fill, fill_alpha = alpha,
stroke_color =  out_color,
set_name_color = name_color, set_name_size = name_size,
text_color = text_color, text_size = label_size)
if(!is.null(title)){
venn <- venn + labs(title = title, subtitle = subtitle) +
theme(plot.title = element_text(face = "bold", hjust = .5),
plot.subtitle = element_text(face = "italic", hjust = .5))
}
# Return the Venn diagram.
return(venn)
}
ggVennPeaks(peak_list, peak_names = c("Condition 1", "Condition 2"),
title = "This is a title", subtitle = "This is a subtitle")
devtools::document()
pkgdown::build_site()
