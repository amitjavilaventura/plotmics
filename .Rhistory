df_filt
# Initialize list for correlation values
corr_list <- list()
# For each group, do:
for(i in unique(df_filt$group)){
# Filter the data frame by group and remove group variable
df_filt_group <- df_filt %>% dplyr::filter(group == i) %>% dplyr::select(-group)
# Compute correlation
corr <- df_filt_group %>% tibble::column_to_rownames("Geneid") %>% cor(method = corr_method)
# Format the correlation matrix to draw a full, upper or lower plot, including whether to plot the diagonal or not.
if(plot_type == "full"){ corr <- corr }
else if(plot_type == "upper") { corr[lower.tri(corr, diag = !plot_diagonal)] <- NA }
else if(plot_type == "lower") { corr[upper.tri(corr, diag = !plot_diagonal)] <- NA }
# Format the correlation matrix into a dataframe and add it to the correlation list
corr_list[[i]] <- corr %>% as.data.frame()  %>% tibble::rownames_to_column("sample") %>% dplyr::mutate(group = i)
}
# Bind all the elements in the correlation list into a unique data frame
corr_list <- dplyr::bind_rows(corr_list)
# Reshape the correlation dataframe
corr_list_melt <- corr_list %>% reshape2::melt()
# Initialize the plot with facets
g <- ggplot(corr_list_melt, aes(sample, variable, fill = value)) +
geom_tile(color = cell_border, na.rm = T) +
facet_wrap(~group)
# Reshape the correlation dataframe
corr_list_melt <- corr_list %>% reshape2::melt()
# Bind all the elements in the correlation list into a unique data frame
corr_list <- dplyr::bind_rows(corr_list)
corr_list
# Initialize list for correlation values
corr_list <- list()
# For each group, do:
for(i in unique(df_filt$group)){
# Filter the data frame by group and remove group variable
df_filt_group <- df_filt %>% dplyr::filter(group == i) %>% dplyr::select(-group)
# Compute correlation
corr <- df_filt_group %>% tibble::column_to_rownames("Geneid") %>% cor(method = corr_method)
# Format the correlation matrix to draw a full, upper or lower plot, including whether to plot the diagonal or not.
if(plot_type == "full"){ corr <- corr }
else if(plot_type == "upper") { corr[lower.tri(corr, diag = !plot_diagonal)] <- NA }
else if(plot_type == "lower") { corr[upper.tri(corr, diag = !plot_diagonal)] <- NA }
# Format the correlation matrix into a dataframe and add it to the correlation list
corr_list[[i]] <- corr %>% as.data.frame()  %>% tibble::rownames_to_column("sample") %>% dplyr::mutate(group = i)
}
corr_method        = "pearson"
# For each group, do:
for(i in unique(df_filt$group)){
# Filter the data frame by group and remove group variable
df_filt_group <- df_filt %>% dplyr::filter(group == i) %>% dplyr::select(-group)
# Compute correlation
corr <- df_filt_group %>% tibble::column_to_rownames("Geneid") %>% cor(method = corr_method)
# Format the correlation matrix to draw a full, upper or lower plot, including whether to plot the diagonal or not.
if(plot_type == "full"){ corr <- corr }
else if(plot_type == "upper") { corr[lower.tri(corr, diag = !plot_diagonal)] <- NA }
else if(plot_type == "lower") { corr[upper.tri(corr, diag = !plot_diagonal)] <- NA }
# Format the correlation matrix into a dataframe and add it to the correlation list
corr_list[[i]] <- corr %>% as.data.frame()  %>% tibble::rownames_to_column("sample") %>% dplyr::mutate(group = i)
}
plot_type          = "lower"
plot_diagonal      = TRUE
# For each group, do:
for(i in unique(df_filt$group)){
# Filter the data frame by group and remove group variable
df_filt_group <- df_filt %>% dplyr::filter(group == i) %>% dplyr::select(-group)
# Compute correlation
corr <- df_filt_group %>% tibble::column_to_rownames("Geneid") %>% cor(method = corr_method)
# Format the correlation matrix to draw a full, upper or lower plot, including whether to plot the diagonal or not.
if(plot_type == "full"){ corr <- corr }
else if(plot_type == "upper") { corr[lower.tri(corr, diag = !plot_diagonal)] <- NA }
else if(plot_type == "lower") { corr[upper.tri(corr, diag = !plot_diagonal)] <- NA }
# Format the correlation matrix into a dataframe and add it to the correlation list
corr_list[[i]] <- corr %>% as.data.frame()  %>% tibble::rownames_to_column("sample") %>% dplyr::mutate(group = i)
}
# Bind all the elements in the correlation list into a unique data frame
corr_list <- dplyr::bind_rows(corr_list)
# Reshape the correlation dataframe
corr_list_melt <- corr_list %>% reshape2::melt()
# Initialize the plot with facets
g <- ggplot(corr_list_melt, aes(sample, variable, fill = value)) +
geom_tile(color = cell_border, na.rm = T) +
facet_wrap(~group)
cell_border        = "Black"
# Initialize the plot with facets
g <- ggplot(corr_list_melt, aes(sample, variable, fill = value)) +
geom_tile(color = cell_border, na.rm = T) +
facet_wrap(~group)
g
# Force size of the heatmap
g <- g + ggh4x::force_panelsizes(rows = unit(plot_size, "mm"), cols = unit(plot_size, "mm")) +
scale_x_discrete(expand = c(0,0)) + scale_y_discrete(expand = c(0,0))
g
legend_height <- legend_size[2]; legend_width <- legend_size[1]; legend_title_angle = 270; legend_title_pos = "right"
plot_size          = 85
plot_border        = TRUE
plot_caption       = NULL
legend_pos         = "right"
legend_size        = c(8,plot_size)
legend_limits      = c(-1,1)
legend_breaks_by   = 0.5
# Setup the legend
if(legend_pos %in% c("right")) { legend_height <- legend_size[2]; legend_width <- legend_size[1]; legend_title_angle = 270; legend_title_pos = "right" }
# Format the legend
g <- g + scale_fill_gradient2(limits = legend_limits, midpoint = median(legend_limits),
breaks = seq(legend_limits[1],legend_limits[2],legend_breaks_by), na.value = NA,
oob = scales::squish, ## to put out of bound values into scale
low = plot_colors[1], high = plot_colors[3], mid = plot_colors[2],
guide = guide_colorbar(title = legend_title,
title.position = legend_title_pos,
title.theme = element_text(angle = legend_title_angle,
hjust = .5, vjust = .5,
size = legend_title_size),
frame.colour = "black", frame.linewidth = 1.5,
ticks.colour = NA,
barheight = unit(legend_height, "mm"),
barwidth  = unit(legend_width, "mm")))
plot_colors        = c("Gold3", "White", "Cornflowerblue")
# Format the legend
g <- g + scale_fill_gradient2(limits = legend_limits, midpoint = median(legend_limits),
breaks = seq(legend_limits[1],legend_limits[2],legend_breaks_by), na.value = NA,
oob = scales::squish, ## to put out of bound values into scale
low = plot_colors[1], high = plot_colors[3], mid = plot_colors[2],
guide = guide_colorbar(title = legend_title,
title.position = legend_title_pos,
title.theme = element_text(angle = legend_title_angle,
hjust = .5, vjust = .5,
size = legend_title_size),
frame.colour = "black", frame.linewidth = 1.5,
ticks.colour = NA,
barheight = unit(legend_height, "mm"),
barwidth  = unit(legend_width, "mm")))
legend_size        = c(8,plot_size)
legend_title       = paste(stringr::str_to_sentence(corr_method), "correlation", sep = " ")
legend_title_size  = 10
coeffs_color       = "Black"
coeffs_size        = 4
title_hjust        = .5
title_face         = "plain"
title_size         = 12
subtitle_face      = "italic"
subtitle_size      = 11
caption_size       = 6
axis_text_size     = 8
axis_text_color    = "black"
by_groups = T
# Format the legend
g <- g + scale_fill_gradient2(limits = legend_limits, midpoint = median(legend_limits),
breaks = seq(legend_limits[1],legend_limits[2],legend_breaks_by), na.value = NA,
oob = scales::squish, ## to put out of bound values into scale
low = plot_colors[1], high = plot_colors[3], mid = plot_colors[2],
guide = guide_colorbar(title = legend_title,
title.position = legend_title_pos,
title.theme = element_text(angle = legend_title_angle,
hjust = .5, vjust = .5,
size = legend_title_size),
frame.colour = "black", frame.linewidth = 1.5,
ticks.colour = NA,
barheight = unit(legend_height, "mm"),
barwidth  = unit(legend_width, "mm")))
# Draw the coefficients
if(!is.null(coeffs_color)) { g <- g + geom_text(aes(label = round(value, 2)), color = coeffs_color, size = coeffs_size, na.rm = T) }
# Add title, subtitle and caption
if(!is.null(plot_title)) { g <- g + ggtitle( label = plot_title, subtitle = plot_subtitle ) }
if(!is.null(plot_caption)) { g <- g + labs( caption  = plot_caption) }
# Format theme
g <- g + theme(plot.title = element_text(face = title_face, size = title_size, hjust = title_hjust),
plot.subtitle = element_text(face = subtitle_face, size = subtitle_size, hjust = title_hjust),
plot.caption = element_text(size = caption_size),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text  = element_text(size = axis_text_size, colour = axis_text_color),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
panel.border = element_rect(size = 1.1))
g
# Initialize the plot with facets
g <- ggplot(corr_list_melt, aes(sample, variable, fill = value)) +
geom_tile(color = cell_border, na.rm = T) +
facet_wrap(~group)
# If the by_groups option is set to FALSE (default)
if(!by_groups){
# Remove group column is present
if("group" %in% colnames(df_filt)){ df_filt <- df_filt %>% dplyr::select(-group) }
# Do correlation and format the correlation matrix -----
corr <- df_filt %>% tibble::column_to_rownames("Geneid") %>% cor(method = corr_method)
# Set plot type as full, upper or lower, including whether or not to plot the diagonal
if(plot_type == "full"){ corr <- corr }
else if(plot_type == "upper") { corr[lower.tri(corr, diag = !plot_diagonal)] <- NA }
else if(plot_type == "lower") { corr[upper.tri(corr, diag = !plot_diagonal)] <- NA }
# Melt correlation matrix
corr.m <- reshape2::melt(corr)
# Draw the plot ----
# Initialize the plot and the squares
g <- ggplot(corr.m, aes(Var1, Var2, fill = value)) + geom_tile(color = cell_border, na.rm = T)
} else {
# Add the group variable to the filtered data frame (inner join of the filtered data frame)
df_filt <- df_filt %>% dplyr::inner_join(df %>% dplyr::select(Geneid, group))
# Initialize list for correlation values
corr_list <- list()
# For each group, do:
for(i in unique(df_filt$group)){
# Filter the data frame by group and remove group variable
df_filt_group <- df_filt %>% dplyr::filter(group == i) %>% dplyr::select(-group)
# Compute correlation
corr <- df_filt_group %>% tibble::column_to_rownames("Geneid") %>% cor(method = corr_method)
# Format the correlation matrix to draw a full, upper or lower plot, including whether to plot the diagonal or not.
if(plot_type == "full"){ corr <- corr }
else if(plot_type == "upper") { corr[lower.tri(corr, diag = !plot_diagonal)] <- NA }
else if(plot_type == "lower") { corr[upper.tri(corr, diag = !plot_diagonal)] <- NA }
# Format the correlation matrix into a dataframe and add it to the correlation list
corr_list[[i]] <- corr %>% as.data.frame()  %>% tibble::rownames_to_column("sample") %>% dplyr::mutate(group = i)
}
# Bind all the elements in the correlation list into a unique data frame
corr_list <- dplyr::bind_rows(corr_list)
# Reshape the correlation dataframe
corr_list_melt <- corr_list %>% reshape2::melt()
# Initialize the plot with facets
g <- ggplot(corr_list_melt, aes(sample, variable, fill = value)) +
geom_tile(color = cell_border, na.rm = T) +
facet_wrap(~group)
}
# Force size of the heatmap
g <- g + ggh4x::force_panelsizes(rows = unit(plot_size, "mm"), cols = unit(plot_size, "mm")) +
scale_x_discrete(expand = c(0,0)) + scale_y_discrete(expand = c(0,0))
# Theme pubr
g <- g + theme_pubr(border = plot_border, legend = legend_pos)
g
# Setup the legend
if(legend_pos %in% c("right")) { legend_height <- legend_size[2]; legend_width <- legend_size[1]; legend_title_angle = 270; legend_title_pos = "right" }
else if(legend_pos %in% c("left")) { legend_height <- legend_size[2]; legend_width <- legend_size[1]; legend_title_angle = 90; legend_title_pos = "left" }
# Format the legend
g <- g + scale_fill_gradient2(limits = legend_limits, midpoint = median(legend_limits),
breaks = seq(legend_limits[1],legend_limits[2],legend_breaks_by), na.value = NA,
oob = scales::squish, ## to put out of bound values into scale
low = plot_colors[1], high = plot_colors[3], mid = plot_colors[2],
guide = guide_colorbar(title = legend_title,
title.position = legend_title_pos,
title.theme = element_text(angle = legend_title_angle,
hjust = .5, vjust = .5,
size = legend_title_size),
frame.colour = "black", frame.linewidth = 1.5,
ticks.colour = NA,
barheight = unit(legend_height, "mm"),
barwidth  = unit(legend_width, "mm")))
g
# Draw the coefficients
if(!is.null(coeffs_color)) { g <- g + geom_text(aes(label = round(value, 2)), color = coeffs_color, size = coeffs_size, na.rm = T) }
g
g <- g + ggtitle( label = plot_title, subtitle = plot_subtitle )
if(!is.null(plot_caption)) { g <- g + labs( caption  = plot_caption) }
# Format theme
g <- g + theme(plot.title = element_text(face = title_face, size = title_size, hjust = title_hjust),
plot.subtitle = element_text(face = subtitle_face, size = subtitle_size, hjust = title_hjust),
plot.caption = element_text(size = caption_size),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text  = element_text(size = axis_text_size, colour = axis_text_color),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
panel.border = element_rect(size = 1.1))
g
expressionCor <- function(df,
genes              = NULL,
samples            = NULL,
corr_method        = "pearson",
plot_type          = "lower",
plot_diagonal      = TRUE,
plot_size          = 85,
plot_border        = TRUE,
plot_colors        = c("Gold3", "White", "Cornflowerblue"),
plot_title         = NULL,
plot_subtitle      = NULL,
plot_caption       = NULL,
cell_border        = "Black",
legend_pos         = "right",
legend_size        = c(8,plot_size),
legend_limits      = c(-1,1),
legend_breaks_by   = 0.5,
legend_title       = paste(stringr::str_to_sentence(corr_method), "correlation", sep = " "),
legend_title_size  = 10,
coeffs_color       = "Black",
coeffs_size        = 4,
title_hjust        = .5,
title_face         = "plain",
title_size         = 12,
subtitle_face      = "italic",
subtitle_size      = 11,
caption_size       = 6,
axis_text_size     = 8,
axis_text_color    = "black",
by_groups          = F) {
# Load packages -----
require(dplyr)
require(tibble)
require(reshape2)
require(ggplot2)
require(ggh4x)
require(ggpubr)
require(scales)
# Format and filter data frame -----
df_filt <- df %>% na.omit()
if(!is.null(genes)) { df_filt <- df_filt %>% dplyr::filter(Geneid %in% genes) }
if(!is.null(samples)) { df_filt <- df_filt %>% dplyr::select(c("Geneid", samples)) }
# If the by_groups option is set to FALSE (default)
if(!by_groups){
# Remove group column is present
if("group" %in% colnames(df_filt)){ df_filt <- df_filt %>% dplyr::select(-group) }
# Do correlation and format the correlation matrix -----
corr <- df_filt %>% tibble::column_to_rownames("Geneid") %>% cor(method = corr_method)
# Set plot type as full, upper or lower, including whether or not to plot the diagonal
if(plot_type == "full"){ corr <- corr }
else if(plot_type == "upper") { corr[lower.tri(corr, diag = !plot_diagonal)] <- NA }
else if(plot_type == "lower") { corr[upper.tri(corr, diag = !plot_diagonal)] <- NA }
# Melt correlation matrix
corr.m <- reshape2::melt(corr)
# Draw the plot ----
# Initialize the plot and the squares
g <- ggplot(corr.m, aes(Var1, Var2, fill = value)) + geom_tile(color = cell_border, na.rm = T)
} else {
# Add the group variable to the filtered data frame (inner join of the filtered data frame)
df_filt <- df_filt %>% dplyr::inner_join(df %>% dplyr::select(Geneid, group))
# Initialize list for correlation values
corr_list <- list()
# For each group, do:
for(i in unique(df_filt$group)){
# Filter the data frame by group and remove group variable
df_filt_group <- df_filt %>% dplyr::filter(group == i) %>% dplyr::select(-group)
# Compute correlation
corr <- df_filt_group %>% tibble::column_to_rownames("Geneid") %>% cor(method = corr_method)
# Format the correlation matrix to draw a full, upper or lower plot, including whether to plot the diagonal or not.
if(plot_type == "full"){ corr <- corr }
else if(plot_type == "upper") { corr[lower.tri(corr, diag = !plot_diagonal)] <- NA }
else if(plot_type == "lower") { corr[upper.tri(corr, diag = !plot_diagonal)] <- NA }
# Format the correlation matrix into a dataframe and add it to the correlation list
corr_list[[i]] <- corr %>% as.data.frame()  %>% tibble::rownames_to_column("sample") %>% dplyr::mutate(group = i)
}
# Bind all the elements in the correlation list into a unique data frame
corr_list <- dplyr::bind_rows(corr_list)
# Reshape the correlation dataframe
corr_list_melt <- corr_list %>% reshape2::melt()
# Initialize the plot with facets
g <- ggplot(corr_list_melt, aes(sample, variable, fill = value)) +
geom_tile(color = cell_border, na.rm = T) +
facet_wrap(~group)
}
# Force size of the heatmap
g <- g + ggh4x::force_panelsizes(rows = unit(plot_size, "mm"), cols = unit(plot_size, "mm")) +
scale_x_discrete(expand = c(0,0)) + scale_y_discrete(expand = c(0,0))
# Theme pubr
g <- g + theme_pubr(border = plot_border, legend = legend_pos)
# Setup the legend
if(legend_pos %in% c("right")) { legend_height <- legend_size[2]; legend_width <- legend_size[1]; legend_title_angle = 270; legend_title_pos = "right" }
else if(legend_pos %in% c("left")) { legend_height <- legend_size[2]; legend_width <- legend_size[1]; legend_title_angle = 90; legend_title_pos = "left" }
else if(legend_pos %in% c("bottom")) { legend_size <- rev(legend_size); legend_height <- legend_size[2]; legend_width <- legend_size[1]; legend_title_angle = 0; legend_title_pos = "bottom" }
else if(legend_pos %in% c("top")) { legend_size <- rev(legend_size); legend_height <- legend_size[2]; legend_width <- legend_size[1]; legend_title_angle = 0; legend_title_pos = "top" }
# Format the legend
g <- g + scale_fill_gradient2(limits = legend_limits, midpoint = median(legend_limits),
breaks = seq(legend_limits[1],legend_limits[2],legend_breaks_by), na.value = NA,
oob = scales::squish, ## to put out of bound values into scale
low = plot_colors[1], high = plot_colors[3], mid = plot_colors[2],
guide = guide_colorbar(title = legend_title,
title.position = legend_title_pos,
title.theme = element_text(angle = legend_title_angle,
hjust = .5, vjust = .5,
size = legend_title_size),
frame.colour = "black", frame.linewidth = 1.5,
ticks.colour = NA,
barheight = unit(legend_height, "mm"),
barwidth  = unit(legend_width, "mm")))
# Draw the coefficients
if(!is.null(coeffs_color)) { g <- g + geom_text(aes(label = round(value, 2)), color = coeffs_color, size = coeffs_size, na.rm = T) }
# Add title, subtitle and caption
if(!is.null(plot_title)) { g <- g + ggtitle( label = plot_title, subtitle = plot_subtitle ) }
if(!is.null(plot_caption)) { g <- g + labs( caption  = plot_caption) }
# Format theme
g <- g + theme(plot.title = element_text(face = title_face, size = title_size, hjust = title_hjust),
plot.subtitle = element_text(face = subtitle_face, size = subtitle_size, hjust = title_hjust),
plot.caption = element_text(size = caption_size),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text  = element_text(size = axis_text_size, colour = axis_text_color),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
panel.border = element_rect(size = 1.1))
return(g)
}
expressionCor(df = expr2, samples = colnames(expr)[-1], by_groups = T)
expressionCor(df = expr2, samples = colnames(expr)[-1], by_groups = T)
expressionCor(df = expr2, samples = colnames(expr)[-1], by_groups = T)
expressionCor(df = expr, coeffs_color = "Black") +
expressionCor(df = expr, coeffs_color = "Red", coeffs_size = 4)
expressionCor(df = expr, coeffs_color = "Black") +
expressionCor(df = expr, coeffs_color = "Red", coeffs_size = 2)
expressionCor(df = expr, coeffs_color = "Black") +
expressionCor(df = expr, coeffs_color = "Red", coeffs_size = 6)
expressionCor(expr, plot_colors = c("blue", "yellow", "red"))
devtools::document()
devtools::document()
pkgdown::build_site()
pkgdown::build_home()
pkgdown::build_home()
devtools::install_github("amitjavilaventura/plotmics")
expr <- read.delim("../testdata/tpm.tsv")
expr[1:5,1:5]
expr[1:5,1:5]
# Format and filter data frame -----
df_filt <- df %>% na.omit()
samples            = NULL
genes              = NULL
samples_order      = samples
corr_method        = "pearson"
# Do correlation and format the correlation matrix -----
corr <- df_filt %>% tibble::column_to_rownames("Geneid") %>% cor(method = corr_method)
# Melt correlation matrix
corr.m <- reshape2::melt(corr)
corr.m
df = expr
# Format and filter data frame -----
df_filt <- df %>% na.omit()
# Do correlation and format the correlation matrix -----
corr <- df_filt %>% tibble::column_to_rownames("Geneid") %>% cor(method = corr_method)
# Set plot type as full, upper or lower, including whether or not to plot the diagonal
if(plot_type == "full"){ corr <- corr }
else if(plot_type == "upper") { corr[lower.tri(corr, diag = !plot_diagonal)] <- NA }
# Do correlation and format the correlation matrix -----
corr <- df_filt %>% tibble::column_to_rownames("Geneid") %>% cor(method = corr_method)
# Melt correlation matrix
corr.m <- reshape2::melt(corr)
corr.m
# Melt correlation matrix
corr.m <- reshape2::melt(corr) %>% as.data.frame()
corr.m
corr.m
# Melt correlation matrix
corr.m <- reshape2::melt(corr) %>% as.tibble()
# Melt correlation matrix
corr.m <- reshape2::melt(corr) %>% as_tibble()
corr.m
str(corr.m)
expr2 <- expr %>% dplyr::mutate(group = c(rep(c("group1", "group2", "group3"), nrow(expr)/3), "group1", "group2"))
df = expr2
# Format and filter data frame -----
df_filt <- df %>% na.omit()
# Add the group variable to the filtered data frame (inner join of the filtered data frame)
df_filt <- df_filt %>% dplyr::inner_join(df %>% dplyr::select(Geneid, group))
# Initialize list for correlation values
corr_list <- list()
# For each group, do:
for(i in unique(df_filt$group)){
# Filter the data frame by group and remove group variable
df_filt_group <- df_filt %>% dplyr::filter(group == i) %>% dplyr::select(-group)
# Compute correlation
corr <- df_filt_group %>% tibble::column_to_rownames("Geneid") %>% cor(method = corr_method)
# Format the correlation matrix to draw a full, upper or lower plot, including whether to plot the diagonal or not.
if(plot_type == "full"){ corr <- corr }
else if(plot_type == "upper") { corr[lower.tri(corr, diag = !plot_diagonal)] <- NA }
else if(plot_type == "lower") { corr[upper.tri(corr, diag = !plot_diagonal)] <- NA }
# Format the correlation matrix into a dataframe and add it to the correlation list
corr_list[[i]] <- corr %>% as.data.frame()  %>% tibble::rownames_to_column("sample") %>% dplyr::mutate(group = i)
}
plot_type          = "lower"
plot_diagonal      = TRUE
# For each group, do:
for(i in unique(df_filt$group)){
# Filter the data frame by group and remove group variable
df_filt_group <- df_filt %>% dplyr::filter(group == i) %>% dplyr::select(-group)
# Compute correlation
corr <- df_filt_group %>% tibble::column_to_rownames("Geneid") %>% cor(method = corr_method)
# Format the correlation matrix to draw a full, upper or lower plot, including whether to plot the diagonal or not.
if(plot_type == "full"){ corr <- corr }
else if(plot_type == "upper") { corr[lower.tri(corr, diag = !plot_diagonal)] <- NA }
else if(plot_type == "lower") { corr[upper.tri(corr, diag = !plot_diagonal)] <- NA }
# Format the correlation matrix into a dataframe and add it to the correlation list
corr_list[[i]] <- corr %>% as.data.frame()  %>% tibble::rownames_to_column("sample") %>% dplyr::mutate(group = i)
}
# Bind all the elements in the correlation list into a unique data frame
corr_list <- dplyr::bind_rows(corr_list)
corr_list_melt
# Reshape the correlation dataframe
corr_list_melt <- corr_list %>% reshape2::melt()
corr_list_melt
# Reshape the correlation dataframe
corr_list_melt <- corr_list %>% reshape2::melt() %>% dplyr::as_tibble()
corr_list_melt
if(!is.null(samples_order)) { corr_list_melt <- corr_list_melt %>% dplyr::mutate(sample = factor(sample, levels = sample_order), variable = factor(variable, levels = sample_order)) }
corr.m
devtools::document()
expr2 <- expr %>% dplyr::mutate(group = c(rep(c("group1", "group2", "group3"), nrow(expr)/3), "group1", "group2"))
df = expr2
colnames(expr2)
colnames(expr2)[2:6]
colnames(expr2)[2:7]
samples = colnames(expr2)[2:7]
samples_order = colnames(expr2)[2:7]
genes              = NULL
corr_method        = "pearson"
plot_diagonal      = TRUE,
plot_type          = "lower"
sample_order
devtools::document()
devtools::install_github("amitjavilaventura/plotmics")
devtools::document()
devtools::install_github("amitjavilaventura/plotmics")
pkgdown::build_site()
devtools::document()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
devtools::install_github("amitjavilaventura/plotmics")
devtools::document()
devtools::install_github("amitjavilaventura/plotmics")
