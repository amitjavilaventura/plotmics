# Setup the legend
if(legend_pos %in% c("right", "left")) { legend_height <- legend_long; legend_width <- legend_wide }
else if(legend_pos %in% c("top", "bottom")) { legend_height <- legend_wide; legend_width <- legend_long }
g <- g + scale_fill_gradient2(limits = legend_limits, midpoint = median(legend_limits),
breaks = seq(legend_limits[1],legend_limits[2],legend_breaks_by), na.value = NA,
oob = scales::squish, ## to put out of bound values into scale
low = plot_colors[1], high = plot_colors[3], mid = plot_colors[2],
guide = guide_colorbar(title = legend_title,
title.position = legend_title_pos,
title.theme = element_text(angle = legend_title_angle,
hjust = .5, vjust = .5,
size = legend_title_size),
frame.colour = "black", frame.linewidth = 1.5,
ticks.colour = NA,
barheight = unit(legend_height, "mm"),
barwidth  = unit(legend_width, "mm")))
if(!is.null(coeffs_color)) { g <- g + geom_text(aes(label = round(value, 2)), color = coeffs_color, size = coeffs_size) }
}
legend_pos = "bottom"
df_filt <- df
if(!is.null(genes)) { df_filt <- df_filt %>% dplyr::filter(Geneid %in% genes) }
if(!is.null(samples)) { df_filt <- df_filt %>% dplyr::select(c("Geneid", samples)) }
corr <- df_filt %>% tibble::column_to_rownames("Geneid") %>% cor(method = corr_method)
if(plot_type == "full"){ corr <- corr }
else if(plot_type == "upper") { corr[lower.tri(corr, diag = !plot_diagonal)] <- NA }
else if(plot_type == "lower") { corr[upper.tri(corr, diag = !plot_diagonal)] <- NA }
corr.m <- reshape2::melt(corr)
g <- ggplot(corr.m, aes(Var1, Var2, fill = value)) + geom_tile(color = cell_border) #+ theme_pubr(legend = legend_pos)
# Force size of the heatmap
g <- g + ggh4x::force_panelsizes(rows = unit(plot_size, "mm"), cols = unit(plot_size, "mm")) +
scale_x_discrete(expand = c(0,0)) + scale_y_discrete(expand = c(0,0))
# Theme
g <- g + theme_pubr(border = plot_border, legend = legend_pos)
# Setup the legend
if(legend_pos %in% c("right", "left")) { legend_height <- legend_long; legend_width <- legend_wide }
legend_height <- legend_wide; legend_width <- legend_long
g <- g + scale_fill_gradient2(limits = legend_limits, midpoint = median(legend_limits),
breaks = seq(legend_limits[1],legend_limits[2],legend_breaks_by), na.value = NA,
oob = scales::squish, ## to put out of bound values into scale
low = plot_colors[1], high = plot_colors[3], mid = plot_colors[2],
guide = guide_colorbar(title = legend_title,
title.position = legend_title_pos,
title.theme = element_text(angle = legend_title_angle,
hjust = .5, vjust = .5,
size = legend_title_size),
frame.colour = "black", frame.linewidth = 1.5,
ticks.colour = NA,
barheight = unit(legend_height, "mm"),
barwidth  = unit(legend_width, "mm")))
g
g
legend_title       = paste(stringr::str_to_sentence(corr_method), "cprrelation", sep = " ")
g <- ggplot(corr.m, aes(Var1, Var2, fill = value)) + geom_tile(color = cell_border) #+ theme_pubr(legend = legend_pos)
# Force size of the heatmap
g <- g + ggh4x::force_panelsizes(rows = unit(plot_size, "mm"), cols = unit(plot_size, "mm")) +
scale_x_discrete(expand = c(0,0)) + scale_y_discrete(expand = c(0,0))
legend_pos         = "right"
legend_wide        = 8
# Setup the legend
if(legend_pos %in% c("right", "left")) { legend_height <- legend_long; legend_width <- legend_wide }
g <- g + scale_fill_gradient2(limits = legend_limits, midpoint = median(legend_limits),
breaks = seq(legend_limits[1],legend_limits[2],legend_breaks_by), na.value = NA,
oob = scales::squish, ## to put out of bound values into scale
low = plot_colors[1], high = plot_colors[3], mid = plot_colors[2],
guide = guide_colorbar(title = legend_title,
title.position = legend_title_pos,
title.theme = element_text(angle = legend_title_angle,
hjust = .5, vjust = .5,
size = legend_title_size),
frame.colour = "black", frame.linewidth = 1.5,
ticks.colour = NA,
barheight = unit(legend_height, "mm"),
barwidth  = unit(legend_width, "mm")))
g
# Theme pubr
g <- g + theme_pubr(border = plot_border, legend = legend_pos)
g
# Format theme
g + theme(plot.title = element_text(face = title_face, size = title_size, hjust = title_hjust),
plot.subtitle = element_text(face = subtitle_face, size = subtitle_size, hjust = title_hjust),
plot.caption = element_text(size = caption_size),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text  = element_text(size = axis_text_size),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
panel.border = element_rect(size = 1.1))
exprCorrPlot <- function(df,
genes              = NULL,
samples            = NULL,
corr_method        = "pearson",
plot_type          = "lower",
plot_diagonal      = T,
plot_size          = 85,
plot_border        = T,
plot_colors        = c("Gold3", "White", "Cornflowerblue"),
plot_title         = NULL,
plot_subtitle      = NULL,
plot_caption       = NULL,
cell_border        = "Black",
legend_pos         = "right",
legend_long        = plot_size,
legend_wide        = 8,
legend_limits      = c(-1,1),
legend_breaks_by   = 0.5,
legend_title       = paste(stringr::str_to_sentence(corr_method), "cprrelation", sep = " "),
legend_title_pos   = "right",
legend_title_angle = 270,
legend_title_size  = 10,
coeffs_color       = "Black",
coeffs_size        = 4,
title_hjust        = .5,
title_face         = "plain",
title_size         = 12,
subtitle_face      = "italic",
subtitle_size      = 11,
caption_size       = 6,
axis_text_size     = 8,
axis_text_color    = "black") {
df_filt <- df
if(!is.null(genes)) { df_filt <- df_filt %>% dplyr::filter(Geneid %in% genes) }
if(!is.null(samples)) { df_filt <- df_filt %>% dplyr::select(c("Geneid", samples)) }
corr <- df_filt %>% tibble::column_to_rownames("Geneid") %>% cor(method = corr_method)
if(plot_type == "full"){ corr <- corr }
else if(plot_type == "upper") { corr[lower.tri(corr, diag = !plot_diagonal)] <- NA }
else if(plot_type == "lower") { corr[upper.tri(corr, diag = !plot_diagonal)] <- NA }
corr.m <- reshape2::melt(corr)
g <- ggplot(corr.m, aes(Var1, Var2, fill = value)) + geom_tile(color = cell_border) #+ theme_pubr(legend = legend_pos)
# Force size of the heatmap
g <- g + ggh4x::force_panelsizes(rows = unit(plot_size, "mm"), cols = unit(plot_size, "mm")) +
scale_x_discrete(expand = c(0,0)) + scale_y_discrete(expand = c(0,0))
# Theme pubr
g <- g + theme_pubr(border = plot_border, legend = legend_pos)
# Setup the legend
if(legend_pos %in% c("right", "left")) { legend_height <- legend_long; legend_width <- legend_wide }
else if(legend_pos %in% c("top", "bottom")) { legend_height <- legend_wide; legend_width <- legend_long }
g <- g + scale_fill_gradient2(limits = legend_limits, midpoint = median(legend_limits),
breaks = seq(legend_limits[1],legend_limits[2],legend_breaks_by), na.value = NA,
oob = scales::squish, ## to put out of bound values into scale
low = plot_colors[1], high = plot_colors[3], mid = plot_colors[2],
guide = guide_colorbar(title = legend_title,
title.position = legend_title_pos,
title.theme = element_text(angle = legend_title_angle,
hjust = .5, vjust = .5,
size = legend_title_size),
frame.colour = "black", frame.linewidth = 1.5,
ticks.colour = NA,
barheight = unit(legend_height, "mm"),
barwidth  = unit(legend_width, "mm")))
if(!is.null(coeffs_color)) { g <- g + geom_text(aes(label = round(value, 2)), color = coeffs_color, size = coeffs_size) }
# Format theme
g <- g + theme(plot.title = element_text(face = title_face, size = title_size, hjust = title_hjust),
plot.subtitle = element_text(face = subtitle_face, size = subtitle_size, hjust = title_hjust),
plot.caption = element_text(size = caption_size),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text  = element_text(size = axis_text_size, colour = axis_text_color),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
panel.border = element_rect(size = 1.1))
g
}
exprCorrPlot(df = expr)
exprCorrPlot(df = df)
exprCorrPlot(df = df, plot_type = "full")
exprCorrPlot(df = df, plot_type = "upper")
exprCorrPlot(df = df, plot_title = "title")
df_filt <- df %>% na.omit()
exprCorrPlot <- function(df,
genes              = NULL,
samples            = NULL,
corr_method        = "pearson",
plot_type          = "lower",
plot_diagonal      = T,
plot_size          = 85,
plot_border        = T,
plot_colors        = c("Gold3", "White", "Cornflowerblue"),
plot_title         = NULL,
plot_subtitle      = NULL,
plot_caption       = NULL,
cell_border        = "Black",
legend_pos         = "right",
legend_long        = plot_size,
legend_wide        = 8,
legend_limits      = c(-1,1),
legend_breaks_by   = 0.5,
legend_title       = paste(stringr::str_to_sentence(corr_method), "cprrelation", sep = " "),
legend_title_pos   = "right",
legend_title_angle = 270,
legend_title_size  = 10,
coeffs_color       = "Black",
coeffs_size        = 4,
title_hjust        = .5,
title_face         = "plain",
title_size         = 12,
subtitle_face      = "italic",
subtitle_size      = 11,
caption_size       = 6,
axis_text_size     = 8,
axis_text_color    = "black") {
df_filt <- df %>% na.omit()
if(!is.null(genes)) { df_filt <- df_filt %>% dplyr::filter(Geneid %in% genes) }
if(!is.null(samples)) { df_filt <- df_filt %>% dplyr::select(c("Geneid", samples)) }
corr <- df_filt %>% tibble::column_to_rownames("Geneid") %>% cor(method = corr_method)
if(plot_type == "full"){ corr <- corr }
else if(plot_type == "upper") { corr[lower.tri(corr, diag = !plot_diagonal)] <- NA }
else if(plot_type == "lower") { corr[upper.tri(corr, diag = !plot_diagonal)] <- NA }
corr.m <- reshape2::melt(corr)
g <- ggplot(corr.m, aes(Var1, Var2, fill = value)) + geom_tile(color = cell_border) #+ theme_pubr(legend = legend_pos)
# Force size of the heatmap
g <- g + ggh4x::force_panelsizes(rows = unit(plot_size, "mm"), cols = unit(plot_size, "mm")) +
scale_x_discrete(expand = c(0,0)) + scale_y_discrete(expand = c(0,0))
# Theme pubr
g <- g + theme_pubr(border = plot_border, legend = legend_pos)
# Setup the legend
if(legend_pos %in% c("right", "left")) { legend_height <- legend_long; legend_width <- legend_wide }
else if(legend_pos %in% c("top", "bottom")) { legend_height <- legend_wide; legend_width <- legend_long }
g <- g + scale_fill_gradient2(limits = legend_limits, midpoint = median(legend_limits),
breaks = seq(legend_limits[1],legend_limits[2],legend_breaks_by), na.value = NA,
oob = scales::squish, ## to put out of bound values into scale
low = plot_colors[1], high = plot_colors[3], mid = plot_colors[2],
guide = guide_colorbar(title = legend_title,
title.position = legend_title_pos,
title.theme = element_text(angle = legend_title_angle,
hjust = .5, vjust = .5,
size = legend_title_size),
frame.colour = "black", frame.linewidth = 1.5,
ticks.colour = NA,
barheight = unit(legend_height, "mm"),
barwidth  = unit(legend_width, "mm")))
if(!is.null(coeffs_color)) { g <- g + geom_text(aes(label = round(value, 2)), color = coeffs_color, size = coeffs_size) }
# Add title, subtitle and caption
if(!is.null(title)) { g <- g + ggtitle( label = title, subtitle = subtitle ) }
if(!is.null(caption)) { g <- g + labs(caption  = caption) }
# Format theme
g <- g + theme(plot.title = element_text(face = title_face, size = title_size, hjust = title_hjust),
plot.subtitle = element_text(face = subtitle_face, size = subtitle_size, hjust = title_hjust),
plot.caption = element_text(size = caption_size),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text  = element_text(size = axis_text_size, colour = axis_text_color),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
panel.border = element_rect(size = 1.1))
g
}
exprCorrPlot(df = df, plot_title = "title")
exprCorrPlot <- function(df,
genes              = NULL,
samples            = NULL,
corr_method        = "pearson",
plot_type          = "lower",
plot_diagonal      = T,
plot_size          = 85,
plot_border        = T,
plot_colors        = c("Gold3", "White", "Cornflowerblue"),
plot_title         = NULL,
plot_subtitle      = NULL,
plot_caption       = NULL,
cell_border        = "Black",
legend_pos         = "right",
legend_long        = plot_size,
legend_wide        = 8,
legend_limits      = c(-1,1),
legend_breaks_by   = 0.5,
legend_title       = paste(stringr::str_to_sentence(corr_method), "cprrelation", sep = " "),
legend_title_pos   = "right",
legend_title_angle = 270,
legend_title_size  = 10,
coeffs_color       = "Black",
coeffs_size        = 4,
title_hjust        = .5,
title_face         = "plain",
title_size         = 12,
subtitle_face      = "italic",
subtitle_size      = 11,
caption_size       = 6,
axis_text_size     = 8,
axis_text_color    = "black") {
df_filt <- df %>% na.omit()
if(!is.null(genes)) { df_filt <- df_filt %>% dplyr::filter(Geneid %in% genes) }
if(!is.null(samples)) { df_filt <- df_filt %>% dplyr::select(c("Geneid", samples)) }
corr <- df_filt %>% tibble::column_to_rownames("Geneid") %>% cor(method = corr_method)
if(plot_type == "full"){ corr <- corr }
else if(plot_type == "upper") { corr[lower.tri(corr, diag = !plot_diagonal)] <- NA }
else if(plot_type == "lower") { corr[upper.tri(corr, diag = !plot_diagonal)] <- NA }
corr.m <- reshape2::melt(corr)
g <- ggplot(corr.m, aes(Var1, Var2, fill = value)) + geom_tile(color = cell_border) #+ theme_pubr(legend = legend_pos)
# Force size of the heatmap
g <- g + ggh4x::force_panelsizes(rows = unit(plot_size, "mm"), cols = unit(plot_size, "mm")) +
scale_x_discrete(expand = c(0,0)) + scale_y_discrete(expand = c(0,0))
# Theme pubr
g <- g + theme_pubr(border = plot_border, legend = legend_pos)
# Setup the legend
if(legend_pos %in% c("right", "left")) { legend_height <- legend_long; legend_width <- legend_wide }
else if(legend_pos %in% c("top", "bottom")) { legend_height <- legend_wide; legend_width <- legend_long }
g <- g + scale_fill_gradient2(limits = legend_limits, midpoint = median(legend_limits),
breaks = seq(legend_limits[1],legend_limits[2],legend_breaks_by), na.value = NA,
oob = scales::squish, ## to put out of bound values into scale
low = plot_colors[1], high = plot_colors[3], mid = plot_colors[2],
guide = guide_colorbar(title = legend_title,
title.position = legend_title_pos,
title.theme = element_text(angle = legend_title_angle,
hjust = .5, vjust = .5,
size = legend_title_size),
frame.colour = "black", frame.linewidth = 1.5,
ticks.colour = NA,
barheight = unit(legend_height, "mm"),
barwidth  = unit(legend_width, "mm")))
if(!is.null(coeffs_color)) { g <- g + geom_text(aes(label = round(value, 2)), color = coeffs_color, size = coeffs_size) }
# Add title, subtitle and caption
if(!is.null(title)) { g <- g + ggtitle( label = plot_title, subtitle = plot_subtitle ) }
if(!is.null(caption)) { g <- g + labs( caption  = plot_caption) }
# Format theme
g <- g + theme(plot.title = element_text(face = title_face, size = title_size, hjust = title_hjust),
plot.subtitle = element_text(face = subtitle_face, size = subtitle_size, hjust = title_hjust),
plot.caption = element_text(size = caption_size),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text  = element_text(size = axis_text_size, colour = axis_text_color),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
panel.border = element_rect(size = 1.1))
return(g)
}
exprCorrPlot(df = df, plot_title = "title")
exprCorrPlot <- function(df,
genes              = NULL,
samples            = NULL,
corr_method        = "pearson",
plot_type          = "lower",
plot_diagonal      = T,
plot_size          = 85,
plot_border        = T,
plot_colors        = c("Gold3", "White", "Cornflowerblue"),
plot_title         = NULL,
plot_subtitle      = NULL,
plot_caption       = NULL,
cell_border        = "Black",
legend_pos         = "right",
legend_long        = plot_size,
legend_wide        = 8,
legend_limits      = c(-1,1),
legend_breaks_by   = 0.5,
legend_title       = paste(stringr::str_to_sentence(corr_method), "cprrelation", sep = " "),
legend_title_pos   = "right",
legend_title_angle = 270,
legend_title_size  = 10,
coeffs_color       = "Black",
coeffs_size        = 4,
title_hjust        = .5,
title_face         = "plain",
title_size         = 12,
subtitle_face      = "italic",
subtitle_size      = 11,
caption_size       = 6,
axis_text_size     = 8,
axis_text_color    = "black") {
df_filt <- df %>% na.omit()
if(!is.null(genes)) { df_filt <- df_filt %>% dplyr::filter(Geneid %in% genes) }
if(!is.null(samples)) { df_filt <- df_filt %>% dplyr::select(c("Geneid", samples)) }
corr <- df_filt %>% tibble::column_to_rownames("Geneid") %>% cor(method = corr_method)
if(plot_type == "full"){ corr <- corr }
else if(plot_type == "upper") { corr[lower.tri(corr, diag = !plot_diagonal)] <- NA }
else if(plot_type == "lower") { corr[upper.tri(corr, diag = !plot_diagonal)] <- NA }
corr.m <- reshape2::melt(corr)
g <- ggplot(corr.m, aes(Var1, Var2, fill = value)) + geom_tile(color = cell_border) #+ theme_pubr(legend = legend_pos)
# Force size of the heatmap
g <- g + ggh4x::force_panelsizes(rows = unit(plot_size, "mm"), cols = unit(plot_size, "mm")) +
scale_x_discrete(expand = c(0,0)) + scale_y_discrete(expand = c(0,0))
# Theme pubr
g <- g + theme_pubr(border = plot_border, legend = legend_pos)
# Setup the legend
if(legend_pos %in% c("right", "left")) { legend_height <- legend_long; legend_width <- legend_wide }
else if(legend_pos %in% c("top", "bottom")) { legend_height <- legend_wide; legend_width <- legend_long }
g <- g + scale_fill_gradient2(limits = legend_limits, midpoint = median(legend_limits),
breaks = seq(legend_limits[1],legend_limits[2],legend_breaks_by), na.value = NA,
oob = scales::squish, ## to put out of bound values into scale
low = plot_colors[1], high = plot_colors[3], mid = plot_colors[2],
guide = guide_colorbar(title = legend_title,
title.position = legend_title_pos,
title.theme = element_text(angle = legend_title_angle,
hjust = .5, vjust = .5,
size = legend_title_size),
frame.colour = "black", frame.linewidth = 1.5,
ticks.colour = NA,
barheight = unit(legend_height, "mm"),
barwidth  = unit(legend_width, "mm")))
if(!is.null(coeffs_color)) { g <- g + geom_text(aes(label = round(value, 2)), color = coeffs_color, size = coeffs_size) }
# Add title, subtitle and caption
if(!is.null(plot_title)) { g <- g + ggtitle( label = plot_title, subtitle = plot_subtitle ) }
if(!is.null(plot_caption)) { g <- g + labs( caption  = plot_caption) }
# Format theme
g <- g + theme(plot.title = element_text(face = title_face, size = title_size, hjust = title_hjust),
plot.subtitle = element_text(face = subtitle_face, size = subtitle_size, hjust = title_hjust),
plot.caption = element_text(size = caption_size),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text  = element_text(size = axis_text_size, colour = axis_text_color),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
panel.border = element_rect(size = 1.1))
return(g)
}
exprCorrPlot(df = df, plot_title = "title")
df_filt <- df %>% drop_na()
df_filt
df
exprCorrPlot <- function(df,
genes              = NULL,
samples            = NULL,
corr_method        = "pearson",
plot_type          = "lower",
plot_diagonal      = T,
plot_size          = 85,
plot_border        = T,
plot_colors        = c("Gold3", "White", "Cornflowerblue"),
plot_title         = NULL,
plot_subtitle      = NULL,
plot_caption       = NULL,
cell_border        = "Black",
legend_pos         = "right",
legend_long        = plot_size,
legend_wide        = 8,
legend_limits      = c(-1,1),
legend_breaks_by   = 0.5,
legend_title       = paste(stringr::str_to_sentence(corr_method), "cprrelation", sep = " "),
legend_title_pos   = "right",
legend_title_angle = 270,
legend_title_size  = 10,
coeffs_color       = "Black",
coeffs_size        = 4,
title_hjust        = .5,
title_face         = "plain",
title_size         = 12,
subtitle_face      = "italic",
subtitle_size      = 11,
caption_size       = 6,
axis_text_size     = 8,
axis_text_color    = "black") {
df_filt <- df %>% na.omit()
if(!is.null(genes)) { df_filt <- df_filt %>% dplyr::filter(Geneid %in% genes) }
if(!is.null(samples)) { df_filt <- df_filt %>% dplyr::select(c("Geneid", samples)) }
corr <- df_filt %>% tibble::column_to_rownames("Geneid") %>% cor(method = corr_method)
if(plot_type == "full"){ corr <- corr }
else if(plot_type == "upper") { corr[lower.tri(corr, diag = !plot_diagonal)] <- NA }
else if(plot_type == "lower") { corr[upper.tri(corr, diag = !plot_diagonal)] <- NA }
corr.m <- reshape2::melt(corr)
g <- ggplot(corr.m, aes(Var1, Var2, fill = value)) + geom_tile(color = cell_border, na.rm = T) #+ theme_pubr(legend = legend_pos)
# Force size of the heatmap
g <- g + ggh4x::force_panelsizes(rows = unit(plot_size, "mm"), cols = unit(plot_size, "mm")) +
scale_x_discrete(expand = c(0,0)) + scale_y_discrete(expand = c(0,0))
# Theme pubr
g <- g + theme_pubr(border = plot_border, legend = legend_pos)
# Setup the legend
if(legend_pos %in% c("right", "left")) { legend_height <- legend_long; legend_width <- legend_wide }
else if(legend_pos %in% c("top", "bottom")) { legend_height <- legend_wide; legend_width <- legend_long }
g <- g + scale_fill_gradient2(limits = legend_limits, midpoint = median(legend_limits),
breaks = seq(legend_limits[1],legend_limits[2],legend_breaks_by), na.value = NA,
oob = scales::squish, ## to put out of bound values into scale
low = plot_colors[1], high = plot_colors[3], mid = plot_colors[2],
guide = guide_colorbar(title = legend_title,
title.position = legend_title_pos,
title.theme = element_text(angle = legend_title_angle,
hjust = .5, vjust = .5,
size = legend_title_size),
frame.colour = "black", frame.linewidth = 1.5,
ticks.colour = NA,
barheight = unit(legend_height, "mm"),
barwidth  = unit(legend_width, "mm")))
if(!is.null(coeffs_color)) { g <- g + geom_text(aes(label = round(value, 2)), color = coeffs_color, size = coeffs_size, na.rm = T) }
# Add title, subtitle and caption
if(!is.null(plot_title)) { g <- g + ggtitle( label = plot_title, subtitle = plot_subtitle ) }
if(!is.null(plot_caption)) { g <- g + labs( caption  = plot_caption) }
# Format theme
g <- g + theme(plot.title = element_text(face = title_face, size = title_size, hjust = title_hjust),
plot.subtitle = element_text(face = subtitle_face, size = subtitle_size, hjust = title_hjust),
plot.caption = element_text(size = caption_size),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text  = element_text(size = axis_text_size, colour = axis_text_color),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
panel.border = element_rect(size = 1.1))
return(g)
}
exprCorrPlot(df = df, plot_title = "title")
exprCorrPlot(df = df, plot_title = "title", plot_subtitle = "subtitle", corr_method = "spearman", plot_diagonal = F, legend_limits = c(0,1), legend_breaks_by = 0.1)
exprCorrPlot(df = df, plot_title = "title", plot_subtitle = "subtitle", corr_method = "spearman", plot_diagonal = T, legend_limits = c(0,1), legend_breaks_by = 0.1)
exprCorrPlot(df = df, plot_title = "title", plot_subtitle = "subtitle", corr_method = "spearman", plot_diagonal = T, legend_limits = c(0,1), legend_breaks_by = 0.1,
plot_colors = c("darkblue", "white", "darkred"))
exprCorrPlot(df = df, plot_title = "title", plot_subtitle = "subtitle", corr_method = "spearman", plot_diagonal = T, legend_limits = c(0.5,1), legend_breaks_by = 0.1,
plot_colors = c("darkblue", "white", "darkred"))
exprCorrPlot(df = df, plot_title = "title", plot_subtitle = "subtitle", corr_method = "spearman", plot_diagonal = T, legend_limits = c(0.5,1), legend_breaks_by = 0.1,
plot_colors = c("darkblue", "white", "darkred"), cell_border = "white", plot_size = 10)
exprCorrPlot(df = df, plot_title = "title", plot_subtitle = "subtitle", corr_method = "spearman", plot_diagonal = T, legend_limits = c(0.5,1), legend_breaks_by = 0.1,
plot_colors = c("darkblue", "white", "darkred"), cell_border = "white", plot_size = 50)
exprCorrPlot(df = df, plot_title = "title", plot_subtitle = "subtitle", corr_method = "spearman", plot_diagonal = T, legend_limits = c(0.5,1), legend_breaks_by = 0.1,
plot_colors = c("darkblue", "white", "darkred"), cell_border = "white", plot_size = 50, plot_border = F, legend_pos = "bottom", legend_title_pos = "bottom", legend_title_angle = 0)
exprCorrPlot(df = df, plot_title = "title", plot_subtitle = "subtitle", corr_method = "spearman", plot_diagonal = T, legend_limits = c(0.5,1), legend_breaks_by = 0.1,
plot_colors = c("darkblue", "white", "darkred"), cell_border = "white", plot_size = 50, plot_border = T, legend_pos = "bottom", legend_title_pos = "bottom", legend_title_angle = 0)
exprCorrPlot(df = df, plot_title = "title", plot_subtitle = "subtitle", corr_method = "spearman", plot_diagonal = T, legend_limits = c(0.5,1), legend_breaks_by = 0.1,
plot_colors = c("darkblue", "white", "darkred"), cell_border = "white", plot_size = 50, plot_border = T, legend_pos = "bottom", legend_title_pos = "bottom", legend_title_angle = 0,
plot_caption = "caption", legend_wide = 3)
exprCorrPlot(df = df, plot_title = "title", plot_subtitle = "subtitle", corr_method = "spearman", plot_diagonal = T, legend_limits = c(0.5,1), legend_breaks_by = 0.1,
plot_colors = c("darkblue", "white", "darkred"), cell_border = "white", plot_size = 50, plot_border = T, legend_pos = "bottom", legend_title_pos = "bottom", legend_title_angle = 0,
plot_caption = "caption", legend_wide = 3, axis_text_color = "red")
exprCorrPlot(df = df, plot_title = "title", plot_subtitle = "subtitle", corr_method = "spearman", plot_diagonal = T, legend_limits = c(0.5,1), legend_breaks_by = 0.1,
plot_colors = c("darkblue", "white", "darkred"), cell_border = "black", plot_size = 50, plot_border = T, legend_pos = "bottom", legend_title_pos = "bottom", legend_title_angle = 0,
plot_caption = "caption", legend_wide = 3, axis_text_color = "red")
exprCorrPlot(df = df, plot_title = "title", plot_subtitle = "subtitle", corr_method = "spearman", plot_diagonal = T, legend_limits = c(0.5,1), legend_breaks_by = 0.1,
plot_colors = c("darkblue", "white", "darkred"), cell_border = NA, plot_size = 50, plot_border = T, legend_pos = "bottom", legend_title_pos = "bottom", legend_title_angle = 0,
plot_caption = "caption", legend_wide = 3, axis_text_color = "red")
devtools::document()
devtools::document()
devtools::document()
pkgdown::build_home()
devtools::install_github("amitjavilaventura/plotmics")
