"Regions3" = "../testdata/mm10.regions3.tsv")
regions_list[[1]] %>% read.delim(header = F) %>% head()
chromRegions(chrom_sizes = "../testdata/mm10.chrom.sizes", regions_list = regions_list)
# Read the data
chrom_sizes = "../testdata/mm10.chrom.sizes"%>% read.delim(header = F)
regions = regions_list %>% purrr::map(~read.delim(.x, header = F))
chromRegions(chrom_sizes = chrom_sizes, regions_list = regions)
chromRegions(chrom_sizes  = "../testdata/mm10.chrom.sizes",
regions_list = regions_list,
chr_order    = c(1,3,4,2,5,6,7,9,8,19,11,10,12,13,15,14,16,17,18,"X","Y","M", "MT") )
chromRegions(chrom_sizes  = "../testdata/mm10.chrom.sizes",
regions_list = regions_list,
chr_exclude  = c("\\."))
chromRegions(chrom_sizes  = "../testdata/mm10.chrom.sizes",
regions_list = regions_list,
chr_exclude  = c(" "))
chromRegions(chrom_sizes  = "../testdata/mm10.chrom.sizes",
regions_list = regions_list,
coord_flip   = T)
chromRegions(chrom_sizes  = "../testdata/mm10.chrom.sizes",
regions_list = regions_list,
draw_points  = F)
chromRegions(chrom_sizes  = "../testdata/mm10.chrom.sizes",
regions_list = regions_list,
colors       = c("Black", "Yellow", "Green"))
chromRegions(chrom_sizes   = "../testdata/mm10.chrom.sizes",
regions_list  = regions_list,
colors        = c("Darkgreen", "Darkred"),
color_by      = "strand")
# Read and format regions file to have strand as "."
regions_no_strand <- list("Regions1" = read.delim("../testdata/mm10.regions.tsv", header = F) %>% dplyr::mutate(V6 = "."))
# Draw the plot
chromRegions(chrom_sizes   = "../testdata/mm10.chrom.sizes",
regions_list  = regions_no_strand,
color_by      = "strand",
colors        = c("Gold3", "Darkgreen"))
chromRegions(chrom_sizes   = "../testdata/mm10.chrom.sizes",
regions_list  = regions_list,
title         = "This is a title",
subtitle      = "This is a subtitle")
chromRegions(chrom_sizes   = "../testdata/mm10.chrom.sizes",
regions_list  = regions_list,
xlab          = NULL,
ylab          = "Position in the chromosome")
chromRegions(chrom_sizes   = "../testdata/mm10.chrom.sizes",
regions_list  = regions_list,
caption       = "This is a caption")
chromRegions(chrom_sizes   = "../testdata/mm10.chrom.sizes",
regions_list  = regions_list,
caption       = TRUE)
chromRegions(chrom_sizes   = "../testdata/mm10.chrom.sizes",
regions_list  = regions_list,
legend        = "right")
chromRegions(chrom_sizes   = "../testdata/mm10.chrom.sizes",
regions_list  = regions_list,
legend        = "none")
chromRegions(chrom_sizes   = "../testdata/mm10.chrom.sizes",
regions_list  = regions_list,
size_y_text   = 10)
chromRegions(chrom_sizes   = "../testdata/mm10.chrom.sizes",
regions_list  = regions_list,
y_text_size   =  10)
pkgdown::build_site()
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4,
warning = FALSE, error = FALSE, message = FALSE)
devtools::load_all("..")
library(dplyr)
library(purrr)
peak_list <- list.files("../testdata", "regions", full.names = T, recursive = T) %>%
purrr::discard(~stringr::str_detect(string = .x, pattern = "tsv")) %>%
purrr::set_names(c("PeakX", "PeakY"))
# Example input.
regionsX_path = "../testdata/regionsX.bed"
regionsY_path = "../testdata/regionsY.bed"
regionsX = read.delim(regionsX_path, header = F)
regionsY = read.delim(regionsY_path, header = F)
head(regionsX)
suppressWarnings(require(dplyr, quietly = T, warn.conflicts = F))
suppressWarnings(require(bedtoolsr, quietly = T, warn.conflicts = F))
suppressWarnings(require(magrittr, quietly = T, warn.conflicts = F))
suppressWarnings(require(ggplot2, quietly = T, warn.conflicts = F))
suppressWarnings(require(ggvenn, quietly = T, warn.conflicts = F))
suppressWarnings(require(colorspace, quietly = T, warn.conflicts = F))
a = regionsX_path
b = regionsY_path
stranded = T
setnames = c("A", "B")
color    = c("blue", "gold3")
namesize = 7
labsize  = 5
# Count total number of regions in A and B
aa <- read.delim(a, header = F) %>% nrow()
# Example input.
regionsX_path = "testdata/regionsX.bed"
regionsY_path = "testdata/regionsY.bed"
b = regionsY_path
a = regionsX_path
# Count total number of regions in A and B
aa <- read.delim(a, header = F) %>% nrow()
bb <- read.delim(b, header = F) %>% nrow()
aa
bb
bedtoolsr::bt.intersect(a = a, b = b, s = stranded, u = T)
# Count the regions of A overlapping with B, and vicecersa
ab <- bedtoolsr::bt.intersect(a = a, b = b, s = stranded, u = T) %>% nrow()
ba <- bedtoolsr::bt.intersect(a = b, b = a, s = stranded, u = T) %>% nrow()
stranded
# Count the regions of A overlapping with B, and vicecersa
ab <- bedtoolsr::bt.intersect(a = a, b = b, s = stranded, u = T) %>% nrow()
ba <- bedtoolsr::bt.intersect(a = b, b = a, s = stranded, u = T) %>% nrow()
ba
ab
stranded = F
stranded
# Count the regions of A overlapping with B, and vicecersa
ab <- bedtoolsr::bt.intersect(a = a, b = b, s = stranded, u = T) %>% nrow()
ab
ba <- bedtoolsr::bt.intersect(a = b, b = a, s = stranded, u = T) %>% nrow()
ba
suppressWarnings(require(dplyr, quietly = T, warn.conflicts = F))
suppressWarnings(require(bedtoolsr, quietly = T, warn.conflicts = F))
suppressWarnings(require(magrittr, quietly = T, warn.conflicts = F))
suppressWarnings(require(ggplot2, quietly = T, warn.conflicts = F))
suppressWarnings(require(ggvenn, quietly = T, warn.conflicts = F))
suppressWarnings(require(colorspace, quietly = T, warn.conflicts = F))
a = "/home/amitjavila/shares/BDvavouri/amitjavila/bio/genomes/GRCm39/rmsk/Mus_musculus.GRCm39.repeatMasker.IAP.bed"
b = a
a = "/home/amitjavila/shares/BDvavouri/amitjavila/projects/pic_var/output/0other/pirna_clusters/yuetal_clusters/yuetal_clusters.direc.mm39.bed"
bedtoolsr::bt.intersect(a = a, b = b, s = F, u = T) %>% nrow()
bedtoolsr::bt.intersect(a = a, b = b, s = T, u = T) %>% nrow()
bedtoolsr::bt.intersect(a = b, b = a, s = F, u = T) %>% nrow()
bedtoolsr::bt.intersect(a = b, b = a, s = T, u = T) %>% nrow()
bedtoolsr::bt.intersect(a = a, b = b, s = T) %>% nrow()
bedtoolsr::bt.intersect(a = a, b = b, s = T, wa = T) %>% nrow()
bedtoolsr::bt.intersect(a = a, b = b, s = T, wa = T)
bedtoolsr::bt.intersect(a = a, b = b, s = T, wa = T) %>% distinct() %>% nrow()
bedtoolsr::bt.intersect(a = b, b = a, s = T, wa = T) %>% nrow()
bedtoolsr::bt.intersect(a = b, b = a, s = F, wa = T) %>% nrow()
"/home/amitjavila/shares/BDvavouri/amitjavila/bio/genomes/GRCm39/gene/Mus_musculus.GRCm39.104.coding.genes.bed"
a = "/home/amitjavila/shares/BDvavouri/amitjavila/bio/genomes/GRCm39/gene/Mus_musculus.GRCm39.104.coding.genes.bed"
b
read.delim(a, header = F)
# Count total number of regions in A and B
aa <- read.delim(a, header = F) %>% nrow()
bb <- read.delim(b, header = F) %>% nrow()
aa
bb
bedtoolsr::bt.intersect(a = a, b = b, s = T, wa = T) %>% distinct() %>% nrow()
bedtoolsr::bt.intersect(a = a, b = b, s = F, wa = T) %>% distinct() %>% nrow()
bedtoolsr::bt.intersect(a = a, b = b, s = F) %>% distinct() %>% nrow()
bedtoolsr::bt.intersect(a = a, b = b, s = T) %>% distinct() %>% nrow()
b = "/home/amitjavila/shares/BDvavouri/amitjavila/bio/genomes/GRCm39/gene/Mus_musculus.GRCm39.104.coding.3UTR.bed"
bedtoolsr::bt.intersect(a = a, b = b, s = T, u = T) %>% nrow()
bedtoolsr::bt.intersect(a = a, b = b, s = F, u = T) %>% nrow()
bedtoolsr::bt.intersect(a = b, b = a, s = T, u = T) %>% nrow()
bedtoolsr::bt.intersect(a = b, b = a, s = T, u = F) %>% nrow()
a <- read.delim(a, header = F)
ls
a
b <- dplyr::slice_sample(a, prop = .60, replace = F)
a <- dplyr::slice_sample(a, prop = .60, replace = F)
a
b
b <- b %>% dplyr::arrange(V1, V2)
a <- a %>% dplyr::arrange(V1, V2)
# Check that inputs are OK
tmpfile_a <- "a.tmp.bed"
tmpfile_b <- "b.tmp.bed"
if(!is.character(a)) {
if(is.data.frame(a)) {  write.table(a, tmpfile_a, quote = F, col.names = F, row.names = F, sep = "\t") }
else { stop("'a' must be a path to a BED file or a data frame") }
a <- tmpfile_a
}
if(!is.character(b)) {
if(is.data.frame(b)) { write.table(b, tmpfile_b, quote = F, col.names = F, row.names = F, sep = "\t") }
else { stop("'b' must be a path to a BED file or a data frame") }
b <- tmpfile_b
}
# Count total number of regions in A and B
aa <- read.delim(a, header = F) %>% nrow()
bb <- read.delim(b, header = F) %>% nrow()
aa
bb
stranded
bedtoolsr::bt.intersect(a = a, b = b, s = T, u = T) %>% nrow()
bedtoolsr::bt.intersect(a = a, b = b, s = F, u = T) %>% nrow()
bedtoolsr::bt.intersect(a = b, b = a, s = T, u = F)
bedtoolsr::bt.intersect(a = b, b = a, s = T, u = F) %>% nrow()
bedtoolsr::bt.intersect(a = b, b = a, s = F, u = F) %>% nrow()
bedtoolsr::bt.intersect(a = a, b = b, s = T, u = F) %>% nrow()
bedtoolsr::bt.intersect(a = a, b = b, s = stranded, u = T) %>% nrow()
bedtoolsr::bt.intersect(a = a, b = b, s = T, u = T) %>% nrow()
bedtoolsr::bt.intersect(a = a, b = b, s = F, u = T) %>% nrow()
bedtoolsr::bt.intersect(a = a, b = b, S = T, u = T) %>% nrow()
packageVersion("bedtoolsr")
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", fig.width = 4, fig.height = 4,
warning = FALSE, error = FALSE, message = FALSE)
devtools::load_all("..")
library(dplyr)
library(purrr)
peak_list <- list.files("../testdata", "regions", full.names = T, recursive = T) %>%
purrr::discard(~stringr::str_detect(string = .x, pattern = "tsv")) %>%
purrr::set_names(c("PeakX", "PeakY"))
ggVennBed(a = regionsX_path,  b = regionsY_path)
# Example input.
regionsX_path = "../testdata/regionsX.bed"
regionsY_path = "../testdata/regionsY.bed"
regionsX = read.delim(regionsX_path, header = F)
regionsY = read.delim(regionsY_path, header = F)
head(regionsX)
ggVennBed(a = regionsX_path,  b = regionsY_path)
ggVennBed(a = regionsX,  b = regionsY, stranded = F)
ggVennBed(a = regionsX,  b = regionsY, stranded = NULL)
detach("package:bedtoolsr", unload = TRUE)
library(bedtoolsr)
ggVennBed(a = regionsX,  b = regionsY, stranded = FALSE)
ggVennBed(a = regionsX,  b = regionsY, stranded = TRUE) + ggtitle("Intersection with the same strandednes")
ggVennBed(a = regionsX,  b = regionsY, stranded = FALSE) + ggtitle("Intersection regardless the strand")
ggVennBed(a = regionsX,  b = regionsY, stranded = TRUE) + ggtitle("Intersection with the same strandednes") +
ggVennBed(a = regionsX,  b = regionsY, stranded = FALSE) + ggtitle("Intersection regardless the strand")
library(patchwork)
ggVennBed(a = regionsX,  b = regionsY, stranded = TRUE) + ggtitle("Intersection with the same strandednes") +
ggVennBed(a = regionsX,  b = regionsY, stranded = FALSE) + ggtitle("Intersection regardless the strand")
ggVennBed(a = regionsX,  b = regionsY, color = c("red", "green"))
ggVennBed <- function(a,
b,
setnames = c("A", "B"),
stranded = T,
color    = c("blue", "gold3"),
namesize = 7,
labsize  = 5){
# Load required packages
suppressWarnings(require(dplyr, quietly = T, warn.conflicts = F))
suppressWarnings(require(bedtoolsr, quietly = T, warn.conflicts = F))
suppressWarnings(require(magrittr, quietly = T, warn.conflicts = F))
suppressWarnings(require(ggplot2, quietly = T, warn.conflicts = F))
suppressWarnings(require(ggvenn, quietly = T, warn.conflicts = F))
suppressWarnings(require(colorspace, quietly = T, warn.conflicts = F))
# Check that inputs are OK
tmpfile_a <- "a.tmp.bed"
tmpfile_b <- "b.tmp.bed"
if(!is.character(a)) {
if(is.data.frame(a)) {  write.table(a, tmpfile_a, quote = F, col.names = F, row.names = F, sep = "\t") }
else { stop("'a' must be a path to a BED file or a data frame") }
a <- tmpfile_a
}
if(!is.character(b)) {
if(is.data.frame(b)) { write.table(b, tmpfile_b, quote = F, col.names = F, row.names = F, sep = "\t") }
else { stop("'b' must be a path to a BED file or a data frame") }
b <- tmpfile_b
}
# Count total number of regions in A and B
aa <- read.delim(a, header = F) %>% nrow()
bb <- read.delim(b, header = F) %>% nrow()
# Count the regions of A overlapping with B, and vicecersa
ab <- bedtoolsr::bt.intersect(a = a, b = b, s = stranded, u = T) %>% nrow()
ba <- bedtoolsr::bt.intersect(a = b, b = a, s = stranded, u = T) %>% nrow()
# Count the unique peaks in A and B
aa <- aa-ab
bb <- bb-ba
# Create a pseudo data for the backbone of the Venn diagram
data <- list(rep("A",2), rep("B",2)) %>% magrittr::set_names(setnames)
# Draw the Venn diagram
venn <- ggvenn::ggvenn(data, show_percentage = F, fill_color = color, fill_alpha = 0.5, stroke_color = "black")
# Remove labels from Venn diagram
venn$layers[[4]] <- NULL
# Annotate the unique peaks and overlaps in the Venn diagram
venn <- venn +
scale_x_discrete(expand = c(0,0.5)) +
scale_y_discrete(expand = c(0,0.5)) +
annotate("text", -.8, 0, label = as.character(aa), color = colorspace::darken(color[1], amount = 0.5), fontface = "bold", size = labsize) +
annotate("text", .8, 0, label = as.character(bb),  color = colorspace::darken(color[2], amount = 0.5), fontface = "bold", size = labsize) +
annotate("text", 0, 0.15, label = as.character(ab), color = colorspace::darken(color[1], amount = 0.5), fontface = "plain", size = labsize) +
annotate("text", 0, -0.15, label = as.character(ba), color = colorspace::darken(color[2], amount = 0.5), fontface = "plain", size = labsize)
# Remove temporary files
if(file.exists(tmpfile_a)) { file.remove(tmpfile_a) }
if(file.exists(tmpfile_b)) { file.remove(tmpfile_b) }
# Return the Venn diagram
return(venn)
}
ggVennBed(a = regionsX,  b = regionsY, color = c("red", "green"))
ggVennBed <- function(a,
b,
setnames = c("A", "B"),
stranded = T,
color    = c("blue", "gold3"),
alpha    = 0.5,
namesize = 7,
labsize  = 5,
title    = NULL,
subtitle = NULL,
title_size = 12,
subtitle_size = 11,
title_face = "plain",
subtitle_face = "italic"
){
# Load required packages
suppressWarnings(require(dplyr, quietly = T, warn.conflicts = F))
suppressWarnings(require(bedtoolsr, quietly = T, warn.conflicts = F))
suppressWarnings(require(magrittr, quietly = T, warn.conflicts = F))
suppressWarnings(require(ggplot2, quietly = T, warn.conflicts = F))
suppressWarnings(require(ggvenn, quietly = T, warn.conflicts = F))
suppressWarnings(require(colorspace, quietly = T, warn.conflicts = F))
# Check that inputs are OK
tmpfile_a <- "a.tmp.bed"
tmpfile_b <- "b.tmp.bed"
if(!is.character(a)) {
if(is.data.frame(a)) {  write.table(a, tmpfile_a, quote = F, col.names = F, row.names = F, sep = "\t") }
else { stop("'a' must be a path to a BED file or a data frame") }
a <- tmpfile_a
}
if(!is.character(b)) {
if(is.data.frame(b)) { write.table(b, tmpfile_b, quote = F, col.names = F, row.names = F, sep = "\t") }
else { stop("'b' must be a path to a BED file or a data frame") }
b <- tmpfile_b
}
# Count total number of regions in A and B
aa <- read.delim(a, header = F) %>% nrow()
bb <- read.delim(b, header = F) %>% nrow()
# Count the regions of A overlapping with B, and vicecersa
ab <- bedtoolsr::bt.intersect(a = a, b = b, s = stranded, u = T) %>% nrow()
ba <- bedtoolsr::bt.intersect(a = b, b = a, s = stranded, u = T) %>% nrow()
# Count the unique peaks in A and B
aa <- aa-ab
bb <- bb-ba
# Create a pseudo data for the backbone of the Venn diagram
data <- list(rep("A",2), rep("B",2)) %>% magrittr::set_names(setnames)
# Draw the Venn diagram
venn <- ggvenn::ggvenn(data, show_percentage = F, fill_color = color, fill_alpha = 0.5, stroke_color = "black")
# Remove labels from Venn diagram
venn$layers[[4]] <- NULL
# Annotate the unique peaks and overlaps in the Venn diagram
venn <- venn +
scale_x_discrete(expand = c(0,0.5)) +
scale_y_discrete(expand = c(0,0.5)) +
annotate("text", -.8, 0, label = as.character(aa), color = colorspace::darken(color[1], amount = 0.5), fontface = "bold", size = labsize) +
annotate("text", .8, 0, label = as.character(bb),  color = colorspace::darken(color[2], amount = 0.5), fontface = "bold", size = labsize) +
annotate("text", 0, 0.15, label = as.character(ab), color = colorspace::darken(color[1], amount = 0.5), fontface = "plain", size = labsize) +
annotate("text", 0, -0.15, label = as.character(ba), color = colorspace::darken(color[2], amount = 0.5), fontface = "plain", size = labsize)
# Add title and subtitle
venn <- venn +
labs(title = title, subtitle = subtitle) +
theme(plot.title = element_text(hjust = .5, size = title_size, face = title_face),
plot.subtitle = element_text(hjust = .5, size = subtitle_size, face = subtitle_face))
# Remove temporary files
if(file.exists(tmpfile_a)) { file.remove(tmpfile_a) }
if(file.exists(tmpfile_b)) { file.remove(tmpfile_b) }
# Return the Venn diagram
return(venn)
}
ggVennBed(a = regionsX,  b = regionsY, color = c("red", "green"), alpha = 10)
ggVennBed(a = regionsX,  b = regionsY, color = c("red", "green"), alpha = 0.2)
ggVennBed <- function(a,
b,
setnames = c("A", "B"),
stranded = T,
color    = c("blue", "gold3"),
alpha    = 0.5,
namesize = 7,
labsize  = 5,
title    = NULL,
subtitle = NULL,
title_size = 12,
subtitle_size = 11,
title_face = "plain",
subtitle_face = "italic"
){
# Load required packages
suppressWarnings(require(dplyr, quietly = T, warn.conflicts = F))
suppressWarnings(require(bedtoolsr, quietly = T, warn.conflicts = F))
suppressWarnings(require(magrittr, quietly = T, warn.conflicts = F))
suppressWarnings(require(ggplot2, quietly = T, warn.conflicts = F))
suppressWarnings(require(ggvenn, quietly = T, warn.conflicts = F))
suppressWarnings(require(colorspace, quietly = T, warn.conflicts = F))
# Check that inputs are OK
tmpfile_a <- "a.tmp.bed"
tmpfile_b <- "b.tmp.bed"
if(!is.character(a)) {
if(is.data.frame(a)) {  write.table(a, tmpfile_a, quote = F, col.names = F, row.names = F, sep = "\t") }
else { stop("'a' must be a path to a BED file or a data frame") }
a <- tmpfile_a
}
if(!is.character(b)) {
if(is.data.frame(b)) { write.table(b, tmpfile_b, quote = F, col.names = F, row.names = F, sep = "\t") }
else { stop("'b' must be a path to a BED file or a data frame") }
b <- tmpfile_b
}
# Count total number of regions in A and B
aa <- read.delim(a, header = F) %>% nrow()
bb <- read.delim(b, header = F) %>% nrow()
# Count the regions of A overlapping with B, and vicecersa
ab <- bedtoolsr::bt.intersect(a = a, b = b, s = stranded, u = T) %>% nrow()
ba <- bedtoolsr::bt.intersect(a = b, b = a, s = stranded, u = T) %>% nrow()
# Count the unique peaks in A and B
aa <- aa-ab
bb <- bb-ba
# Create a pseudo data for the backbone of the Venn diagram
data <- list(rep("A",2), rep("B",2)) %>% magrittr::set_names(setnames)
# Draw the Venn diagram
venn <- ggvenn::ggvenn(data, show_percentage = F, fill_color = color, fill_alpha = alpha, stroke_color = "black")
# Remove labels from Venn diagram
venn$layers[[4]] <- NULL
# Annotate the unique peaks and overlaps in the Venn diagram
venn <- venn +
scale_x_discrete(expand = c(0,0.5)) +
scale_y_discrete(expand = c(0,0.5)) +
annotate("text", -.8, 0, label = as.character(aa), color = colorspace::darken(color[1], amount = 0.5), fontface = "bold", size = labsize) +
annotate("text", .8, 0, label = as.character(bb),  color = colorspace::darken(color[2], amount = 0.5), fontface = "bold", size = labsize) +
annotate("text", 0, 0.15, label = as.character(ab), color = colorspace::darken(color[1], amount = 0.5), fontface = "plain", size = labsize) +
annotate("text", 0, -0.15, label = as.character(ba), color = colorspace::darken(color[2], amount = 0.5), fontface = "plain", size = labsize)
# Add title and subtitle
venn <- venn +
labs(title = title, subtitle = subtitle) +
theme(plot.title = element_text(hjust = .5, size = title_size, face = title_face),
plot.subtitle = element_text(hjust = .5, size = subtitle_size, face = subtitle_face))
# Remove temporary files
if(file.exists(tmpfile_a)) { file.remove(tmpfile_a) }
if(file.exists(tmpfile_b)) { file.remove(tmpfile_b) }
# Return the Venn diagram
return(venn)
}
ggVennBed(a = regionsX,  b = regionsY, color = c("red", "green"), alpha = 0.2)
ggVennBed(a = regionsX,  b = regionsY, labsize = 10)
ggVennBed(a = regionsX,  b = regionsY, namesize = 10)
ggVennBed(a = regionsX,  b = regionsY, namesize = 20)
ggVennBed <- function(a,
b,
setnames = c("A", "B"),
stranded = T,
color    = c("blue", "gold3"),
alpha    = 0.5,
namesize = 7,
labsize  = 5,
title    = NULL,
subtitle = NULL,
title_size = 12,
subtitle_size = 11,
title_face = "plain",
subtitle_face = "italic"
){
# Load required packages
suppressWarnings(require(dplyr, quietly = T, warn.conflicts = F))
suppressWarnings(require(bedtoolsr, quietly = T, warn.conflicts = F))
suppressWarnings(require(magrittr, quietly = T, warn.conflicts = F))
suppressWarnings(require(ggplot2, quietly = T, warn.conflicts = F))
suppressWarnings(require(ggvenn, quietly = T, warn.conflicts = F))
suppressWarnings(require(colorspace, quietly = T, warn.conflicts = F))
# Check that inputs are OK
tmpfile_a <- "a.tmp.bed"
tmpfile_b <- "b.tmp.bed"
if(!is.character(a)) {
if(is.data.frame(a)) {  write.table(a, tmpfile_a, quote = F, col.names = F, row.names = F, sep = "\t") }
else { stop("'a' must be a path to a BED file or a data frame") }
a <- tmpfile_a
}
if(!is.character(b)) {
if(is.data.frame(b)) { write.table(b, tmpfile_b, quote = F, col.names = F, row.names = F, sep = "\t") }
else { stop("'b' must be a path to a BED file or a data frame") }
b <- tmpfile_b
}
# Count total number of regions in A and B
aa <- read.delim(a, header = F) %>% nrow()
bb <- read.delim(b, header = F) %>% nrow()
# Count the regions of A overlapping with B, and vicecersa
ab <- bedtoolsr::bt.intersect(a = a, b = b, s = stranded, u = T) %>% nrow()
ba <- bedtoolsr::bt.intersect(a = b, b = a, s = stranded, u = T) %>% nrow()
# Count the unique peaks in A and B
aa <- aa-ab
bb <- bb-ba
# Create a pseudo data for the backbone of the Venn diagram
data <- list(rep("A",2), rep("B",2)) %>% magrittr::set_names(setnames)
# Draw the Venn diagram
venn <- ggvenn::ggvenn(data, show_percentage = F, fill_color = color, fill_alpha = alpha, stroke_color = "black", set_name_size = namesize)
# Remove labels from Venn diagram
venn$layers[[4]] <- NULL
# Annotate the unique peaks and overlaps in the Venn diagram
venn <- venn +
scale_x_discrete(expand = c(0,0.5)) +
scale_y_discrete(expand = c(0,0.5)) +
annotate("text", -.8, 0, label = as.character(aa), color = colorspace::darken(color[1], amount = 0.5), fontface = "bold", size = labsize) +
annotate("text", .8, 0, label = as.character(bb),  color = colorspace::darken(color[2], amount = 0.5), fontface = "bold", size = labsize) +
annotate("text", 0, 0.15, label = as.character(ab), color = colorspace::darken(color[1], amount = 0.5), fontface = "plain", size = labsize) +
annotate("text", 0, -0.15, label = as.character(ba), color = colorspace::darken(color[2], amount = 0.5), fontface = "plain", size = labsize)
# Add title and subtitle
venn <- venn +
labs(title = title, subtitle = subtitle) +
theme(plot.title = element_text(hjust = .5, size = title_size, face = title_face),
plot.subtitle = element_text(hjust = .5, size = subtitle_size, face = subtitle_face))
# Remove temporary files
if(file.exists(tmpfile_a)) { file.remove(tmpfile_a) }
if(file.exists(tmpfile_b)) { file.remove(tmpfile_b) }
# Return the Venn diagram
return(venn)
}
ggVennBed(a = regionsX,  b = regionsY, namesize = 20)
ggVennBed(a = regionsX,  b = regionsY, setnames = c("RegionX", "RegionsY"))
ggVennBed(a = regionsX,  b = regionsY, setnames = c("RegionX", "RegionsY"))
ggVennBed(a = regionsX,  b = regionsY, namesize = 20)
ggVennBed(a = regionsX,  b = regionsY, setnames = c("RegionX", "RegionsY"), namesize = 20)
ggVennBed(a = regionsX,  b = regionsY, setnames = c("RegionX", "RegionsY"), namesize = 10)
ggVennBed(a = regionsX,  b = regionsY, setnames = c("RegionX", "RegionsY"))
ggVennBed(a = regionsX,  b = regionsY, setnames = c("RegionX", "RegionsY"), namesize = 10)
ggVennBed(a = regionsX,  b = regionsY, title = "This is a title", subtitle = "This is a subtitle", subtitle_size = 15, subtitle_face = "bold")
ggVennBed(a = regionsX,  b = regionsY, title = "This is a title", title_size = 15, title_face = "bold")
ggVennBed(a = regionsX,  b = regionsY, title = "This is a title", title_size = 15, title_face = "bold")
ggVennBed(a = regionsX,  b = regionsY, title = "This is a title", subtitle = "This is a subtitle", subtitle_size = 15, subtitle_face = "bold")
ggVennBed(a = regionsX,  b = regionsY, title = "This is a title", subtitle = "This is a subtitle"
, subtitle_size = 15, subtitle_face = "bold")
ggVennBed(a = regionsX,  b = regionsY, title = "This is a title", subtitle = "This is a subtitle", subtitle_size = 15, subtitle_face = "bold")
ggVennBed(a = regionsX,  b = regionsY, title = "This is a title", subtitle = "This is a subtitle")
devtools::document()
pkgdown::build_site()
