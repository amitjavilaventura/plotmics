dplyr::mutate(peak = paste("peak", 1:nrow(.), sep = "")) %>%
dplyr::select(peak, everything(), -rowSum)
x
for(row in 1:nrow(overlaps)){
counts <- overlaps[row, len+1]
m <- matrix(rep(overlaps[row, 1:len], counts), ncol = len, byrow = T)
matrix <- rbind(matrix, m)
}
matrix <- matrix(data = rep(0, len), ncol = len, byrow=T) %>% set_colnames(conds)
for(row in 1:nrow(overlaps)){
counts <- overlaps[row, len+1]
m <- matrix(rep(overlaps[row, 1:len], counts), ncol = len, byrow = T)
matrix <- rbind(matrix, m)
}
matrix
x <- matrix %>%
na.omit %>%
as.data.frame() %>%
dplyr::mutate(rowSum = rowSums(.)) %>%
dplyr::filter(rowSum != 0) %>%
dplyr::mutate(peak = paste("peak", 1:nrow(.), sep = "")) %>%
dplyr::select(peak, everything(), -rowSum)
matrix
x
nrow(x)
overlaps <- overlaps$vennCounts
matrix <- matrix(data = rep(0, len), ncol = len, byrow=T) %>% set_colnames(conds)
for(row in 1:nrow(overlaps)){
counts <- overlaps[row, len+1]
m <- matrix(rep(overlaps[row, 1:len], counts), ncol = len, byrow = T)
matrix <- rbind(matrix, m)
}
x <- matrix %>%
na.omit %>%
as.data.frame() %>%
dplyr::mutate(rowSum = rowSums(.)) %>%
dplyr::filter(rowSum != 0) %>%
dplyr::mutate(peak = paste("peak", 1:nrow(.), sep = "")) %>%
dplyr::select(peak, everything(), -rowSum)
nrow(x)
x$peak
x[which(x$PeakX==1 & x$PeakY==1),]
x[which(x$PeakX==1 & x$PeakY==1),] %>% nrow
# Get Venn Counts and the peaks in each set
x <- getVennCounts(peaks = peak_list, conds = peak_names)
nrow(x)
x$matrix %>% nrow()
# Set default colors in case the number of specified colors
#   does not match the number elements in 'peak_list'
if(length(in_fill) != length(peak_list)) {
if(length(peak_list) == 2){ in_fill <- c("blue", "gold3") }
else if(length(peak_list) == 3){ in_fill <- c("blue", "gold3", "pink") }
else if(length(peak_list) == 4){ in_fill <- c("blue", "gold3", "pink", "green") }
else if(length(peak_list) == 5){ in_fill <- c("blue", "gold3", "pink", "green", "orange") }
}
# Transform the matrix of thee peaks in each set in ordeer to plot the Venn
y <- x$matrix %>%
as_tibble() %>%
magrittr::set_colnames(c("Peak", paste("cond", 1:length(peak_list), sep = ""))) %>%
reshape2::melt() %>% mutate(value = if_else(value == 1, Peak, NULL)) %>%
tidyr::pivot_wider(names_from = "variable", values_from = "value") %>%
dplyr::select(-Peak) %>%
dplyr::as_tibble() %>%
as.list() %>%
purrr::set_names(peak_names)
nrow(y)
y
length(y)
x$matrix %>%
as_tibble()
x$matrix %>%
as_tibble() %>%
magrittr::set_colnames(c("Peak", paste("cond", 1:length(peak_list), sep = "")))
x$matrix %>%
as_tibble() %>%
magrittr::set_colnames(c("Peak", paste("cond", 1:length(peak_list), sep = ""))) %>%
reshape2::melt() %>% mutate(value = if_else(value == 1, Peak, NULL))
x$matrix %>%
as_tibble() %>%
magrittr::set_colnames(c("Peak", paste("cond", 1:length(peak_list), sep = ""))) %>%
reshape2::melt() %>% mutate(value = if_else(value == 1, Peak, NULL)) %>% nrow()
x$matrix %>%
as_tibble() %>%
magrittr::set_colnames(c("Peak", paste("cond", 1:length(peak_list), sep = ""))) %>%
reshape2::melt()
x$matrix %>%
as_tibble() %>%
magrittr::set_colnames(c("Peak", paste("cond", 1:length(peak_list), sep = ""))) %>%
reshape2::melt() %>% nrow()
x$matrix %>%
as_tibble() %>%
magrittr::set_colnames(c("Peak", paste("cond", 1:length(peak_list), sep = ""))) %>%
reshape2::melt() %>% mutate(value = if_else(value == 1, Peak, NULL))
x$matrix %>%
as_tibble() %>%
magrittr::set_colnames(c("Peak", paste("cond", 1:length(peak_list), sep = ""))) %>%
reshape2::melt() %>% mutate(value = if_else(value == 1, Peak, NULL)) %>%
tidyr::pivot_wider(names_from = "variable", values_from = "value")
x$matrix %>%
as_tibble() %>%
magrittr::set_colnames(c("Peak", paste("cond", 1:length(peak_list), sep = ""))) %>%
reshape2::melt() %>% mutate(value = if_else(value == 1, Peak, NULL)) %>%
tidyr::pivot_wider(names_from = "variable", values_from = "value") %>%
dplyr::select(-Peak)
x$matrix %>%
as_tibble() %>%
magrittr::set_colnames(c("Peak", paste("cond", 1:length(peak_list), sep = ""))) %>%
reshape2::melt() %>% mutate(value = if_else(value == 1, Peak, NULL)) %>%
tidyr::pivot_wider(names_from = "variable", values_from = "value") %>%
dplyr::select(-Peak) %>%
y <- x$matrix %>%
as_tibble() %>%
magrittr::set_colnames(c("Peak", paste("cond", 1:length(peak_list), sep = ""))) %>%
reshape2::melt() %>% mutate(value = if_else(value == 1, Peak, NULL)) %>%
tidyr::pivot_wider(names_from = "variable", values_from = "value") %>%
dplyr::select(-Peak)
y <- x$matrix %>%
as_tibble() %>%
magrittr::set_colnames(c("Peak", paste("cond", 1:length(peak_list), sep = ""))) %>%
reshape2::melt() %>% mutate(value = if_else(value == 1, Peak, NULL)) %>%
tidyr::pivot_wider(names_from = "variable", values_from = "value") %>%
dplyr::select(-Peak)
y[which(y$cond1==y$cond2)]
y[which(y$cond1==y$cond2),]
y[which(y$cond1==y$cond2),] %>% as.data.frame()
y <- x$matrix %>%
as_tibble() %>%
magrittr::set_colnames(c("Peak", paste("cond", 1:length(peak_list), sep = ""))) %>%
reshape2::melt() %>% mutate(value = if_else(value == 1, Peak, NULL)) %>%
tidyr::pivot_wider(names_from = "variable", values_from = "value") %>%
dplyr::select(-Peak) %>%
dplyr::as_tibble()
y[which(y$cond1==y$cond2),] %>% as.data.frame()
x$matrix %>%
as_tibble() %>%
magrittr::set_colnames(c("Peak", paste("cond", 1:length(peak_list), sep = ""))) %>%
reshape2::melt() %>% mutate(value = if_else(value == 1, Peak, NULL)) %>%
tidyr::pivot_wider(names_from = "variable", values_from = "value") %>%
dplyr::select(-Peak) %>%
dplyr::as_tibble() %>%
as.list()
x$matrix %>%
as_tibble() %>%
magrittr::set_colnames(c("Peak", paste("cond", 1:length(peak_list), sep = ""))) %>%
reshape2::melt() %>% mutate(value = if_else(value == 1, Peak, NULL)) %>%
tidyr::pivot_wider(names_from = "variable", values_from = "value") %>%
dplyr::select(-Peak) %>%
dplyr::as_tibble() %>%
as.list()
y <- x$matrix %>%
as_tibble() %>%
magrittr::set_colnames(c("Peak", paste("cond", 1:length(peak_list), sep = ""))) %>%
reshape2::melt() %>% mutate(value = if_else(value == 1, Peak, NULL)) %>%
tidyr::pivot_wider(names_from = "variable", values_from = "value") %>%
dplyr::select(-Peak) %>%
dplyr::as_tibble() %>%
as.list()
y$cond1
y$cond1 == y$cond2
y$cond1 == y$cond2 %>% sum()
(y$cond1 == y$cond2) %>% sum()
(y$cond1 == y$cond2)
(y$cond1 == y$cond2)[1000:1070]
(y$cond1 == y$cond2)[1000:1070] == TRUE
# Transform the matrix of thee peaks in each set in ordeer to plot the Venn
y <- x$matrix %>%
as_tibble() %>%
magrittr::set_colnames(c("Peak", paste("cond", 1:length(peak_list), sep = ""))) %>%
reshape2::melt() %>% mutate(value = if_else(value == 1, Peak, NULL)) %>%
tidyr::pivot_wider(names_from = "variable", values_from = "value") %>%
dplyr::select(-Peak) %>%
dplyr::as_tibble() %>%
as.list() %>%
purrr::set_names(peak_names) %>%
purrr::map(~na.omit(.x))
y
y$PeakX == y$PeakY
y$PeakX == y$PeakY %>% sum()
(y$PeakX == y$PeakY) %>% sum()
# Draw the Venn diagram with ggvenn
venn <- ggvenn::ggvenn(data = y, show_percentage = percent,
fill_color = in_fill, fill_alpha = alpha,
stroke_color =  out_color,
set_name_color = name_color, set_name_size = name_size,
text_color = text_color, text_size = label_size) +
scale_y_discrete(expand = c(0,0.5))
venn
devtools::document()
pkgbuild::build_site()
pkgdown::build_site()
knitr::opts_chunk$set(echo = TRUE, warning = F, error = F, message = F,
fig.align = "center", fig.width = 6, fig.height = 4)
devtools::load_all("..")
library(dplyr)
chromsizes_sets <- list("Regions1" = "../testdata/mm10.chrom.sizes",
"Regions2" = "../testdata/mm10.chrom.sizes",
"Regions3" = "../testdata/mm10.chrom.sizes")
regions_sets <- list("Regions1" = "../testdata/mm10.regions.tsv",
"Regions2" = "../testdata/mm10.regions2.tsv",
"Regions3" = "../testdata/mm10.regions3.tsv")
plotmics::circleRegions(chromsizes_sets = chromsizes_sets, regions_sets = regions_sets)
# load plotmics
library(plotmics)
chromsizes_sets <- list("Regions1" = "../testdata/mm10.chrom.sizes",
"Regions2" = "../testdata/mm10.chrom.sizes",
"Regions3" = "../testdata/mm10.chrom.sizes")
chromsizes_sets[[1]] %>% read.delim(header = F) %>% head()
regions_sets <- list("Regions1" = "../testdata/mm10.regions.tsv",
"Regions2" = "../testdata/mm10.regions2.tsv",
"Regions3" = "../testdata/mm10.regions3.tsv")
regions_sets[[1]] %>% read.delim(header = F) %>% head()
circleRegions(chromsizes_sets = chromsizes_sets[1], regions_sets = regions_sets[1], color_by = "region")
chromsizes_sets
chromsizes_sets[1]
regions_sets[1]
source("~/Desktop/Packages/plotmics/R/circleRegions.R")
if(identical(chromsizes_sets[[1]], chromsizes_sets[[2]])){
regions_chrom_filt <- regions_chrom %>%
dplyr::mutate(seqnames = if_else(region == sets_names[1], seqnames, NULL))
}
circleRegions <- function(chromsizes_sets,
regions_sets,
chr_exclude     = c("Un", "Random", "JH", "GL", "\\."),
chr_order       = c(seq(from = 1, to = 23, by = 1), "X", "Y", "M", "MT", paste("chr", c(seq(from = 1, to = 23, by = 1), "X", "Y", "M", "MT"), sep = "")),
chr_label       = "Black",
chr_line        = FALSE,
sets_names      = names(regions_sets),
colors          = c("Black", "Red", "Blue"),
color_by        = "region", # one of "region", "extra", "strand"
title           = NULL,
subtitle        = NULL,
caption         = NULL,
legend          = "bottom",
draw_points     = TRUE,
paired          = FALSE,
paired_color    = "blue",
extra_info      = NULL
){
# Load packages -----
require(dplyr)
require(magrittr)
library(purrr)
require(ggplot2)
require(ggpubr)
# Check that inputs are OK and read data --------------------------------------------------------
## Colors to factor
colors <- factor(colors, levels = colors)
##
if(length(regions_sets) != length(chromsizes_sets)){
stop( "'regions_sets' and 'chromsizes_sets' must be lists with the same length.
They should have the desired regions to plot and the chromosome size information of the corresponding assembly, respectively." )
}
## Length of regions names/colors are equal to length of regions list
if(length(regions_sets) != length(sets_names)){
stop("'sets_names' must be a character vector with the names of the sets in 'chromsizes_sets' and 'regions_sets' and their length must be the same.")
}
if(length(chromsizes_sets) != length(sets_names)){
stop("'sets_names' must be a character vector with the names of the sets in 'chromsizes_sets' and 'regions_sets' and their length must be the same.")
}
## Chrom sizes
if(!class(chromsizes_sets) == "list") { stop("'chromsizes_sets' must be a list with paths to chrom.sizes files or list of data frames with the names and size of the chromosomes") }
if(all(chromsizes_sets %>% purrr::map(~class(.x)) %>% unlist()=="data.frame")) {
# Format regions
chromsizes <- chromsizes_sets %>%
purrr::set_names(c(sets_names)) %>%
purrr::imap(~dplyr::mutate(.x, region = .y)) %>%
dplyr::bind_rows() %>%
magrittr::set_colnames(c("seqnames", "size", "region")) %>%
dplyr::mutate(region = factor(region, levels = sets_names))
} else if(all(chromsizes_sets %>% purrr::map(~class(.x)) %>% unlist()=="character")) {
# Read and format regions
chromsizes <- purrr::map(chromsizes_sets, read.delim, header = F) %>%
purrr::set_names(c(sets_names)) %>%
purrr::imap(~dplyr::mutate(.x, region = .y)) %>%
dplyr::bind_rows() %>%
magrittr::set_colnames(c("seqnames", "size", "region")) %>%
dplyr::mutate(region = factor(region, levels = sets_names))
} else if(any(chromsizes_sets %>% purrr::map(~class(.x)) %>% unlist()) %in% c("data.frame", "character")) {
stop("'regions_sets' must be a list with paths to regions files or data frames with the positions of the regions")
}
## Regions
if(!class(regions_sets) == "list") { stop("'regions_sets' must be a list with paths to regions files or list of data frames with the positions (BED6-like format) of the regions") }
if(all(regions_sets %>% purrr::map(~class(.x)) %>% unlist()=="data.frame")) {
# Format regions
regions <- regions_sets %>%
purrr::set_names(c(sets_names)) %>%
purrr::imap(~dplyr::mutate(.x, region = .y)) %>%
dplyr::bind_rows() %>%
magrittr::set_colnames(c("seqnames", "start", "end", "id", "length", "strand", "region")) %>%
dplyr::mutate(region = factor(region, levels = sets_names))
} else if(all(regions_sets %>% purrr::map(~class(.x)) %>% unlist()=="character")) {
# Read and format regions
regions <- purrr::map(regions_sets, read.delim, header = F) %>%
purrr::set_names(c(sets_names)) %>%
purrr::imap(~dplyr::mutate(.x, region = .y)) %>%
dplyr::bind_rows() %>%
magrittr::set_colnames(c("seqnames", "start", "end", "id", "length", "strand", "region")) %>%
dplyr::mutate(region = factor(region, levels = sets_names))
} else if(any(regions_sets %>% purrr::map(~class(.x)) %>% unlist()) %in% c("data.frame", "character")) {
stop("'regions_sets' must be a list with paths to regions files or data frames with the positions of the regions")
}
## Seqnames in regions = seqnames in chrom sizes
if(!all(regions$seqnames %in% chromsizes$seqnames)) { stop("The chromosome names in 'regions' must be equal to the chromosome names in 'chrom_sizes'") }
## Check color_by
if(tolower(color_by) %in% c("regions", "region")){ color_by <- "region" }
else if(tolower(color_by) %in% c("strands", "strand")){ color_by <- "strand" }
else if(!(tolower(color_by) %in% c("strands", "strand","regions", "region")) & !is.null(extra_info)){ color_by <- "extra" }
else { stop("'color_by' must be one of 'region' or 'strand' and, if an 'extra_info' list is provided, it can be 'extra'.") }
## No strandness --> turn color by strand to false
if(any(regions$strand == ".")) {
if(color_by == "strand"){
warning("Not all regions have an accepted strand value (i.e. '+' or '-'), converting 'color_by' to 'region'.")
color_by <- "region"
}
}
## Extra information
if(!is.null(extra_info)){
if(class(extra_info) != "list"){
stop("'extra_info' must be a list with paths to files or list of dataframes with the id of the regions/peaks in each element of 'region_list' and a column for extra information")
}
if(all(extra_info %>% purrr::map(~class(.x)) %>% unlist()=="data.frame")) {
# Format regions
extrainfo <- extra_info %>%
purrr::set_names(c(sets_names)) %>%
purrr::imap(~dplyr::mutate(.x, region = .y)) %>%
dplyr::bind_rows() %>%
magrittr::set_colnames(c("id", "extra", "region")) %>%
dplyr::mutate(region = factor(region, levels = sets_names))
} else if(all(extra_info %>% purrr::map(~class(.x)) %>% unlist()=="character")) {
# Read and format regions
extrainfo <- purrr::map(extrainfo, read.delim, header = F) %>%
purrr::set_names(c(sets_names)) %>%
purrr::imap(~dplyr::mutate(.x, region = .y)) %>%
dplyr::bind_rows() %>%
magrittr::set_colnames(c("id", "extra", "region")) %>%
dplyr::mutate(region = factor(region, levels = sets_names))
} else if(any(extrainfo %>% purrr::map(~class(.x)) %>% unlist()) %in% c("data.frame", "character")) {
stop("'extrainfo' must be a list with paths to regions files or data frames with the id and extra information to color the regions")
}
}
## Chromosomes to exclude
if(!class(chr_exclude) == "character") { stop("'chr_exclude' must be a character vector with regular expressions that match the chromosomes to exclude") }
## Order of the chromosomes
if(!class(chr_order) == "character") { stop("'chr_order' must be a character vector with the names of the chromosomes in the desired order") }
# Filter and format chromsizes and regions ------------------------------------------------------
chrom_filt <- chromsizes %>%
# Filter chromosomes to exclude undesired ones.
dplyr::filter(!stringr::str_detect(seqnames, pattern = paste(chr_exclude, collapse = "|"))) %>%
# Convert seqnames to factor with desired order of chromosomes
dplyr::mutate(seqnames = factor(seqnames, levels = chr_order)) %>%
# Arrange by chromsosomes
dplyr::arrange(seqnames) %>%
# Calculate sizes
dplyr::group_by(region) %>%
dplyr::mutate(cum_size = cumsum(as.numeric(size)),
prev_size = lag(as.numeric(size)),
prev_size = ifelse(is.na(prev_size), 0, prev_size),
total_size = sum(as.numeric(size))) %>%
dplyr::ungroup()
regions_filt <- regions %>%
# Filter regions to exclude undesired chromosomes.
dplyr::filter(!stringr::str_detect(seqnames, pattern = paste(chr_exclude, collapse = "|"))) %>%
# Convert seqnames and regions to factor with the desired order.
dplyr::mutate(seqnames = factor(seqnames, levels = chr_order),
region   = factor(region, levels = sets_names))
# Join extra info to regions
if(!is.null(extra_info)){
regions_filt <- dplyr::left_join(regions_filt, extrainfo, by = c("id", "region")) %>%
dplyr::mutate(extra = factor(extra))
}
# Left join of chrom_filt and regions_filt -----
regions_chrom <- dplyr::left_join(chrom_filt, regions_filt, by = c("seqnames", "region")) %>%
# Group by chromosome
# remove all the redundant "size" values
# remove all the redundant "prev_size" values
# ungroup
# convert sequnames to factor and arrange by seqnames
dplyr::group_by(seqnames, region) %>%
dplyr::mutate(row = row_number(),
size2 = max(size),
size = if_else(row == 1, size, NULL),
prev_size2 = max(prev_size),
prev_size = if_else(row == 1, prev_size, NULL),
num_regions = n()) %>%
dplyr::ungroup() %>%
dplyr::mutate(group = group_indices(., .dots = "region")) %>%
dplyr::mutate(seqnames = factor(seqnames, levels = chr_order)) %>%
dplyr::arrange(seqnames) %>%
dplyr::mutate(region = factor(region, levels = sets_names))
if(length(chromsizes_sets)>1){
if(identical(chromsizes_sets[[1]], chromsizes_sets[[2]])){
regions_chrom_filt <- regions_chrom %>%
dplyr::mutate(seqnames = if_else(region == sets_names[1], seqnames, NULL))
}
} else {
regions_chrom_filt <- regions_chrom
}
# DRAW PLOT -------------------------------------------------------------------------------------
# Initialize plot
g <- ggplot(data = regions_chrom) +
# Draw chromosomes and labels
geom_col(aes(x = 11-group*2, y = size, group = seqnames), color = "black", fill = NA, width = .5, na.rm = T, position = "stack") +
geom_text(data = regions_chrom_filt, aes(x = 11-group*2+1, y = size, label = seqnames, group = seqnames),
position = position_stack(vjust = .5), show.legend = F,  na.rm = T, size = 2.5, hjust = .5, color = chr_label, alpha = 0.8)
# Draw line to separate chromosomes
if(chr_line){
g <- g + geom_hline(data = regions_chrom %>% dplyr::filter(region == sets_names[1]), aes(yintercept = total_size-cum_size+size2), linetype = 2, size = 0.1, na.rm = T)
}
# Draw segments and points for each region
g <- g + geom_segment(data = regions_chrom, aes(x = 11-group*2-.25, xend = 11-group*2+.25, y = total_size-cum_size+size2-start,
yend = total_size-cum_size+size2-end, color = .data[[color_by]]), na.rm = T)
# Draw points for each region
if(draw_points){ g <- g + geom_point(data = regions_chrom, aes(x = 11-group*2, y = total_size-cum_size+size2-start-length/2, color = .data[[color_by]], group = id), size = .4, na.rm = T) }
else{  g <- g + geom_point(data = regions_chrom, aes(x = 11-group*2, y = total_size-cum_size+size2-start-length/2, group = id), size = .4, na.rm = T, color = NA) }
# Draw paired lines
if(paired){
g <- g + geom_line(aes(x = 11-group*2, y = total_size-cum_size+size2-start-length/2, group = id), size = .2, color = paired_color)
}
# Change colors and remove NAs from legend
g <- g + scale_color_manual(values = colors, na.translate = F)
# Make plot circular
g <- g + coord_polar(theta = "y", direction = -1, start = 0) + xlim(0,10)
# Add labels and titles
if(!is.null(title)){ g <- g + ggtitle(label = title, subtitle = subtitle) }
if(!is.null(caption)){
# If caption is TRUE, write number of regions (only regions1 or regions 1 and 2)
if(is.logical(caption)) {
if(caption) {
regions_num <- regions_filt %>% dplyr::count(region) %>% dplyr::mutate(Num = paste(region, ": ", n, sep = "")) %>% dplyr::pull(Num)
g <- g + labs(caption = paste(regions_num, collapse = "; "))
}
}
# If caption is character, write the caption.
if(is.character(caption)) { g <- g + labs(caption = caption) }
}
# Customize plot theme
g <- g +
theme_pubr(legend = legend) + # Add theme pubr from ggpubr with options for legend
theme(axis.text = element_blank(), # Remove axis text
axis.ticks = element_blank(), # Remove axis ticks
axis.title = element_blank(), # Remove axis titles
axis.line = element_blank(), # Remove axis lines
legend.title = element_blank(), # Remove legend title
plot.title = element_text(hjust = .5),
plot.subtitle = element_text(hjust = .5, face = "italic"))
# Return plot
return(g)
}
devtools::document()
pkgdown::build_site()
pkgdown::build_home()
pkgdown::build_article(name = "vignettes/12-circleRegions.Rmd")
pkgdown::build_article(name = "vignettes/12-circleRegions")
pkgdown::build_article(name = "12-circleRegions")
devtools::document()
pkgdown::build_article(name = "12-circleRegions")
library(plotmics)
remove.packages("plotmics", lib="~/R/x86_64-pc-linux-gnu-library/4.1")
devtools::install_github("amitjavilaventura/plotmics")
Sys.Date()
ggVennPeaks <- function(peak_list, peak_names = names(peak_list), percent = T,
in_fill = c("blue", "gold3"), alpha = .4,
out_color = "black", name_color = "black", text_color = "black",
name_size = 5, label_size = 3, title = "", subtitle = ""){
# Load requireed packages
require(ggvenn)
require(dplyr)
require(reshape2)
require(magrittr)
require(purrr)
require(tidyr)
# Check that inputs are OK
if(!is.list(peak_list)){ stop("'peak_list' must be a (named) list of dataframes with the columns 'seqnames', 'start' and 'end'.") }
if(length(peak_list) != length(peak_names)){ stop("'peak_names' must be a character vector with the same length as 'peak_list'.") }
# Get Venn Counts and the peaks in each set
x <- getVennCounts(peaks = peak_list, conds = peak_names)
# Set default colors in case the number of specified colors
#   does not match the number elements in 'peak_list'
if(length(in_fill) != length(peak_list)) {
if(length(peak_list) == 2){ in_fill <- c("blue", "gold3") }
else if(length(peak_list) == 3){ in_fill <- c("blue", "gold3", "pink") }
else if(length(peak_list) == 4){ in_fill <- c("blue", "gold3", "pink", "green") }
else if(length(peak_list) == 5){ in_fill <- c("blue", "gold3", "pink", "green", "orange") }
}
# Transform the matrix of the peaks in each set in order to plot the Venn
y <- x$matrix %>%
as_tibble() %>%
magrittr::set_colnames(c("Peak", paste("cond", 1:length(peak_list), sep = ""))) %>%
reshape2::melt() %>% mutate(value = if_else(value == 1, Peak, NULL)) %>%
tidyr::pivot_wider(names_from = "variable", values_from = "value") %>%
dplyr::select(-Peak) %>%
dplyr::as_tibble() %>%
as.list() %>%
purrr::set_names(peak_names) %>%
purrr::map(~na.omit(.x))
# Draw the Venn diagram with ggvenn
venn <- ggvenn::ggvenn(data = y, show_percentage = percent,
fill_color = in_fill, fill_alpha = alpha,
stroke_color =  out_color,
set_name_color = name_color, set_name_size = name_size,
text_color = text_color, text_size = label_size) +
scale_y_discrete(expand = c(0,0.5))
if(length(peak_list) %in% 4:5) { venn <- venn + scale_x_discrete(expand = c(0,0.5))}
if(!is.null(title)){
venn <- venn + labs(title = title, subtitle = subtitle) +
theme(plot.title = element_text(face = "bold", hjust = .5),
plot.subtitle = element_text(face = "italic", hjust = .5))
}
# Return the Venn diagram.
return(venn)
}
remove.packages("plotmics", lib="~/R/x86_64-pc-linux-gnu-library/4.1")
