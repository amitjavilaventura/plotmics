## Chromosomes to exclude
if(!class(chr_exclude) == "character") { stop("'chr_exclude' must be a character vector with regular expressions that match the chromosomes to exclude") }
## Order of the chromosomes
if(!class(chr_order) == "character") { stop("'chr_order' must be a character vector with the names of the chromosomes in the desired order") }
## Extra information
if(!is.null(extra_info)){
if(class(extra_info) != "list"){
stop("'extra_info' must be a list with paths to files or list of dataframes with the id of the regions/peaks in each element of 'region_list' and a column for extra information")
}
if(all(extra_info %>% purrr::map(~class(.x)) %>% unlist()=="data.frame")) {
# Format regions
extrainfo <- extra_info %>%
purrr::set_names(sets_names) %>%
purrr::imap(~dplyr::mutate(.x, region = .y)) %>%
dplyr::bind_rows() %>%
magrittr::set_colnames(c("id", "extra", "region")) %>%
dplyr::mutate(region = factor(region, levels = sets_names))
} else if(all(extra_info %>% purrr::map(~class(.x)) %>% unlist()=="character")) {
# Read and format regions
extrainfo <- purrr::map(extrainfo, read.delim, header = F) %>%
purrr::set_names(sets_names) %>%
purrr::imap(~dplyr::mutate(.x, region = .y)) %>%
dplyr::bind_rows() %>%
magrittr::set_colnames(c("id", "extra", "region")) %>%
dplyr::mutate(region = factor(region, levels = regions_names))
} else if(any(extrainfo %>% purrr::map(~class(.x)) %>% unlist()) %in% c("data.frame", "character")) {
stop("'extrainfo' must be a list with paths to regions files or data frames with the id and extra information to color the regions")
}
}
# Filter chromsizes and regions ------
chrom_filt <- chromsizes %>% dplyr::filter(!stringr::str_detect(seqnames, pattern = paste(chr_exclude, collapse = "|"))) %>%
dplyr::mutate(seqnames = factor(seqnames, levels = chr_order))
regions_filt <- regions %>% dplyr::filter(!stringr::str_detect(seqnames, pattern = paste(chr_exclude, collapse = "|"))) %>%
dplyr::mutate(seqnames = factor(seqnames, levels = chr_order),
region = factor(region, levels = regions_order))
# Join extra info to regions
if(!is.null(extra_info)){
regions_filt <- dplyr::left_join(regions_filt, extrainfo, by = c("id", "region")) %>%
dplyr::mutate(extra = factor(extra))
}
# Make plot -----
# Initialize chromosomes with or without cytobands
if(!is.null(cyto_bands)){
if(is.character(cyto_bands)) { cyto_bands <- read.delim(cyto_bands, header = F) }
else if(is.data.frame(cyto_bands)) { cyto_bands <- cyto_bands }
rm <- chrom_filt$end %>% max()*0.001
cytobands <- cyto_bands %>%
magrittr::set_colnames(c("seqnames","start","end","name","gieStain")) %>%
dplyr::filter(stringr::str_detect(string = seqnames, pattern = paste(chr_exclude, collapse = "|"),negate = T)) %>%
dplyr::mutate(seqnames = factor(seqnames, chr_order)) %>%
dplyr::group_by(seqnames) %>%
dplyr::mutate(end = ifelse(end == max(end), end-rm, end)) %>%
dplyr::ungroup()
g <- ggplot() +
geom_col(data = cytobands, mapping = aes(y = end-start, x = seqnames, group = name, fill = gieStain), width = 0.65, show.legend = F) +
scale_fill_manual(values = c("NA", "Gray90", "Gray80", "Gray70", "Gray60")) +
ggnewscale::new_scale_fill() +
geom_col(data = chrom_filt, mapping = aes(y = end, x = seqnames), color = "black", fill = NA, width = 0.7)
} else {
g <- ggplot() + geom_col(data = chrom_filt, mapping = aes(y = end, x = seqnames), color = "black", fill = NA, width = 0.7)
}
# Draw regions
# Draw lines
g <- g +  geom_tile(data = regions_filt, mapping = aes(x = seqnames, y = start + length/2, height = length, width = .7, fill = .data[[color_by]], color = .data[[color_by]]))
g <- ggplot() + geom_col(data = chrom_filt, mapping = aes(y = end, x = seqnames), color = "black", fill = NA, width = 0.7)
# Make plot -----
# Initialize chromosomes with or without cytobands
if(!is.null(cyto_bands)){
if(is.character(cyto_bands)) { cyto_bands <- read.delim(cyto_bands, header = F) }
else if(is.data.frame(cyto_bands)) { cyto_bands <- cyto_bands }
rm <- chrom_filt$end %>% max()*0.001
cytobands <- cyto_bands %>%
magrittr::set_colnames(c("seqnames","start","end","name","gieStain")) %>%
dplyr::filter(stringr::str_detect(string = seqnames, pattern = paste(chr_exclude, collapse = "|"),negate = T)) %>%
dplyr::mutate(seqnames = factor(seqnames, chr_order)) %>%
dplyr::group_by(seqnames) %>%
dplyr::mutate(end = ifelse(end == max(end), end-rm, end)) %>%
dplyr::ungroup()
g <- ggplot() +
geom_col(data = cytobands, mapping = aes(y = end-start, x = seqnames, group = name, fill = gieStain), width = 0.65, show.legend = F) +
scale_fill_manual(values = c("NA", "Gray90", "Gray80", "Gray70", "Gray60")) +
ggnewscale::new_scale_fill() +
geom_col(data = chrom_filt, mapping = aes(y = end, x = seqnames), color = "black", fill = NA, width = 0.7)
} else {
g <- ggplot() + geom_col(data = chrom_filt, mapping = aes(y = end, x = seqnames), color = "black", fill = NA, width = 0.7)
}
g <- ggplot() + geom_col(data = chrom_filt, mapping = aes(y = end, x = seqnames), color = "black", fill = NA, width = 0.7)
# Draw regions
# Draw lines
g <- g +  geom_tile(data = regions_filt, mapping = aes(x = seqnames, y = start + length/2, height = length, width = .7, fill = .data[[color_by]], color = .data[[color_by]]))
# Draw points if desired
if(draw_points) { g <- g + geom_point(data = regions_filt, mapping = aes(x = seqnames, y = start + length/2, fill = .data[[color_by]], color = .data[[color_by]]), size = 1) }
# Change colors
g <- g + scale_fill_discrete(type = colors) + scale_color_discrete(type = colors)
# Write axis labels
g <- g + xlab(xlab) + ylab(ylab)
# Write title and subtitle
if(!is.null(title)){  g <- g + ggtitle(label = title, subtitle = subtitle) }
# Write caption
if(!is.null(caption)){
# If caption is TRUE, write number of regions (only regions1 or regions 1 and 2)
if(is.logical(caption)) {
if(caption) {
regions_num <- regions_filt %>% dplyr::count(region) %>% dplyr::mutate(Num = paste(region, ": ", n, sep = "")) %>% dplyr::pull(Num)
g <- g + labs(caption = paste(regions_num, collapse = "; "))
}
}
# If caption is character, write the caption.
if(is.character(caption)) { g <- g + labs(caption = caption) }
}
# Customize plot
g <- g +
## Remove space between axis and plot
## Turn scientific notation of
scale_y_continuous(expand = c(0,0), labels = function(x) format(x, scientific = FALSE)) +
## Theme pubr to remove border and choose the legend position
theme_pubr(border = F, margin = T, legend = legend) +
# Further costumization
theme(plot.title = element_text(hjust = .5, face = "bold"), # title
plot.subtitle = element_text(hjust = .5, face = "italic"), # subtitle
axis.title = element_text(hjust = .5, face = "bold"), # axis titles
legend.title = element_blank(), # remove legend title
legend.key.size = unit(4, "mm"), #
axis.ticks = element_blank(), axis.line = element_blank())
if(is.null(y_text_size)){
g <- g + theme(axis.text.y = element_blank())
} else { g <- g + theme(axis.text.y = element_text(size = y_text_size)) }
# Flip coordinates
if(coord_flip) { g <- g + coord_flip() }
# Return plot
return(g)
chromRegions <- function(chrom_sizes,
regions_list,
regions_names   = names(regions_list),
regions_order   = names(regions_list),
colors          = c("Black", "Red", "Blue"),
color_by        = "region",
chr_exclude     = c("Un", "Random", "JH", "GL", "\\."),
chr_order       = c(seq(from = 1, to = 23, by = 1), "X", "Y", "M", "MT", paste("chr", c(seq(from = 1, to = 23, by = 1), "X", "Y", "M", "MT"), sep = "")),
title           = NULL,
subtitle        = NULL,
caption         = NULL,
ylab            = "",
xlab            = "Chromosome",
legend          = "bottom",
draw_points     = TRUE,
coord_flip      = FALSE,
extra_info      = NULL,
cyto_bands      = NULL,
y_text_size     = NULL) {
# Load packages -----
require(dplyr)
require(magrittr)
library(purrr)
require(ggplot2)
require(ggpubr)
require(scales)
require(ggnewscale)
# Check that inputs are OK and read data -----
## Chrom sizes
if(!class(chrom_sizes) %in% c("character", "data.frame", "tibble")) { stop("'chrom_sizes' must be a character vector with the path to a chrom.sizes file or a data.frame with the chromosomes and their sizes") }
else if(class(chrom_sizes) == "character") { chromsizes <- read.delim(chrom_sizes, header = F, col.names = c("seqnames", "end")) }
else if(class(chrom_sizes) %in% c("data.frame", "tibble")) { chromsizes <- chrom_sizes %>% magrittr::set_colnames(c("seqnames", "end")) }
## Length of regions names/colors are equal to length of regions list
if(length(regions_list) != length(regions_names)){ stop("'regions_names' must be a character vector with the names of the sets in 'regions_list' and their length must be the same.")}
#else if(length(regions_list) != length(regions_names)){ stop("'regions_colors' must be a character vector with the colors of the sets in 'regions_list' and their length must be the same.")}
## Regions
if(!class(regions_list) == "list") { stop("'regions_list' must be a list with paths to regions files or data frames with the positions of the regions") }
if(all(regions_list %>% purrr::map(~class(.x)) %>% unlist()=="data.frame")) {
# Format regions
regions <- regions_list %>%
purrr::set_names(regions_names) %>%
purrr::imap(~dplyr::mutate(.x, region = .y)) %>%
dplyr::bind_rows() %>%
magrittr::set_colnames(c("seqnames", "start", "end", "id", "length", "strand", "region"))
} else if(all(regions_list %>% purrr::map(~class(.x)) %>% unlist()=="character")) {
# Read and format regions
regions <- purrr::map(regions_list, read.delim, header = F) %>%
purrr::set_names(regions_names) %>%
purrr::imap(~dplyr::mutate(.x, region = .y)) %>%
dplyr::bind_rows() %>%
magrittr::set_colnames(c("seqnames", "start", "end", "id", "length", "strand", "region"))
} else if(any(regions_list %>% purrr::map(~class(.x)) %>% unlist()) %in% c("data.frame", "character")) { stop("'regions_list' must be a list with paths to regions files or data frames with the positions of the regions") }
## Seqnames in regions = seqnames in chrom sizes
if(!all(regions$seqnames %in% chromsizes$seqnames)) { stop("The chromosome names in 'regions' must be equal to the chromosome names in 'chrom_sizes'") }
## Check color_by
if(tolower(color_by) %in% c("regions", "region")){ color_by <- "region" }
else if(tolower(color_by) %in% c("strands", "strand")){ color_by <- "strand" }
else if(!(tolower(color_by) %in% c("strands", "strand","regions", "region")) & !is.null(extra_info)){ color_by <- "extra" }
else { stop("'color_by' must be one of 'region' or 'strand' and, if an 'extra_info' list is provided, it can be 'extra'.") }
## No strandness --> turn color by strand to false
if(any(regions$strand == ".")) {
if(color_by == "strand"){
warning("Not all regions have an accepted strand value (i.e. '+' or '-'), converting 'color_by' to 'region'.")
color_by <- "region"
}
}
## Chromosomes to exclude
if(!class(chr_exclude) == "character") { stop("'chr_exclude' must be a character vector with regular expressions that match the chromosomes to exclude") }
## Order of the chromosomes
if(!class(chr_order) == "character") { stop("'chr_order' must be a character vector with the names of the chromosomes in the desired order") }
## Extra information
if(!is.null(extra_info)){
if(class(extra_info) != "list"){
stop("'extra_info' must be a list with paths to files or list of dataframes with the id of the regions/peaks in each element of 'region_list' and a column for extra information")
}
if(all(extra_info %>% purrr::map(~class(.x)) %>% unlist()=="data.frame")) {
# Format regions
extrainfo <- extra_info %>%
purrr::set_names(sets_names) %>%
purrr::imap(~dplyr::mutate(.x, region = .y)) %>%
dplyr::bind_rows() %>%
magrittr::set_colnames(c("id", "extra", "region")) %>%
dplyr::mutate(region = factor(region, levels = sets_names))
} else if(all(extra_info %>% purrr::map(~class(.x)) %>% unlist()=="character")) {
# Read and format regions
extrainfo <- purrr::map(extrainfo, read.delim, header = F) %>%
purrr::set_names(sets_names) %>%
purrr::imap(~dplyr::mutate(.x, region = .y)) %>%
dplyr::bind_rows() %>%
magrittr::set_colnames(c("id", "extra", "region")) %>%
dplyr::mutate(region = factor(region, levels = regions_names))
} else if(any(extrainfo %>% purrr::map(~class(.x)) %>% unlist()) %in% c("data.frame", "character")) {
stop("'extrainfo' must be a list with paths to regions files or data frames with the id and extra information to color the regions")
}
}
# Filter chromsizes and regions ------
chrom_filt <- chromsizes %>% dplyr::filter(!stringr::str_detect(seqnames, pattern = paste(chr_exclude, collapse = "|"))) %>%
dplyr::mutate(seqnames = factor(seqnames, levels = chr_order))
regions_filt <- regions %>% dplyr::filter(!stringr::str_detect(seqnames, pattern = paste(chr_exclude, collapse = "|"))) %>%
dplyr::mutate(seqnames = factor(seqnames, levels = chr_order),
region = factor(region, levels = regions_order))
# Join extra info to regions
if(!is.null(extra_info)){
regions_filt <- dplyr::left_join(regions_filt, extrainfo, by = c("id", "region")) %>%
dplyr::mutate(extra = factor(extra))
}
# Make plot -----
# Initialize chromosomes with or without cytobands
if(!is.null(cyto_bands)){
if(is.character(cyto_bands)) { cyto_bands <- read.delim(cyto_bands, header = F) }
else if(is.data.frame(cyto_bands)) { cyto_bands <- cyto_bands }
rm <- chrom_filt$end %>% max()*0.001
cytobands <- cyto_bands %>%
magrittr::set_colnames(c("seqnames","start","end","name","gieStain")) %>%
dplyr::filter(stringr::str_detect(string = seqnames, pattern = paste(chr_exclude, collapse = "|"),negate = T)) %>%
dplyr::mutate(seqnames = factor(seqnames, chr_order)) %>%
dplyr::group_by(seqnames) %>%
dplyr::mutate(end = ifelse(end == max(end), end-rm, end)) %>%
dplyr::ungroup()
g <- ggplot() +
geom_col(data = cytobands, mapping = aes(y = end-start, x = seqnames, group = name, fill = gieStain), width = 0.65, show.legend = F) +
scale_fill_manual(values = c("NA", "Gray90", "Gray80", "Gray70", "Gray60")) +
ggnewscale::new_scale_fill() +
geom_col(data = chrom_filt, mapping = aes(y = end, x = seqnames), color = "black", fill = NA, width = 0.7)
} else {
g <- ggplot() + geom_col(data = chrom_filt, mapping = aes(y = end, x = seqnames), color = "black", fill = NA, width = 0.7)
}
# Draw regions
# Draw lines
g <- g +  geom_tile(data = regions_filt, mapping = aes(x = seqnames, y = start + length/2, height = length, width = .7, fill = .data[[color_by]], color = .data[[color_by]]))
# Draw points if desired
if(draw_points) { g <- g + geom_point(data = regions_filt, mapping = aes(x = seqnames, y = start + length/2, fill = .data[[color_by]], color = .data[[color_by]]), size = 1) }
# Change colors
g <- g + scale_fill_discrete(type = colors) + scale_color_discrete(type = colors)
# Write axis labels
g <- g + xlab(xlab) + ylab(ylab)
# Write title and subtitle
if(!is.null(title)){  g <- g + ggtitle(label = title, subtitle = subtitle) }
# Write caption
if(!is.null(caption)){
# If caption is TRUE, write number of regions (only regions1 or regions 1 and 2)
if(is.logical(caption)) {
if(caption) {
regions_num <- regions_filt %>% dplyr::count(region) %>% dplyr::mutate(Num = paste(region, ": ", n, sep = "")) %>% dplyr::pull(Num)
g <- g + labs(caption = paste(regions_num, collapse = "; "))
}
}
# If caption is character, write the caption.
if(is.character(caption)) { g <- g + labs(caption = caption) }
}
# Customize plot
g <- g +
## Remove space between axis and plot
## Turn scientific notation of
scale_y_continuous(expand = c(0,0), labels = function(x) format(x, scientific = FALSE)) +
## Theme pubr to remove border and choose the legend position
theme_pubr(border = F, margin = T, legend = legend) +
# Further costumization
theme(plot.title = element_text(hjust = .5, face = "bold"), # title
plot.subtitle = element_text(hjust = .5, face = "italic"), # subtitle
axis.title = element_text(hjust = .5, face = "bold"), # axis titles
legend.title = element_blank(), # remove legend title
legend.key.size = unit(4, "mm"), #
axis.ticks = element_blank(), axis.line = element_blank())
if(is.null(y_text_size)){
g <- g + theme(axis.text.y = element_blank())
} else { g <- g + theme(axis.text.y = element_text(size = y_text_size)) }
# Flip coordinates
if(coord_flip) { g <- g + coord_flip() }
# Return plot
return(g)
}
g
chromsizes %>% dplyr::filter(!stringr::str_detect(seqnames, pattern = paste(chr_exclude, collapse = "|"))) %>%
dplyr::mutate(seqnames = factor(seqnames, levels = chr_order))
chrom_filt
ggplot() +
geom_col(data = cytobands, mapping = aes(y = end-start, x = seqnames, group = name, fill = gieStain), width = 0.65, show.legend = F) +
scale_fill_manual(values = c("NA", "Gray90", "Gray80", "Gray70", "Gray60")) +
ggnewscale::new_scale_fill()
gplot() +
geom_col(data = cytobands, mapping = aes(y = end-start, x = seqnames, group = name, fill = gieStain), width = 0.65, show.legend = F) +
scale_fill_manual(values = c("NA", "Gray90", "Gray80", "Gray70", "Gray60")) +
ggnewscale::new_scale_fill() +
geom_col(data = chrom_filt, mapping = aes(y = end, x = seqnames), color = "black", fill = NA, width = 0.7)
ggplot() +
geom_col(data = cytobands, mapping = aes(y = end-start, x = seqnames, group = name, fill = gieStain), width = 0.65, show.legend = F) +
scale_fill_manual(values = c("NA", "Gray90", "Gray80", "Gray70", "Gray60")) +
ggnewscale::new_scale_fill() +
geom_col(data = chrom_filt, mapping = aes(y = end, x = seqnames), color = "black", fill = NA, width = 0.7)
g <- ggplot() +
geom_col(data = cytobands, mapping = aes(y = end-start, x = seqnames, group = name, fill = gieStain), width = 0.65, show.legend = F) +
scale_fill_manual(values = c("NA", "Gray90", "Gray80", "Gray70", "Gray60")) +
ggnewscale::new_scale_fill() +
geom_col(data = chrom_filt, mapping = aes(y = end, x = seqnames), color = "black", fill = NA, width = 0.7, inherit.aes = FALSE)
G
g
cyto_bands %>%
magrittr::set_colnames(c("seqnames","start","end","name","gieStain")) %>%
dplyr::filter(stringr::str_detect(string = seqnames, pattern = paste(chr_exclude, collapse = "|"),negate = T)) %>%
dplyr::group_by(seqnames) %>%
dplyr::mutate(size = sum(end))
cyto_bands %>%
magrittr::set_colnames(c("seqnames","start","end","name","gieStain")) %>%
dplyr::filter(stringr::str_detect(string = seqnames, pattern = paste(chr_exclude, collapse = "|"),negate = T)) %>%
dplyr::group_by(seqnames) %>%
dplyr::mutate(size = sum(end-start))
cytobands <- cyto_bands %>%
magrittr::set_colnames(c("seqnames","start","end","name","gieStain")) %>%
dplyr::filter(stringr::str_detect(string = seqnames, pattern = paste(chr_exclude, collapse = "|"),negate = T)) %>%
dplyr::group_by(seqnames) %>%
dplyr::mutate(size = sum(end-start)) %>%
dplyr::ungroup() %>%
dplyr::mutate(seqnames = factor(seqnames, chr_order))
g <- ggplot() +
geom_col(data = cytobands, mapping = aes(y = end-start, x = seqnames, group = name, fill = gieStain), width = 0.65, show.legend = F) +
scale_fill_manual(values = c("NA", "Gray90", "Gray80", "Gray70", "Gray60")) +
ggnewscale::new_scale_fill() +
geom_col(data = cytobands, mapping = aes(y = size, x = seqnames), color = "black", fill = NA, width = 0.7)
# Make plot -----
# Initialize chromosomes with or without cytobands
if(!is.null(cyto_bands)){
if(is.character(cyto_bands)) { cyto_bands <- read.delim(cyto_bands, header = F) }
else if(is.data.frame(cyto_bands)) { cyto_bands <- cyto_bands }
cytobands <- cyto_bands %>%
magrittr::set_colnames(c("seqnames","start","end","name","gieStain")) %>%
dplyr::filter(stringr::str_detect(string = seqnames, pattern = paste(chr_exclude, collapse = "|"),negate = T)) %>%
dplyr::group_by(seqnames) %>%
dplyr::mutate(size = sum(end-start)) %>%
dplyr::ungroup() %>%
dplyr::mutate(seqnames = factor(seqnames, chr_order))
g <- ggplot() +
geom_col(data = cytobands, mapping = aes(y = end-start, x = seqnames, group = name, fill = gieStain), width = 0.65, show.legend = F) +
scale_fill_manual(values = c("NA", "Gray90", "Gray80", "Gray70", "Gray60")) +
ggnewscale::new_scale_fill() +
geom_col(data = cytobands, mapping = aes(y = size, x = seqnames), color = "black", fill = NA, width = 0.7)
} else {
g <- ggplot() + geom_col(data = chrom_filt, mapping = aes(y = end, x = seqnames), color = "black", fill = NA, width = 0.7)
}
# Draw regions
# Draw lines
g <- g +  geom_tile(data = regions_filt, mapping = aes(x = seqnames, y = start + length/2, height = length, width = .7, fill = .data[[color_by]], color = .data[[color_by]]))
# Draw points if desired
if(draw_points) { g <- g + geom_point(data = regions_filt, mapping = aes(x = seqnames, y = start + length/2, fill = .data[[color_by]], color = .data[[color_by]]), size = 1) }
# Change colors
g <- g + scale_fill_discrete(type = colors) + scale_color_discrete(type = colors)
# Write axis labels
g <- g + xlab(xlab) + ylab(ylab)
# Write title and subtitle
if(!is.null(title)){  g <- g + ggtitle(label = title, subtitle = subtitle) }
# Write caption
if(!is.null(caption)){
# If caption is TRUE, write number of regions (only regions1 or regions 1 and 2)
if(is.logical(caption)) {
if(caption) {
regions_num <- regions_filt %>% dplyr::count(region) %>% dplyr::mutate(Num = paste(region, ": ", n, sep = "")) %>% dplyr::pull(Num)
g <- g + labs(caption = paste(regions_num, collapse = "; "))
}
}
# If caption is character, write the caption.
if(is.character(caption)) { g <- g + labs(caption = caption) }
}
# Customize plot
g <- g +
## Remove space between axis and plot
## Turn scientific notation of
scale_y_continuous(expand = c(0,0), labels = function(x) format(x, scientific = FALSE)) +
## Theme pubr to remove border and choose the legend position
theme_pubr(border = F, margin = T, legend = legend) +
# Further costumization
theme(plot.title = element_text(hjust = .5, face = "bold"), # title
plot.subtitle = element_text(hjust = .5, face = "italic"), # subtitle
axis.title = element_text(hjust = .5, face = "bold"), # axis titles
legend.title = element_blank(), # remove legend title
legend.key.size = unit(4, "mm"), #
axis.ticks = element_blank(), axis.line = element_blank())
if(is.null(y_text_size)){
g <- g + theme(axis.text.y = element_blank())
} else { g <- g + theme(axis.text.y = element_text(size = y_text_size)) }
# Flip coordinates
if(coord_flip) { g <- g + coord_flip() }
# Return plot
return(g)
g
g + theme(axis.text.y = element_text(size = y_text_size))
cytobands <- cyto_bands %>%
magrittr::set_colnames(c("seqnames","start","end","name","gieStain")) %>%
dplyr::filter(stringr::str_detect(string = seqnames, pattern = paste(chr_exclude, collapse = "|"),negate = T)) %>%
dplyr::group_by(seqnames) %>%
dplyr::mutate(size = iflese(end == max(end), sum(end-start), NA)) %>%
dplyr::ungroup() %>%
dplyr::mutate(seqnames = factor(seqnames, chr_order))
g <- ggplot() +
geom_col(data = cytobands, mapping = aes(y = end-start, x = seqnames, group = name, fill = gieStain), width = 0.65, show.legend = F) +
scale_fill_manual(values = c("NA", "Gray90", "Gray80", "Gray70", "Gray60")) +
ggnewscale::new_scale_fill() +
geom_col(data = cytobands, mapping = aes(y = size, x = seqnames), color = "black", fill = NA, width = 0.7)
cyto_bands %>%
magrittr::set_colnames(c("seqnames","start","end","name","gieStain")) %>%
dplyr::filter(stringr::str_detect(string = seqnames, pattern = paste(chr_exclude, collapse = "|"),negate = T)) %>%
dplyr::group_by(seqnames) %>%
dplyr::mutate(size = iflese(end == max(end), sum(end-start), NA))
cytobands <- cyto_bands %>%
magrittr::set_colnames(c("seqnames","start","end","name","gieStain")) %>%
dplyr::filter(stringr::str_detect(string = seqnames, pattern = paste(chr_exclude, collapse = "|"),negate = T)) %>%
dplyr::group_by(seqnames) %>%
dplyr::mutate(size = ifelse(end == max(end), sum(end-start), NA)) %>%
dplyr::ungroup() %>%
dplyr::mutate(seqnames = factor(seqnames, chr_order))
g <- ggplot() +
geom_col(data = cytobands, mapping = aes(y = end-start, x = seqnames, group = name, fill = gieStain), width = 0.65, show.legend = F) +
scale_fill_manual(values = c("NA", "Gray90", "Gray80", "Gray70", "Gray60")) +
ggnewscale::new_scale_fill() +
geom_col(data = cytobands, mapping = aes(y = size, x = seqnames), color = "black", fill = NA, width = 0.7)
g
# Draw regions
# Draw lines
g <- g +  geom_tile(data = regions_filt, mapping = aes(x = seqnames, y = start + length/2, height = length, width = .7, fill = .data[[color_by]], color = .data[[color_by]]))
# Draw points if desired
if(draw_points) { g <- g + geom_point(data = regions_filt, mapping = aes(x = seqnames, y = start + length/2, fill = .data[[color_by]], color = .data[[color_by]]), size = 1) }
# Change colors
g <- g + scale_fill_discrete(type = colors) + scale_color_discrete(type = colors)
# Write axis labels
g <- g + xlab(xlab) + ylab(ylab)
# Write title and subtitle
if(!is.null(title)){  g <- g + ggtitle(label = title, subtitle = subtitle) }
# Write caption
if(!is.null(caption)){
# If caption is TRUE, write number of regions (only regions1 or regions 1 and 2)
if(is.logical(caption)) {
if(caption) {
regions_num <- regions_filt %>% dplyr::count(region) %>% dplyr::mutate(Num = paste(region, ": ", n, sep = "")) %>% dplyr::pull(Num)
g <- g + labs(caption = paste(regions_num, collapse = "; "))
}
}
# If caption is character, write the caption.
if(is.character(caption)) { g <- g + labs(caption = caption) }
}
# Customize plot
g <- g +
## Remove space between axis and plot
## Turn scientific notation of
scale_y_continuous(expand = c(0,0), labels = function(x) format(x, scientific = FALSE)) +
## Theme pubr to remove border and choose the legend position
theme_pubr(border = F, margin = T, legend = legend) +
# Further costumization
theme(plot.title = element_text(hjust = .5, face = "bold"), # title
plot.subtitle = element_text(hjust = .5, face = "italic"), # subtitle
axis.title = element_text(hjust = .5, face = "bold"), # axis titles
legend.title = element_blank(), # remove legend title
legend.key.size = unit(4, "mm"), #
axis.ticks = element_blank(), axis.line = element_blank())
g
if(is.null(y_text_size)){
g <- g + theme(axis.text.y = element_blank())
} else { g <- g + theme(axis.text.y = element_text(size = y_text_size)) }
# Flip coordinates
if(coord_flip) { g <- g + coord_flip() }
g
cytobands %>% add_row(seqnames = "M")
cytobands %>% add_row(seqnames = "M") %>% dplyr::filter(seqnames == "M")
cytobands %>% add_row(seqnames = "M") %>% dplyr::filter(seqnames == "M", start = 0)
cytobands %>% add_row(seqnames = "M", start = 0) %>% dplyr::filter(seqnames == "M")
cytobands %>% add_row(seqnames = "M", start = 0) %>% dplyr::filter(seqnames == "M")
M = chrom_filt %>% dplyr::filter()
M
M = M %>% dplyr::filter(seqnames = M)
M = M %>% dplyr::filter(seqnames == M)
M
colnames(M)
M = M$end[which(M$seqnames == "M")]
M
cytobands %>% add_row(seqnames = "M", start = 0, end = M)
cytobands %>% add_row(seqnames = "M", start = 0, end = M) %>% dplyr::filter(seqnames == "M")
cytobands %>% add_row(seqnames = "M", start = 0, end = M, name = "M", gieStain = NA, size = end) %>% dplyr::filter(seqnames == "M")
cytobands %>% add_row(seqnames = "M", start = 0, end = M, name = "M", gieStain = NA, size = end) %>% write.table("testdata/mm10.cytoBand.txt", col.names = F, row.names = F, quote = F, sep = "\t")
cytobands %>% dplyr::filter(gieStain = "acen")
cytobands %>% dplyr::filter(gieStain =) "acen")
cytobands %>% dplyr::filter(gieStain == "acen")
devtools::document()
devtools::install_github("amitjavilaventura/plotmics")
